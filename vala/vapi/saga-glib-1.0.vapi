/* saga-glib-1.0.vapi generated by valac 0.36.3, do not modify. */

namespace Saga {
	/**
	 * @since 1.0
	 */
	[CCode (cheader_filename = "saga-glib.h")]
	public class BackendModule : GLib.TypeModule {
		/**
		 * @since 1.0
		 */
		public BackendModule (string? directory, string name);
		public override bool load ();
		/**
		 * Load a {@link Saga.BackendModule} from a name ensuring that a given
		 * backend is never loaded twice.
		 *
		 * if the 'SAGA_GLIB_BACKEND_PATH' environment variable is specified, this
		 * path will be used instead of system's defaults.
		 *
		 * @since 1.0
		 */
		public static Saga.BackendModule new_for_name (string name) throws Saga.Error;
		/**
		 * @since 1.0
		 */
		public static Saga.BackendModule new_for_url (Saga.URL url) throws Saga.Error;
		public override void unload ();
		/**
		 * The directory where the backend implementation is to be found, or 'null'
		 * to use system's defaults.
		 *
		 * @since 1.0
		 */
		public string? directory { get; construct; }
		/**
		 * The name of the backend to use.
		 *
		 * @since 1.0
		 */
		public string name { get; construct; }
		/**
		 * The computed path used to retreive the shared library.
		 *
		 * @since 1.0
		 */
		public string path { get; construct; }
		/**
		 * Struct containing types provided by the backend.
		 *
		 * @since 1.0
		 */
		public Saga.BackendTypes types { get; private set; }
	}
	[CCode (cheader_filename = "saga-glib.h")]
	public class Context : GLib.Object, Saga.Object {
		public Context (string type) throws Saga.Error, Saga.Error, Saga.Error;
		public string cert_repository { get; set; }
		/**
		 * Note: Since 'type' is not an acceptable property name, so 'context_type'
		 *       had to be used instead.
		 */
		public string context_type { get; set construct; }
		public int lifetime { get; set; }
		public string remote_host { get; set; }
		public string remote_id { get; set; }
		public uint remote_port { get; set; }
		public string server { get; set; }
		public string user_cert { get; set; }
		public string user_id { get; set; }
		public string user_pass { get; set; }
		public string user_proxy { get; set; }
		public string user_vo { get; set; }
	}
	[CCode (cheader_filename = "saga-glib.h")]
	public abstract class Job : Saga.Task<int>, Saga.Permissions {
		public Job ();
		public abstract void checkpoint () throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public virtual async void checkpoint_async (int priority = GLib.Priority.DEFAULT) throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public abstract string get_group () throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public abstract unowned Saga.JobDescription get_job_description () throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public abstract string get_owner () throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public override int get_result () throws Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public override async int get_result_async (int priority = GLib.Priority.DEFAULT) throws Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public abstract GLib.InputStream get_stderr () throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public abstract GLib.OutputStream get_stdin () throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public abstract GLib.InputStream get_stdout () throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public abstract void migrate (owned Saga.JobDescription jd) throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public virtual async void migrate_async (owned Saga.JobDescription jd, int priority = GLib.Priority.DEFAULT) throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public abstract void permissions_allow (string id, Saga.Permission perm) throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public abstract bool permissions_check (string id, Saga.Permission perm) throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public abstract void permissions_deny (string id, Saga.Permission perm) throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public abstract void resume () throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public virtual async void resume_async (int priority = GLib.Priority.DEFAULT) throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public abstract void @signal (GLib.ProcessSignal signum) throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public virtual async void signal_async (GLib.ProcessSignal signum, int priority = GLib.Priority.DEFAULT) throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public abstract void suspend () throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public virtual async void suspend_async (int priority = GLib.Priority.DEFAULT) throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public GLib.DateTime created { get; construct; }
		public string[] execution_hosts { get; set; }
		public int? exit_code { get; set; }
		public GLib.DateTime? finished { get; set; }
		public string job_id { get; construct; }
		public Saga.URL service_url { get; construct; }
		public GLib.DateTime? started { get; set; }
		public GLib.ProcessSignal? term_sig { get; set; }
		public signal void job_cpu_time (int second);
		public signal void job_memory_use (double megabyte);
		public signal void job_performance (double flops);
		public signal void job_signal (GLib.ProcessSignal sig);
		public signal void job_state (Saga.JobState state);
		public signal void job_state_detail (string state_detail);
		public signal void job_vmemory_use (double megabyte);
	}
	[CCode (cheader_filename = "saga-glib.h")]
	public class JobDescription : GLib.Object, Saga.Object {
		public JobDescription ();
		public string[] arguments { get; set; }
		public string[] candidate_hosts { get; set; }
		public bool? cleanup { get; set; }
		public string? cpu_architecture { get; set; }
		public string[] environment { get; set; }
		public string? error { get; set; }
		public string executable { get; set; }
		public Saga.FileTransfer[] file_transfer { get; set; }
		public string? input { get; set; }
		public bool interactive { get; set; }
		public Saga.URL[] job_contact { get; set; }
		public string? job_project { get; set; }
		public GLib.DateTime? job_start_time { get; set; }
		public int number_of_processes { get; set; }
		public string? operating_system_type { get; set; }
		public string? output { get; set; }
		public int processes_per_host { get; set; }
		public string? queue { get; set; }
		public string? spmd_variation { get; set; }
		public int threads_per_process { get; set; }
		public int total_cpu_count { get; set; }
		public GLib.TimeSpan? total_cpu_time { get; set; }
		public int? total_physical_memory { get; set; }
		public GLib.TimeSpan? wall_time_limit { get; set; }
		public string working_directory { get; set; }
	}
	[CCode (cheader_filename = "saga-glib.h")]
	public abstract class JobService : GLib.Object, Saga.Object {
		public JobService ();
		public abstract Saga.Job create_job (owned Saga.JobDescription jd) throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public virtual async Saga.Job create_job_async (owned Saga.JobDescription jd, int priority = GLib.Priority.DEFAULT) throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public abstract Saga.Job get_job (string job_id) throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public virtual async Saga.Job get_job_async (string job_id, int priority = GLib.Priority.DEFAULT) throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public abstract Saga.Job get_self () throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public virtual async Saga.Job get_self_async (int priority = GLib.Priority.DEFAULT) throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public Saga.URL get_service_url ();
		public abstract string[] list () throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public virtual async string[] list_async (int priority = GLib.Priority.DEFAULT) throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public static new Saga.JobService @new (Saga.Session session, Saga.URL url) throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public virtual Saga.Job run_job (string command_line, string host = "", out GLib.OutputStream? stdin = null, out GLib.InputStream? stdout = null, out GLib.InputStream? stderr = null) throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public virtual async Saga.Job run_job_async (string command_line, string host = "", int priority = GLib.Priority.DEFAULT, out GLib.OutputStream? stdin = null, out GLib.InputStream? stdout = null, out GLib.InputStream? stderr = null) throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
	}
	[CCode (cheader_filename = "saga-glib.h")]
	public class Metric : Saga.Object, GLib.Object {
		public Metric (string name, string description, string mode, string unit, GLib.Value value);
		public string description { get; construct; }
		public string mode { get; construct; }
		public string name { get; construct; }
		public string unit { get; construct; }
		public GLib.Value value { get; construct; }
	}
	[CCode (cheader_filename = "saga-glib.h")]
	public class SerialTaskContainer : Saga.TaskContainer {
		public SerialTaskContainer ();
		public override void add (Saga.Task task);
		public override void cancel (double timeout = 0.0) throws Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public override async void cancel_async (double timeout = 0.0, int priority = GLib.Priority.DEFAULT) throws Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public override string get_id ();
		public override Saga.Metric get_metric (string name) throws Saga.Error;
		public override Saga.Task get_task (string id);
		public override Saga.Task[] get_tasks ();
		public override string[] list_metrics ();
		public override void remove (Saga.Task task);
		public override void run () throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public override async void run_async (int priority = GLib.Priority.DEFAULT) throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public override uint size ();
		public override Saga.Task wait (Saga.WaitMode wait_mode = WaitMode.ALL, double timeout = 0.0) throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public override async Saga.Task wait_async (Saga.WaitMode wait_mode = WaitMode.ALL, double timeout = 0.0, int priority = GLib.Priority.DEFAULT) throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
	}
	[CCode (cheader_filename = "saga-glib.h")]
	public class Session : GLib.Object, Saga.Object {
		public Session ();
		public void add_context (owned Saga.Context context) throws Saga.Error, Saga.Error;
		public static Saga.Session get_default ();
		public (unowned Saga.Context)[] list_contexts ();
		public void remove_context (Saga.Context context) throws Saga.Error;
	}
	[CCode (cheader_filename = "saga-glib.h")]
	public abstract class Task<T> : GLib.Object, Saga.Object, Saga.Monitorable {
		public Task ();
		public abstract void cancel (double timeout = 0.0) throws Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public virtual async void cancel_async (double timeout = 0.0, int priority = GLib.Priority.DEFAULT) throws Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public abstract string get_id ();
		public abstract Saga.Metric get_metric (string name) throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public abstract T get_result () throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public virtual async T get_result_async (int priority = GLib.Priority.DEFAULT) throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public abstract Saga.Session get_session () throws Saga.Error;
		public abstract Saga.TaskState get_state () throws Saga.Error, Saga.Error, Saga.Error;
		public virtual async Saga.TaskState get_state_async (int priority = GLib.Priority.DEFAULT) throws Saga.Error, Saga.Error, Saga.Error;
		public abstract string[] list_metrics () throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public abstract void run () throws Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public virtual async void run_async (int priority = GLib.Priority.DEFAULT) throws Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public abstract void wait (double timeout = 0.0) throws Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public virtual async void wait_async (double timeout = 0.0, int priority = GLib.Priority.DEFAULT) throws Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public signal void task_state (Saga.TaskState state);
	}
	[CCode (cheader_filename = "saga-glib.h")]
	public abstract class TaskContainer : GLib.Object, Saga.Object, Saga.Monitorable {
		public TaskContainer ();
		public abstract void add (Saga.Task task) throws Saga.Error, Saga.Error, Saga.Error;
		public abstract void cancel (double timeout = 0.0) throws Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public virtual async void cancel_async (double timeout = 0.0, int priority = GLib.Priority.DEFAULT) throws Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public abstract string get_id ();
		public abstract Saga.Metric get_metric (string name) throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public virtual Saga.TaskState[] get_states () throws Saga.Error, Saga.Error, Saga.Error;
		public abstract Saga.Task get_task (string id) throws Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public abstract Saga.Task[] get_tasks () throws Saga.Error, Saga.Error, Saga.Error;
		public abstract string[] list_metrics () throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public abstract void remove (Saga.Task task) throws Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public abstract void run () throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public virtual async void run_async (int priority = GLib.Priority.DEFAULT) throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public virtual uint size () throws Saga.Error, Saga.Error, Saga.Error;
		public abstract Saga.Task wait (Saga.WaitMode mode = WaitMode.ALL, double timeout = 0.0) throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public virtual async Saga.Task wait_async (Saga.WaitMode mode = WaitMode.ALL, double timeout = 0.0, int priority = GLib.Priority.DEFAULT) throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public signal void task_container_state (string task_id);
	}
	[CCode (cheader_filename = "saga-glib.h")]
	public class URL : GLib.Object, Saga.Object {
		public URL (string url) throws Saga.Error, Saga.Error;
		public string get_escaped ();
		public string get_string ();
		public void set_string (string url) throws Saga.Error;
		public Saga.URL translate (Saga.Session? s, string scheme) throws Saga.Error, Saga.Error;
		public string? fragment { get; set; }
		public string? host { get; set; }
		public string path { get; set; }
		public uint? port { get; set; }
		public string? query { get; set; }
		public string scheme { get; set; }
		public string? userinfo { get; set; }
	}
	[CCode (cheader_filename = "saga-glib.h")]
	public interface Monitorable : Saga.Object {
		public abstract Saga.Metric get_metric (string name) throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public virtual async Saga.Metric get_metric_async (string name, int priority = GLib.Priority.DEFAULT) throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public abstract string[] list_metrics () throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
	}
	[CCode (cheader_filename = "saga-glib.h")]
	public interface Object : GLib.Object {
		public abstract string get_id ();
		public abstract Saga.Session get_session () throws Saga.Error;
	}
	[CCode (cheader_filename = "saga-glib.h")]
	public interface Permissions : Saga.Object {
		public abstract string get_group () throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public abstract string get_owner () throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public abstract void permissions_allow (string id, Saga.Permission perm) throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public abstract bool permissions_check (string id, Saga.Permission perm) throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
		public abstract void permissions_deny (string id, Saga.Permission perm) throws Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error, Saga.Error;
	}
	/**
	 * Struct containing all {@link GLib.Type} provided by a backend.
	 *
	 * If a specific feature is not to be provided, the {@link GLib.Type.INVALID}
	 * has to be used as placeholder.
	 *
	 * @since 1.0
	 */
	[CCode (cheader_filename = "saga-glib.h")]
	public struct BackendTypes {
		/**
		 * Type for the {@link Saga.JobService} implementation.
		 *
		 * @since 1.0
		 */
		public GLib.Type job_service_type;
		/**
		 * @since 1.0
		 */
		public GLib.Type stream_server_type;
		/**
		 * @since 1.0
		 */
		public GLib.Type file_type;
		/**
		 * @since 1.0
		 */
		public GLib.Type logical_file_type;
		/**
		 * @since 1.0
		 */
		public GLib.Type stream_type;
		/**
		 * @since 1.0
		 */
		public GLib.Type rpc_type;
	}
	[CCode (cheader_filename = "saga-glib.h")]
	public struct FileTransfer {
		public string local_file;
		public string operator;
		public string remote_file;
	}
	[CCode (cheader_filename = "saga-glib.h")]
	public enum JobState {
		NEW,
		RUNNING,
		DONE,
		CANCELED,
		FAILED,
		SUSPENDED
	}
	[CCode (cheader_filename = "saga-glib.h")]
	[Flags]
	public enum Permission {
		NONE,
		QUERY,
		READ,
		WRITE,
		EXEC,
		OWNER,
		ALL
	}
	[CCode (cheader_filename = "saga-glib.h")]
	public enum TaskState {
		NEW,
		RUNNING,
		DONE,
		CANCELED,
		FAILED
	}
	[CCode (cheader_filename = "saga-glib.h")]
	public enum WaitMode {
		ALL,
		ANY
	}
	[CCode (cheader_filename = "saga-glib.h")]
	public errordomain Error {
		INCORRECT_URL,
		BAD_PARAMETER,
		ALREADY_EXISTS,
		DOES_NOT_EXIST,
		INCORRECT_STATE,
		INCORRECT_TYPE,
		PERMISSION_DENIED,
		AUTHORIZATION_FAILED,
		AUTHENTICATION_FAILED,
		TIMEOUT,
		NO_SUCCESS,
		NOT_IMPLEMENTED
	}
	/**
	 * Initialize a SAGA backend and register releveant class and interfaces.
	 *
	 * Features are loaded with 'out' parameters or left 'null' if not
	 * supported.
	 *
	 * @since 1.0
	 */
	[CCode (cheader_filename = "saga-glib.h")]
	public delegate Saga.BackendTypes BackendInitFunc (GLib.TypeModule type_module);
}
