/* libmm-glib.vapi generated by vapigen-0.38, do not modify. */

[CCode (cprefix = "MM", gir_namespace = "ModemManager", gir_version = "1.0", lower_case_cprefix = "mm_")]
namespace MM {
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_bearer_get_type ()")]
	public class Bearer : MM.GdbusBearerProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusBearer {
		[CCode (has_construct_function = false)]
		protected Bearer ();
		public async bool connect (GLib.Cancellable? cancellable) throws GLib.Error;
		public bool connect_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool disconnect (GLib.Cancellable? cancellable) throws GLib.Error;
		public bool disconnect_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public string dup_interface ();
		public string dup_path ();
		public bool get_connected ();
		public unowned string get_interface ();
		public uint get_ip_timeout ();
		public MM.BearerIpConfig get_ipv4_config ();
		public MM.BearerIpConfig get_ipv6_config ();
		public unowned string get_path ();
		public MM.BearerProperties get_properties ();
		public MM.BearerStats get_stats ();
		public bool get_suspended ();
		public unowned MM.BearerIpConfig peek_ipv4_config ();
		public unowned MM.BearerIpConfig peek_ipv6_config ();
		public unowned MM.BearerProperties peek_properties ();
		public unowned MM.BearerStats peek_stats ();
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_bearer_ip_config_get_type ()")]
	public class BearerIpConfig : GLib.Object {
		[CCode (has_construct_function = false)]
		public BearerIpConfig ();
		public MM.BearerIpConfig dup ();
		[CCode (has_construct_function = false)]
		public BearerIpConfig.from_dictionary (GLib.Variant dictionary) throws GLib.Error;
		public unowned string get_address ();
		public GLib.Variant get_dictionary ();
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_dns ();
		public unowned string get_gateway ();
		public MM.BearerIpMethod get_method ();
		public uint get_mtu ();
		public uint get_prefix ();
		public void set_address (string address);
		public void set_dns (string dns);
		public void set_gateway (string gateway);
		public void set_method (MM.BearerIpMethod ip_method);
		public void set_mtu (uint mtu);
		public void set_prefix (uint prefix);
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_bearer_properties_get_type ()")]
	public class BearerProperties : GLib.Object {
		[CCode (has_construct_function = false)]
		public BearerProperties ();
		public bool cmp (MM.BearerProperties b);
		public bool consume_string (string key, string value) throws GLib.Error;
		public bool consume_variant (string key, GLib.Variant value) throws GLib.Error;
		public MM.BearerProperties dup ();
		[CCode (has_construct_function = false)]
		public BearerProperties.from_dictionary (GLib.Variant dictionary) throws GLib.Error;
		[CCode (has_construct_function = false)]
		public BearerProperties.from_string (string str) throws GLib.Error;
		public bool get_allow_roaming ();
		public MM.BearerAllowedAuth get_allowed_auth ();
		public unowned string get_apn ();
		public GLib.Variant get_dictionary ();
		public MM.BearerIpFamily get_ip_type ();
		public unowned string get_number ();
		public unowned string get_password ();
		public MM.ModemCdmaRmProtocol get_rm_protocol ();
		public unowned string get_user ();
		public void set_allow_roaming (bool allow_roaming);
		public void set_allowed_auth (MM.BearerAllowedAuth allowed_auth);
		public void set_apn (string apn);
		public void set_ip_type (MM.BearerIpFamily ip_type);
		public void set_number (string number);
		public void set_password (string password);
		public void set_rm_protocol (MM.ModemCdmaRmProtocol protocol);
		public void set_user (string user);
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_bearer_stats_get_type ()")]
	public class BearerStats : GLib.Object {
		[CCode (has_construct_function = false)]
		public BearerStats ();
		[CCode (has_construct_function = false)]
		public BearerStats.from_dictionary (GLib.Variant dictionary) throws GLib.Error;
		public GLib.Variant get_dictionary ();
		public uint get_duration ();
		public uint64 get_rx_bytes ();
		public uint64 get_tx_bytes ();
		public void set_duration (uint duration);
		public void set_rx_bytes (uint64 rx_bytes);
		public void set_tx_bytes (uint64 tx_bytes);
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_call_get_type ()")]
	public class Call : GLib.DBusProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable {
		[CCode (has_construct_function = false)]
		protected Call ();
		public async bool accept (GLib.Cancellable? cancellable) throws GLib.Error;
		public bool accept_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public string dup_number ();
		public string dup_path ();
		public MM.CallDirection get_direction ();
		public unowned string get_number ();
		public unowned string get_path ();
		public MM.CallState get_state ();
		public MM.CallStateReason get_state_reason ();
		public async bool hangup (GLib.Cancellable? cancellable) throws GLib.Error;
		public bool hangup_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool send_dtmf (string dtmf, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool send_dtmf_sync (string dtmf, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool start (GLib.Cancellable? cancellable) throws GLib.Error;
		public bool start_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_call_properties_get_type ()")]
	public class CallProperties : GLib.Object {
		[CCode (has_construct_function = false)]
		public CallProperties ();
		public MM.CallProperties dup ();
		[CCode (has_construct_function = false)]
		public CallProperties.from_dictionary (GLib.Variant dictionary) throws GLib.Error;
		[CCode (has_construct_function = false)]
		public CallProperties.from_string (string str) throws GLib.Error;
		public GLib.Variant get_dictionary ();
		public MM.CallDirection get_direction ();
		public unowned string get_number ();
		public MM.CallState get_state ();
		public MM.CallStateReason get_state_reason ();
		public void set_direction (MM.CallDirection direction);
		public void set_number (string text);
		public void set_state (MM.CallState state);
		public void set_state_reason (MM.CallStateReason state_reason);
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_cdma_manual_activation_properties_get_type ()")]
	public class CdmaManualActivationProperties : GLib.Object {
		[CCode (has_construct_function = false)]
		public CdmaManualActivationProperties ();
		[CCode (has_construct_function = false)]
		public CdmaManualActivationProperties.from_dictionary (GLib.Variant dictionary) throws GLib.Error;
		[CCode (has_construct_function = false)]
		public CdmaManualActivationProperties.from_string (string str) throws GLib.Error;
		public GLib.Variant get_dictionary ();
		public unowned string get_mdn ();
		public unowned string get_min ();
		public unowned string get_mn_aaa_key ();
		public unowned string get_mn_ha_key ();
		public uint8 get_prl (out size_t prl_len);
		public GLib.ByteArray get_prl_bytearray ();
		public uint16 get_sid ();
		public unowned string get_spc ();
		public unowned GLib.ByteArray peek_prl_bytearray ();
		public bool set_mdn (string mdn) throws GLib.Error;
		public bool set_min (string min) throws GLib.Error;
		public bool set_mn_aaa_key (string mn_aaa_key) throws GLib.Error;
		public bool set_mn_ha_key (string mn_ha_key) throws GLib.Error;
		public bool set_prl (uint8 prl, size_t prl_length) throws GLib.Error;
		public bool set_prl_bytearray (GLib.ByteArray prl) throws GLib.Error;
		public void set_sid (uint16 sid);
		public bool set_spc (string spc) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_firmware_properties_get_type ()")]
	public class FirmwareProperties : GLib.Object {
		[CCode (has_construct_function = false)]
		public FirmwareProperties (MM.FirmwareImageType image_type, string unique_id);
		[CCode (has_construct_function = false)]
		public FirmwareProperties.from_dictionary (GLib.Variant dictionary) throws GLib.Error;
		public GLib.Variant get_dictionary ();
		public unowned string get_gobi_boot_version ();
		public unowned string get_gobi_modem_unique_id ();
		public unowned string get_gobi_pri_info ();
		public unowned string get_gobi_pri_unique_id ();
		public unowned string get_gobi_pri_version ();
		public MM.FirmwareImageType get_image_type ();
		public unowned string get_unique_id ();
		public void set_gobi_boot_version (string version);
		public void set_gobi_modem_unique_id (string id);
		public void set_gobi_pri_info (string info);
		public void set_gobi_pri_unique_id (string id);
		public void set_gobi_pri_version (string version);
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusBearerProxy", type_id = "mm_gdbus_bearer_proxy_get_type ()")]
	public class GdbusBearerProxy : GLib.DBusProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusBearer {
		[CCode (cname = "mm_gdbus_bearer_proxy_new", has_construct_function = false)]
		public async GdbusBearerProxy (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "mm_gdbus_bearer_proxy_new_for_bus", has_construct_function = false)]
		public async GdbusBearerProxy.for_bus (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusBearer*")]
		public GdbusBearerProxy.for_bus_sync (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusBearer*")]
		public GdbusBearerProxy.sync (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusBearerSkeleton", type_id = "mm_gdbus_bearer_skeleton_get_type ()")]
	public class GdbusBearerSkeleton : GLib.DBusInterfaceSkeleton, GLib.DBusInterface, MM.GdbusBearer {
		[CCode (has_construct_function = false, type = "MmGdbusBearer*")]
		public GdbusBearerSkeleton ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModem3gppProxy", type_id = "mm_gdbus_modem3gpp_proxy_get_type ()")]
	public class GdbusModem3gppProxy : GLib.DBusProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModem3gpp {
		[CCode (cname = "mm_gdbus_modem3gpp_proxy_new", has_construct_function = false)]
		public async GdbusModem3gppProxy (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "mm_gdbus_modem3gpp_proxy_new_for_bus", has_construct_function = false)]
		public async GdbusModem3gppProxy.for_bus (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModem3gpp*")]
		public GdbusModem3gppProxy.for_bus_sync (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModem3gpp*")]
		public GdbusModem3gppProxy.sync (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModem3gppSkeleton", type_id = "mm_gdbus_modem3gpp_skeleton_get_type ()")]
	public class GdbusModem3gppSkeleton : GLib.DBusInterfaceSkeleton, GLib.DBusInterface, MM.GdbusModem3gpp {
		[CCode (has_construct_function = false, type = "MmGdbusModem3gpp*")]
		public GdbusModem3gppSkeleton ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModem3gppUssdProxy", type_id = "mm_gdbus_modem3gpp_ussd_proxy_get_type ()")]
	public class GdbusModem3gppUssdProxy : GLib.DBusProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModem3gppUssd {
		[CCode (cname = "mm_gdbus_modem3gpp_ussd_proxy_new", has_construct_function = false)]
		public async GdbusModem3gppUssdProxy (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "mm_gdbus_modem3gpp_ussd_proxy_new_for_bus", has_construct_function = false)]
		public async GdbusModem3gppUssdProxy.for_bus (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModem3gppUssd*")]
		public GdbusModem3gppUssdProxy.for_bus_sync (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModem3gppUssd*")]
		public GdbusModem3gppUssdProxy.sync (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModem3gppUssdSkeleton", type_id = "mm_gdbus_modem3gpp_ussd_skeleton_get_type ()")]
	public class GdbusModem3gppUssdSkeleton : GLib.DBusInterfaceSkeleton, GLib.DBusInterface, MM.GdbusModem3gppUssd {
		[CCode (has_construct_function = false, type = "MmGdbusModem3gppUssd*")]
		public GdbusModem3gppUssdSkeleton ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemCdmaProxy", type_id = "mm_gdbus_modem_cdma_proxy_get_type ()")]
	public class GdbusModemCdmaProxy : GLib.DBusProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModemCdma {
		[CCode (cname = "mm_gdbus_modem_cdma_proxy_new", has_construct_function = false)]
		public async GdbusModemCdmaProxy (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "mm_gdbus_modem_cdma_proxy_new_for_bus", has_construct_function = false)]
		public async GdbusModemCdmaProxy.for_bus (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModemCdma*")]
		public GdbusModemCdmaProxy.for_bus_sync (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModemCdma*")]
		public GdbusModemCdmaProxy.sync (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemCdmaSkeleton", type_id = "mm_gdbus_modem_cdma_skeleton_get_type ()")]
	public class GdbusModemCdmaSkeleton : GLib.DBusInterfaceSkeleton, GLib.DBusInterface, MM.GdbusModemCdma {
		[CCode (has_construct_function = false, type = "MmGdbusModemCdma*")]
		public GdbusModemCdmaSkeleton ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemFirmwareProxy", type_id = "mm_gdbus_modem_firmware_proxy_get_type ()")]
	public class GdbusModemFirmwareProxy : GLib.DBusProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModemFirmware {
		[CCode (cname = "mm_gdbus_modem_firmware_proxy_new", has_construct_function = false)]
		public async GdbusModemFirmwareProxy (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "mm_gdbus_modem_firmware_proxy_new_for_bus", has_construct_function = false)]
		public async GdbusModemFirmwareProxy.for_bus (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModemFirmware*")]
		public GdbusModemFirmwareProxy.for_bus_sync (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModemFirmware*")]
		public GdbusModemFirmwareProxy.sync (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemFirmwareSkeleton", type_id = "mm_gdbus_modem_firmware_skeleton_get_type ()")]
	public class GdbusModemFirmwareSkeleton : GLib.DBusInterfaceSkeleton, GLib.DBusInterface, MM.GdbusModemFirmware {
		[CCode (has_construct_function = false, type = "MmGdbusModemFirmware*")]
		public GdbusModemFirmwareSkeleton ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemLocationProxy", type_id = "mm_gdbus_modem_location_proxy_get_type ()")]
	public class GdbusModemLocationProxy : GLib.DBusProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModemLocation {
		[CCode (cname = "mm_gdbus_modem_location_proxy_new", has_construct_function = false)]
		public async GdbusModemLocationProxy (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "mm_gdbus_modem_location_proxy_new_for_bus", has_construct_function = false)]
		public async GdbusModemLocationProxy.for_bus (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModemLocation*")]
		public GdbusModemLocationProxy.for_bus_sync (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModemLocation*")]
		public GdbusModemLocationProxy.sync (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemLocationSkeleton", type_id = "mm_gdbus_modem_location_skeleton_get_type ()")]
	public class GdbusModemLocationSkeleton : GLib.DBusInterfaceSkeleton, GLib.DBusInterface, MM.GdbusModemLocation {
		[CCode (has_construct_function = false, type = "MmGdbusModemLocation*")]
		public GdbusModemLocationSkeleton ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemMessagingProxy", type_id = "mm_gdbus_modem_messaging_proxy_get_type ()")]
	public class GdbusModemMessagingProxy : GLib.DBusProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModemMessaging {
		[CCode (cname = "mm_gdbus_modem_messaging_proxy_new", has_construct_function = false)]
		public async GdbusModemMessagingProxy (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "mm_gdbus_modem_messaging_proxy_new_for_bus", has_construct_function = false)]
		public async GdbusModemMessagingProxy.for_bus (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModemMessaging*")]
		public GdbusModemMessagingProxy.for_bus_sync (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModemMessaging*")]
		public GdbusModemMessagingProxy.sync (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemMessagingSkeleton", type_id = "mm_gdbus_modem_messaging_skeleton_get_type ()")]
	public class GdbusModemMessagingSkeleton : GLib.DBusInterfaceSkeleton, GLib.DBusInterface, MM.GdbusModemMessaging {
		[CCode (has_construct_function = false, type = "MmGdbusModemMessaging*")]
		public GdbusModemMessagingSkeleton ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemOmaProxy", type_id = "mm_gdbus_modem_oma_proxy_get_type ()")]
	public class GdbusModemOmaProxy : GLib.DBusProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModemOma {
		[CCode (cname = "mm_gdbus_modem_oma_proxy_new", has_construct_function = false)]
		public async GdbusModemOmaProxy (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "mm_gdbus_modem_oma_proxy_new_for_bus", has_construct_function = false)]
		public async GdbusModemOmaProxy.for_bus (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModemOma*")]
		public GdbusModemOmaProxy.for_bus_sync (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModemOma*")]
		public GdbusModemOmaProxy.sync (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemOmaSkeleton", type_id = "mm_gdbus_modem_oma_skeleton_get_type ()")]
	public class GdbusModemOmaSkeleton : GLib.DBusInterfaceSkeleton, GLib.DBusInterface, MM.GdbusModemOma {
		[CCode (has_construct_function = false, type = "MmGdbusModemOma*")]
		public GdbusModemOmaSkeleton ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemProxy", type_id = "mm_gdbus_modem_proxy_get_type ()")]
	public class GdbusModemProxy : GLib.DBusProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModem {
		[CCode (cname = "mm_gdbus_modem_proxy_new", has_construct_function = false)]
		public async GdbusModemProxy (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "mm_gdbus_modem_proxy_new_for_bus", has_construct_function = false)]
		public async GdbusModemProxy.for_bus (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModem*")]
		public GdbusModemProxy.for_bus_sync (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModem*")]
		public GdbusModemProxy.sync (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemSignalProxy", type_id = "mm_gdbus_modem_signal_proxy_get_type ()")]
	public class GdbusModemSignalProxy : GLib.DBusProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModemSignal {
		[CCode (cname = "mm_gdbus_modem_signal_proxy_new", has_construct_function = false)]
		public async GdbusModemSignalProxy (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "mm_gdbus_modem_signal_proxy_new_for_bus", has_construct_function = false)]
		public async GdbusModemSignalProxy.for_bus (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModemSignal*")]
		public GdbusModemSignalProxy.for_bus_sync (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModemSignal*")]
		public GdbusModemSignalProxy.sync (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemSignalSkeleton", type_id = "mm_gdbus_modem_signal_skeleton_get_type ()")]
	public class GdbusModemSignalSkeleton : GLib.DBusInterfaceSkeleton, GLib.DBusInterface, MM.GdbusModemSignal {
		[CCode (has_construct_function = false, type = "MmGdbusModemSignal*")]
		public GdbusModemSignalSkeleton ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemSimpleProxy", type_id = "mm_gdbus_modem_simple_proxy_get_type ()")]
	public class GdbusModemSimpleProxy : GLib.DBusProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModemSimple {
		[CCode (cname = "mm_gdbus_modem_simple_proxy_new", has_construct_function = false)]
		public async GdbusModemSimpleProxy (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "mm_gdbus_modem_simple_proxy_new_for_bus", has_construct_function = false)]
		public async GdbusModemSimpleProxy.for_bus (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModemSimple*")]
		public GdbusModemSimpleProxy.for_bus_sync (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModemSimple*")]
		public GdbusModemSimpleProxy.sync (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemSimpleSkeleton", type_id = "mm_gdbus_modem_simple_skeleton_get_type ()")]
	public class GdbusModemSimpleSkeleton : GLib.DBusInterfaceSkeleton, GLib.DBusInterface, MM.GdbusModemSimple {
		[CCode (has_construct_function = false, type = "MmGdbusModemSimple*")]
		public GdbusModemSimpleSkeleton ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemSkeleton", type_id = "mm_gdbus_modem_skeleton_get_type ()")]
	public class GdbusModemSkeleton : GLib.DBusInterfaceSkeleton, GLib.DBusInterface, MM.GdbusModem {
		[CCode (has_construct_function = false, type = "MmGdbusModem*")]
		public GdbusModemSkeleton ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemTimeProxy", type_id = "mm_gdbus_modem_time_proxy_get_type ()")]
	public class GdbusModemTimeProxy : GLib.DBusProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModemTime {
		[CCode (cname = "mm_gdbus_modem_time_proxy_new", has_construct_function = false)]
		public async GdbusModemTimeProxy (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "mm_gdbus_modem_time_proxy_new_for_bus", has_construct_function = false)]
		public async GdbusModemTimeProxy.for_bus (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModemTime*")]
		public GdbusModemTimeProxy.for_bus_sync (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModemTime*")]
		public GdbusModemTimeProxy.sync (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemTimeSkeleton", type_id = "mm_gdbus_modem_time_skeleton_get_type ()")]
	public class GdbusModemTimeSkeleton : GLib.DBusInterfaceSkeleton, GLib.DBusInterface, MM.GdbusModemTime {
		[CCode (has_construct_function = false, type = "MmGdbusModemTime*")]
		public GdbusModemTimeSkeleton ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemVoiceProxy", type_id = "mm_gdbus_modem_voice_proxy_get_type ()")]
	public class GdbusModemVoiceProxy : GLib.DBusProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModemVoice {
		[CCode (cname = "mm_gdbus_modem_voice_proxy_new", has_construct_function = false)]
		public async GdbusModemVoiceProxy (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "mm_gdbus_modem_voice_proxy_new_for_bus", has_construct_function = false)]
		public async GdbusModemVoiceProxy.for_bus (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModemVoice*")]
		public GdbusModemVoiceProxy.for_bus_sync (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusModemVoice*")]
		public GdbusModemVoiceProxy.sync (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemVoiceSkeleton", type_id = "mm_gdbus_modem_voice_skeleton_get_type ()")]
	public class GdbusModemVoiceSkeleton : GLib.DBusInterfaceSkeleton, GLib.DBusInterface, MM.GdbusModemVoice {
		[CCode (has_construct_function = false, type = "MmGdbusModemVoice*")]
		public GdbusModemVoiceSkeleton ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusObjectManagerClient", type_id = "mm_gdbus_object_manager_client_get_type ()")]
	public class GdbusObjectManagerClient : GLib.DBusObjectManagerClient, GLib.AsyncInitable, GLib.DBusObjectManager, GLib.Initable {
		[CCode (cname = "mm_gdbus_object_manager_client_new", has_construct_function = false)]
		public async GdbusObjectManagerClient (GLib.DBusConnection connection, GLib.DBusObjectManagerClientFlags flags, string? name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "mm_gdbus_object_manager_client_new_for_bus", has_construct_function = false)]
		public async GdbusObjectManagerClient.for_bus (GLib.BusType bus_type, GLib.DBusObjectManagerClientFlags flags, string name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (has_construct_function = false, type = "GDBusObjectManager*")]
		public GdbusObjectManagerClient.for_bus_sync (GLib.BusType bus_type, GLib.DBusObjectManagerClientFlags flags, string name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public static GLib.Type get_proxy_type (GLib.DBusObjectManagerClient manager, string object_path, string? interface_name, void* user_data);
		[CCode (has_construct_function = false, type = "GDBusObjectManager*")]
		public GdbusObjectManagerClient.sync (GLib.DBusConnection connection, GLib.DBusObjectManagerClientFlags flags, string? name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusObjectProxy", type_id = "mm_gdbus_object_proxy_get_type ()")]
	public class GdbusObjectProxy : GLib.DBusObjectProxy, GLib.DBusObject, MM.GdbusObject {
		[CCode (has_construct_function = false)]
		public GdbusObjectProxy (GLib.DBusConnection connection, string object_path);
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusObjectSkeleton", type_id = "mm_gdbus_object_skeleton_get_type ()")]
	public class GdbusObjectSkeleton : GLib.DBusObjectSkeleton, GLib.DBusObject, MM.GdbusObject {
		[CCode (has_construct_function = false)]
		public GdbusObjectSkeleton (string object_path);
		public void set_modem (MM.GdbusModem? interface_);
		public void set_modem3gpp (MM.GdbusModem3gpp? interface_);
		public void set_modem3gpp_ussd (MM.GdbusModem3gppUssd? interface_);
		public void set_modem_cdma (MM.GdbusModemCdma? interface_);
		public void set_modem_firmware (MM.GdbusModemFirmware? interface_);
		public void set_modem_location (MM.GdbusModemLocation? interface_);
		public void set_modem_messaging (MM.GdbusModemMessaging? interface_);
		public void set_modem_oma (MM.GdbusModemOma? interface_);
		public void set_modem_signal (MM.GdbusModemSignal? interface_);
		public void set_modem_simple (MM.GdbusModemSimple? interface_);
		public void set_modem_time (MM.GdbusModemTime? interface_);
		public void set_modem_voice (MM.GdbusModemVoice? interface_);
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusOrgFreedesktopModemManager1Proxy", type_id = "mm_gdbus_org_freedesktop_modem_manager1_proxy_get_type ()")]
	public class GdbusOrgFreedesktopModemManager1Proxy : GLib.DBusProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusOrgFreedesktopModemManager1 {
		[CCode (cname = "mm_gdbus_org_freedesktop_modem_manager1_proxy_new", has_construct_function = false)]
		public async GdbusOrgFreedesktopModemManager1Proxy (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "mm_gdbus_org_freedesktop_modem_manager1_proxy_new_for_bus", has_construct_function = false)]
		public async GdbusOrgFreedesktopModemManager1Proxy.for_bus (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusOrgFreedesktopModemManager1*")]
		public GdbusOrgFreedesktopModemManager1Proxy.for_bus_sync (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusOrgFreedesktopModemManager1*")]
		public GdbusOrgFreedesktopModemManager1Proxy.sync (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusOrgFreedesktopModemManager1Skeleton", type_id = "mm_gdbus_org_freedesktop_modem_manager1_skeleton_get_type ()")]
	public class GdbusOrgFreedesktopModemManager1Skeleton : GLib.DBusInterfaceSkeleton, GLib.DBusInterface, MM.GdbusOrgFreedesktopModemManager1 {
		[CCode (has_construct_function = false, type = "MmGdbusOrgFreedesktopModemManager1*")]
		public GdbusOrgFreedesktopModemManager1Skeleton ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusSimProxy", type_id = "mm_gdbus_sim_proxy_get_type ()")]
	public class GdbusSimProxy : GLib.DBusProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusSim {
		[CCode (cname = "mm_gdbus_sim_proxy_new", has_construct_function = false)]
		public async GdbusSimProxy (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "mm_gdbus_sim_proxy_new_for_bus", has_construct_function = false)]
		public async GdbusSimProxy.for_bus (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusSim*")]
		public GdbusSimProxy.for_bus_sync (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusSim*")]
		public GdbusSimProxy.sync (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusSimSkeleton", type_id = "mm_gdbus_sim_skeleton_get_type ()")]
	public class GdbusSimSkeleton : GLib.DBusInterfaceSkeleton, GLib.DBusInterface, MM.GdbusSim {
		[CCode (has_construct_function = false, type = "MmGdbusSim*")]
		public GdbusSimSkeleton ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusSmsProxy", type_id = "mm_gdbus_sms_proxy_get_type ()")]
	public class GdbusSmsProxy : GLib.DBusProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusSms {
		[CCode (cname = "mm_gdbus_sms_proxy_new", has_construct_function = false)]
		public async GdbusSmsProxy (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "mm_gdbus_sms_proxy_new_for_bus", has_construct_function = false)]
		public async GdbusSmsProxy.for_bus (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusSms*")]
		public GdbusSmsProxy.for_bus_sync (GLib.BusType bus_type, GLib.DBusProxyFlags flags, string name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (has_construct_function = false, type = "MmGdbusSms*")]
		public GdbusSmsProxy.sync (GLib.DBusConnection connection, GLib.DBusProxyFlags flags, string? name, string object_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusSmsSkeleton", type_id = "mm_gdbus_sms_skeleton_get_type ()")]
	public class GdbusSmsSkeleton : GLib.DBusInterfaceSkeleton, GLib.DBusInterface, MM.GdbusSms {
		[CCode (has_construct_function = false, type = "MmGdbusSms*")]
		public GdbusSmsSkeleton ();
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_kernel_event_properties_get_type ()")]
	public class KernelEventProperties : GLib.Object {
		[CCode (has_construct_function = false)]
		public KernelEventProperties ();
		public MM.KernelEventProperties dup ();
		[CCode (has_construct_function = false)]
		public KernelEventProperties.from_dictionary (GLib.Variant dictionary) throws GLib.Error;
		[CCode (has_construct_function = false)]
		public KernelEventProperties.from_string (string str) throws GLib.Error;
		public unowned string get_action ();
		public GLib.Variant get_dictionary ();
		public unowned string get_name ();
		public unowned string get_subsystem ();
		public unowned string get_uid ();
		public void set_action (string action);
		public void set_name (string name);
		public void set_subsystem (string subsystem);
		public void set_uid (string uid);
	}
	[CCode (cheader_filename = "libmm-glib.h", lower_case_csuffix = "location_3gpp", type_id = "mm_location_3gpp_get_type ()")]
	public class Location3gpp : GLib.Object {
		[CCode (has_construct_function = false)]
		public Location3gpp ();
		[CCode (has_construct_function = false)]
		public Location3gpp.from_string_variant (GLib.Variant string) throws GLib.Error;
		public ulong get_cell_id ();
		public ulong get_location_area_code ();
		public uint get_mobile_country_code ();
		public uint get_mobile_network_code ();
		public GLib.Variant get_string_variant ();
		public bool set_cell_id (ulong cell_id);
		public bool set_location_area_code (ulong location_area_code);
		public bool set_mobile_country_code (uint mobile_country_code);
		public bool set_mobile_network_code (uint mobile_network_code);
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_location_cdma_bs_get_type ()")]
	public class LocationCdmaBs : GLib.Object {
		[CCode (has_construct_function = false)]
		public LocationCdmaBs ();
		[CCode (has_construct_function = false)]
		public LocationCdmaBs.from_dictionary (GLib.Variant string) throws GLib.Error;
		public GLib.Variant get_dictionary ();
		public double get_latitude ();
		public double get_longitude ();
		public bool @set (double longitude, double latitude);
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_location_gps_nmea_get_type ()")]
	public class LocationGpsNmea : GLib.Object {
		[CCode (has_construct_function = false)]
		public LocationGpsNmea ();
		public bool add_trace (string trace);
		public string build_full ();
		[CCode (has_construct_function = false)]
		public LocationGpsNmea.from_string_variant (GLib.Variant string) throws GLib.Error;
		public GLib.Variant get_string_variant ();
		public unowned string get_trace (string trace_type);
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_location_gps_raw_get_type ()")]
	public class LocationGpsRaw : GLib.Object {
		[CCode (has_construct_function = false)]
		public LocationGpsRaw ();
		public bool add_trace (string trace);
		[CCode (has_construct_function = false)]
		public LocationGpsRaw.from_dictionary (GLib.Variant string) throws GLib.Error;
		public double get_altitude ();
		public GLib.Variant get_dictionary ();
		public double get_latitude ();
		public double get_longitude ();
		public unowned string get_utc_time ();
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_manager_get_type ()")]
	public class Manager : MM.GdbusObjectManagerClient, GLib.AsyncInitable, GLib.DBusObjectManager, GLib.Initable {
		[CCode (cname = "mm_manager_new", has_construct_function = false)]
		public async Manager (GLib.DBusConnection connection, GLib.DBusObjectManagerClientFlags flags, GLib.Cancellable? cancellable) throws GLib.Error;
		public GLib.DBusProxy get_proxy ();
		public unowned GLib.DBusProxy peek_proxy ();
		public async bool report_kernel_event (MM.KernelEventProperties properties, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool report_kernel_event_sync (MM.KernelEventProperties properties, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool scan_devices (GLib.Cancellable? cancellable) throws GLib.Error;
		public bool scan_devices_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool set_logging (string level, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool set_logging_sync (string level, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (has_construct_function = false)]
		public Manager.sync (GLib.DBusConnection connection, GLib.DBusObjectManagerClientFlags flags, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_modem_get_type ()")]
	public class Modem : MM.GdbusModemProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModem {
		[CCode (has_construct_function = false)]
		protected Modem ();
		public async string command (string cmd, uint timeout, GLib.Cancellable? cancellable) throws GLib.Error;
		public string command_sync (string cmd, uint timeout, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async MM.Bearer create_bearer (MM.BearerProperties properties, GLib.Cancellable? cancellable) throws GLib.Error;
		public MM.Bearer create_bearer_sync (MM.BearerProperties properties, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool delete_bearer (string bearer, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool delete_bearer_sync (string bearer, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool disable (GLib.Cancellable? cancellable) throws GLib.Error;
		public bool disable_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] dup_bearer_paths ();
		public string dup_device ();
		public string dup_device_identifier ();
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] dup_drivers ();
		public string dup_equipment_identifier ();
		public string dup_manufacturer ();
		public string dup_model ();
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] dup_own_numbers ();
		public string dup_path ();
		public string dup_plugin ();
		public string dup_primary_port ();
		public string dup_revision ();
		public string dup_sim_path ();
		public async bool enable (GLib.Cancellable? cancellable) throws GLib.Error;
		public bool enable_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool factory_reset (string code, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool factory_reset_sync (string code, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public MM.ModemAccessTechnology get_access_technologies ();
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_bearer_paths ();
		public bool get_current_bands ([CCode (array_length_cname = "n_bands", array_length_pos = 1.1, array_length_type = "guint")] out MM.ModemBand[] bands);
		public MM.ModemCapability get_current_capabilities ();
		public bool get_current_modes (out MM.ModemMode allowed, out MM.ModemMode preferred);
		public unowned string get_device ();
		public unowned string get_device_identifier ();
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_drivers ();
		public unowned string get_equipment_identifier ();
		public unowned string get_manufacturer ();
		public uint get_max_active_bearers ();
		public uint get_max_bearers ();
		public unowned string get_model ();
		public static bool get_pending_network_initiated_sessions (MM.ModemOma self, [CCode (array_length_cname = "n_sessions", array_length_pos = 2.1, array_length_type = "guint")] out MM.OmaPendingNetworkInitiatedSession[] sessions);
		public unowned string get_plugin ();
		public bool get_ports ([CCode (array_length_cname = "n_ports", array_length_pos = 1.1, array_length_type = "guint")] out MM.ModemPortInfo[] ports);
		public MM.ModemPowerState get_power_state ();
		public unowned string get_primary_port ();
		public unowned string get_revision ();
		public uint get_signal_quality (out bool recent);
		public async MM.Sim get_sim (GLib.Cancellable? cancellable) throws GLib.Error;
		public MM.Sim get_sim_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public MM.ModemState get_state ();
		public MM.ModemStateFailedReason get_state_failed_reason ();
		public bool get_supported_bands ([CCode (array_length_cname = "n_bands", array_length_pos = 1.1, array_length_type = "guint")] out MM.ModemBand[] bands);
		public bool get_supported_capabilities ([CCode (array_length_cname = "n_capabilities", array_length_pos = 1.1, array_length_type = "guint")] out MM.ModemCapability[] capabilities);
		public MM.BearerIpFamily get_supported_ip_families ();
		public bool get_supported_modes ([CCode (array_length_cname = "n_modes", array_length_pos = 1.1, array_length_type = "guint")] out MM.ModemModeCombination[] modes);
		public MM.ModemLock get_unlock_required ();
		public MM.UnlockRetries get_unlock_retries ();
		public async GLib.List<MM.Modem> list_bearers (GLib.Cancellable? cancellable) throws GLib.Error;
		public GLib.List<MM.Modem> list_bearers_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool peek_current_bands ([CCode (array_length_cname = "n_bands", array_length_pos = 1.1, array_length_type = "guint")] out MM.ModemBand[] bands);
		public static bool peek_pending_network_initiated_sessions (MM.ModemOma self, [CCode (array_length_cname = "n_sessions", array_length_pos = 2.1, array_length_type = "guint")] out MM.OmaPendingNetworkInitiatedSession[] sessions);
		public bool peek_ports ([CCode (array_length_cname = "n_ports", array_length_pos = 1.1, array_length_type = "guint")] out unowned MM.ModemPortInfo[] ports);
		public bool peek_supported_bands ([CCode (array_length_cname = "n_bands", array_length_pos = 1.1, array_length_type = "guint")] out MM.ModemBand[] bands);
		public bool peek_supported_capabilities ([CCode (array_length_cname = "n_capabilities", array_length_pos = 1.1, array_length_type = "guint")] out MM.ModemCapability[] capabilities);
		public bool peek_supported_modes ([CCode (array_length_cname = "n_modes", array_length_pos = 1.1, array_length_type = "guint")] out MM.ModemModeCombination[] modes);
		public unowned MM.UnlockRetries peek_unlock_retries ();
		public async bool reset (GLib.Cancellable? cancellable) throws GLib.Error;
		public bool reset_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool set_current_bands (MM.ModemBand bands, uint n_bands, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool set_current_bands_sync (MM.ModemBand bands, uint n_bands, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool set_current_capabilities (MM.ModemCapability capabilities, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool set_current_capabilities_sync (MM.ModemCapability capabilities, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool set_current_modes (MM.ModemMode modes, MM.ModemMode preferred, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool set_current_modes_sync (MM.ModemMode modes, MM.ModemMode preferred, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool set_power_state (MM.ModemPowerState state, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool set_power_state_sync (MM.ModemPowerState state, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", lower_case_csuffix = "modem_3gpp", type_id = "mm_modem_3gpp_get_type ()")]
	public class Modem3gpp : MM.GdbusModem3gppProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModem3gpp {
		[CCode (has_construct_function = false)]
		protected Modem3gpp ();
		public string dup_imei ();
		public string dup_operator_code ();
		public string dup_operator_name ();
		public string dup_path ();
		public static string facility_build_string_from_mask (MM.Modem3gppFacility mask);
		public MM.Modem3gppFacility get_enabled_facility_locks ();
		public unowned string get_imei ();
		public unowned string get_operator_code ();
		public unowned string get_operator_name ();
		public unowned string get_path ();
		public MM.Modem3gppRegistrationState get_registration_state ();
		public MM.Modem3gppSubscriptionState get_subscription_state ();
		public static unowned string network_availability_get_string (MM.Modem3gppNetworkAvailability val);
		public static void network_free (MM.Modem3gppNetwork network);
		public static MM.ModemAccessTechnology network_get_access_technology (MM.Modem3gppNetwork network);
		public static MM.Modem3gppNetworkAvailability network_get_availability (MM.Modem3gppNetwork network);
		public static unowned string network_get_operator_code (MM.Modem3gppNetwork network);
		public static unowned string network_get_operator_long (MM.Modem3gppNetwork network);
		public static unowned string network_get_operator_short (MM.Modem3gppNetwork network);
		public async bool register (string network_id, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool register_sync (string network_id, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public static unowned string registration_state_get_string (MM.Modem3gppRegistrationState val);
		public async GLib.List<MM.Modem3gppNetwork> scan (GLib.Cancellable? cancellable) throws GLib.Error;
		public GLib.List<MM.Modem3gppNetwork> scan_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public static unowned string subscription_state_get_string (MM.Modem3gppSubscriptionState val);
	}
	[CCode (cheader_filename = "libmm-glib.h", has_type_id = false)]
	[Compact]
	public class Modem3gppNetwork {
	}
	[CCode (cheader_filename = "libmm-glib.h", lower_case_csuffix = "modem_3gpp_ussd", type_id = "mm_modem_3gpp_ussd_get_type ()")]
	public class Modem3gppUssd : MM.GdbusModem3gppUssdProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModem3gppUssd {
		[CCode (has_construct_function = false)]
		protected Modem3gppUssd ();
		public async bool cancel (GLib.Cancellable? cancellable) throws GLib.Error;
		public bool cancel_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public string dup_network_notification ();
		public string dup_network_request ();
		public string dup_path ();
		public unowned string get_network_notification ();
		public unowned string get_network_request ();
		public unowned string get_path ();
		public MM.Modem3gppUssdSessionState get_state ();
		public async string initiate (string command, GLib.Cancellable? cancellable) throws GLib.Error;
		public string initiate_sync (string command, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async string respond (string response, GLib.Cancellable? cancellable) throws GLib.Error;
		public string respond_sync (string response, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public static unowned string session_state_get_string (MM.Modem3gppUssdSessionState val);
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_modem_cdma_get_type ()")]
	public class ModemCdma : MM.GdbusModemCdmaProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModemCdma {
		[CCode (has_construct_function = false)]
		protected ModemCdma ();
		public async bool activate (string carrier, GLib.Cancellable? cancellable) throws GLib.Error;
		public async bool activate_manual (MM.CdmaManualActivationProperties properties, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool activate_manual_sync (MM.CdmaManualActivationProperties properties, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool activate_sync (string carrier, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public string dup_esn ();
		public string dup_meid ();
		public string dup_path ();
		public MM.ModemCdmaActivationState get_activation_state ();
		public MM.ModemCdmaRegistrationState get_cdma1x_registration_state ();
		public unowned string get_esn ();
		public MM.ModemCdmaRegistrationState get_evdo_registration_state ();
		public unowned string get_meid ();
		public uint get_nid ();
		public unowned string get_path ();
		public uint get_sid ();
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_modem_firmware_get_type ()")]
	public class ModemFirmware : MM.GdbusModemFirmwareProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModemFirmware {
		[CCode (has_construct_function = false)]
		protected ModemFirmware ();
		public string dup_path ();
		public unowned string get_path ();
		public async bool list (GLib.Cancellable? cancellable, out MM.FirmwareProperties selected, out GLib.List<MM.FirmwareProperties> installed) throws GLib.Error;
		public bool list_sync (out MM.FirmwareProperties selected, out GLib.List<MM.FirmwareProperties> installed, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool select (string unique_id, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool select_sync (string unique_id, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_modem_location_get_type ()")]
	public class ModemLocation : MM.GdbusModemLocationProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModemLocation {
		[CCode (has_construct_function = false)]
		protected ModemLocation ();
		public string dup_path ();
		public string dup_supl_server ();
		public async MM.Location3gpp get_3gpp (GLib.Cancellable? cancellable) throws GLib.Error;
		public MM.Location3gpp get_3gpp_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public MM.ModemLocationSource get_capabilities ();
		public async MM.LocationCdmaBs get_cdma_bs (GLib.Cancellable? cancellable) throws GLib.Error;
		public MM.LocationCdmaBs get_cdma_bs_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public MM.ModemLocationSource get_enabled ();
		public async bool get_full (GLib.Cancellable? cancellable, out MM.Location3gpp location_3gpp, out MM.LocationGpsNmea location_gps_nmea, out MM.LocationGpsRaw location_gps_raw, out MM.LocationCdmaBs location_cdma_bs) throws GLib.Error;
		public bool get_full_sync (out MM.Location3gpp location_3gpp, out MM.LocationGpsNmea location_gps_nmea, out MM.LocationGpsRaw location_gps_raw, out MM.LocationCdmaBs location_cdma_bs, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async MM.LocationGpsNmea get_gps_nmea (GLib.Cancellable? cancellable) throws GLib.Error;
		public MM.LocationGpsNmea get_gps_nmea_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async MM.LocationGpsRaw get_gps_raw (GLib.Cancellable? cancellable) throws GLib.Error;
		public MM.LocationGpsRaw get_gps_raw_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public uint get_gps_refresh_rate ();
		public unowned string get_path ();
		public unowned string get_supl_server ();
		public async bool set_gps_refresh_rate (uint rate, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool set_gps_refresh_rate_sync (uint rate, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool set_supl_server (string supl, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool set_supl_server_sync (string supl, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool setup (MM.ModemLocationSource sources, bool signal_location, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool setup_sync (MM.ModemLocationSource sources, bool signal_location, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool signals_location ();
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_modem_messaging_get_type ()")]
	public class ModemMessaging : MM.GdbusModemMessagingProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModemMessaging {
		[CCode (has_construct_function = false)]
		protected ModemMessaging ();
		public async MM.Sms create (MM.SmsProperties properties, GLib.Cancellable? cancellable) throws GLib.Error;
		public MM.Sms create_sync (MM.SmsProperties properties, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool @delete (string sms, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool delete_sync (string sms, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public string dup_path ();
		public MM.SmsStorage get_default_storage ();
		public unowned string get_path ();
		public bool get_supported_storages ([CCode (array_length_cname = "n_storages", array_length_pos = 1.1, array_length_type = "guint")] out MM.SmsStorage[] storages);
		public async GLib.List<MM.Sms> list (GLib.Cancellable? cancellable) throws GLib.Error;
		public GLib.List<MM.Sms> list_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool peek_supported_storages (out MM.SmsStorage storages, out uint n_storages);
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_modem_oma_get_type ()")]
	public class ModemOma : MM.GdbusModemOmaProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModemOma {
		[CCode (has_construct_function = false)]
		protected ModemOma ();
		public async bool accept_network_initiated_session (uint session_id, bool accept, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool accept_network_initiated_session_sync (uint session_id, bool accept, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool cancel_session (GLib.Cancellable? cancellable) throws GLib.Error;
		public bool cancel_session_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public string dup_path ();
		public MM.OmaFeature get_features ();
		public unowned string get_path ();
		public MM.OmaSessionState get_session_state ();
		public MM.OmaSessionType get_session_type ();
		public async bool setup (MM.OmaFeature features, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool setup_sync (MM.OmaFeature features, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool start_client_initiated_session (MM.OmaSessionType session_type, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool start_client_initiated_session_sync (MM.OmaSessionType session_type, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_modem_signal_get_type ()")]
	public class ModemSignal : MM.GdbusModemSignalProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModemSignal {
		[CCode (has_construct_function = false)]
		protected ModemSignal ();
		public string dup_path ();
		public MM.Signal get_cdma ();
		public MM.Signal get_evdo ();
		public MM.Signal get_gsm ();
		public MM.Signal get_lte ();
		public unowned string get_path ();
		public uint get_rate ();
		public MM.Signal get_umts ();
		public unowned MM.Signal peek_cdma ();
		public unowned MM.Signal peek_evdo ();
		public unowned MM.Signal peek_gsm ();
		public unowned MM.Signal peek_lte ();
		public unowned MM.Signal peek_umts ();
		public async bool setup (uint rate, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool setup_sync (uint rate, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_modem_simple_get_type ()")]
	public class ModemSimple : MM.GdbusModemSimpleProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModemSimple {
		[CCode (has_construct_function = false)]
		protected ModemSimple ();
		public async MM.Bearer connect (MM.SimpleConnectProperties properties, GLib.Cancellable? cancellable) throws GLib.Error;
		public MM.Bearer connect_sync (MM.SimpleConnectProperties properties, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool disconnect (string? bearer, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool disconnect_sync (string? bearer, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public string dup_path ();
		public unowned string get_path ();
		public async MM.SimpleStatus get_status (GLib.Cancellable? cancellable) throws GLib.Error;
		public MM.SimpleStatus get_status_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_modem_time_get_type ()")]
	public class ModemTime : MM.GdbusModemTimeProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModemTime {
		[CCode (has_construct_function = false)]
		protected ModemTime ();
		public string dup_path ();
		public async string get_network_time (GLib.Cancellable? cancellable) throws GLib.Error;
		public string get_network_time_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public MM.NetworkTimezone get_network_timezone ();
		public unowned string get_path ();
		public unowned MM.NetworkTimezone peek_network_timezone ();
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_modem_voice_get_type ()")]
	public class ModemVoice : MM.GdbusModemVoiceProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusModemVoice {
		[CCode (has_construct_function = false)]
		protected ModemVoice ();
		public async MM.Call create_call (MM.CallProperties properties, GLib.Cancellable? cancellable) throws GLib.Error;
		public MM.Call create_call_sync (MM.CallProperties properties, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool delete_call (string call, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool delete_call_sync (string call, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public string dup_path ();
		public unowned string get_path ();
		public async GLib.List<MM.Call> list_calls (GLib.Cancellable? cancellable) throws GLib.Error;
		public GLib.List<MM.Call> list_calls_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_network_timezone_get_type ()")]
	public class NetworkTimezone : GLib.Object {
		[CCode (has_construct_function = false)]
		public NetworkTimezone ();
		[CCode (has_construct_function = false)]
		public NetworkTimezone.from_dictionary (GLib.Variant dictionary) throws GLib.Error;
		public GLib.Variant get_dictionary ();
		public int32 get_dst_offset ();
		public int32 get_leap_seconds ();
		public int32 get_offset ();
		public void set_dst_offset (int dst_offset);
		public void set_leap_seconds (int leap_seconds);
		public void set_offset (int offset);
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_object_get_type ()")]
	public class Object : MM.GdbusObjectProxy, GLib.DBusObject, MM.GdbusObject {
		[CCode (has_construct_function = false)]
		protected Object ();
		public string dup_path ();
		public MM.Modem get_modem ();
		public MM.Modem3gpp get_modem_3gpp ();
		public MM.Modem3gppUssd get_modem_3gpp_ussd ();
		public MM.ModemCdma get_modem_cdma ();
		public MM.ModemFirmware get_modem_firmware ();
		public MM.ModemLocation get_modem_location ();
		public MM.ModemMessaging get_modem_messaging ();
		public MM.ModemOma get_modem_oma ();
		public MM.ModemSignal get_modem_signal ();
		public MM.ModemSimple get_modem_simple ();
		public MM.ModemTime get_modem_time ();
		public MM.ModemVoice get_modem_voice ();
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_signal_get_type ()")]
	public class Signal : GLib.Object {
		[CCode (has_construct_function = false)]
		public Signal ();
		[CCode (has_construct_function = false)]
		public Signal.from_dictionary (GLib.Variant dictionary) throws GLib.Error;
		public GLib.Variant get_dictionary ();
		public double get_ecio ();
		public double get_io ();
		public double get_rscp ();
		public double get_rsrp ();
		public double get_rsrq ();
		public double get_rssi ();
		public double get_sinr ();
		public double get_snr ();
		public void set_ecio (double value);
		public void set_io (double value);
		public void set_rscp (double value);
		public void set_rsrp (double value);
		public void set_rsrq (double value);
		public void set_rssi (double value);
		public void set_sinr (double value);
		public void set_snr (double value);
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_sim_get_type ()")]
	public class Sim : MM.GdbusSimProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusSim {
		[CCode (has_construct_function = false)]
		protected Sim ();
		public async bool change_pin (string old_pin, string new_pin, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool change_pin_sync (string old_pin, string new_pin, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool disable_pin (string pin, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool disable_pin_sync (string pin, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public string dup_identifier ();
		public string dup_imsi ();
		public string dup_operator_identifier ();
		public string dup_operator_name ();
		public string dup_path ();
		public async bool enable_pin (string pin, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool enable_pin_sync (string pin, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public unowned string get_identifier ();
		public unowned string get_imsi ();
		public unowned string get_operator_identifier ();
		public unowned string get_operator_name ();
		public unowned string get_path ();
		public async bool send_pin (string pin, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool send_pin_sync (string pin, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool send_puk (string puk, string pin, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool send_puk_sync (string puk, string pin, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_simple_connect_properties_get_type ()")]
	public class SimpleConnectProperties : GLib.Object {
		[CCode (has_construct_function = false)]
		public SimpleConnectProperties ();
		[CCode (has_construct_function = false)]
		public SimpleConnectProperties.from_dictionary (GLib.Variant dictionary) throws GLib.Error;
		[CCode (has_construct_function = false)]
		public SimpleConnectProperties.from_string (string str) throws GLib.Error;
		public bool get_allow_roaming ();
		public MM.BearerAllowedAuth get_allowed_auth ();
		public unowned string get_apn ();
		public MM.BearerProperties get_bearer_properties ();
		public GLib.Variant get_dictionary ();
		public MM.BearerIpFamily get_ip_type ();
		public unowned string get_number ();
		public unowned string get_operator_id ();
		public unowned string get_password ();
		public unowned string get_pin ();
		public unowned string get_user ();
		public void set_allow_roaming (bool allow_roaming);
		public void set_allowed_auth (MM.BearerAllowedAuth allowed_auth);
		public void set_apn (string apn);
		public void set_ip_type (MM.BearerIpFamily ip_type);
		public void set_number (string number);
		public void set_operator_id (string operator_id);
		public void set_password (string password);
		public void set_pin (string pin);
		public void set_user (string user);
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_simple_status_get_type ()")]
	public class SimpleStatus : GLib.Object {
		[CCode (has_construct_function = false)]
		public SimpleStatus ();
		[CCode (has_construct_function = false)]
		public SimpleStatus.from_dictionary (GLib.Variant dictionary) throws GLib.Error;
		public unowned string get_3gpp_operator_code ();
		public unowned string get_3gpp_operator_name ();
		public MM.Modem3gppRegistrationState get_3gpp_registration_state ();
		public MM.Modem3gppSubscriptionState get_3gpp_subscription_state ();
		public MM.ModemAccessTechnology get_access_technologies ();
		public MM.ModemCdmaRegistrationState get_cdma_cdma1x_registration_state ();
		public MM.ModemCdmaRegistrationState get_cdma_evdo_registration_state ();
		public uint get_cdma_nid ();
		public uint get_cdma_sid ();
		public void get_current_bands (out MM.ModemBand bands, out uint n_bands);
		public GLib.Variant get_dictionary ();
		public uint32 get_signal_quality (out bool recent);
		public MM.ModemState get_state ();
		[NoAccessorMethod]
		public MM.ModemAccessTechnology access_technologies { get; set; }
		[NoAccessorMethod]
		public MM.ModemCdmaRegistrationState cdma_cdma1x_registration_state { get; set; }
		[NoAccessorMethod]
		public MM.ModemCdmaRegistrationState cdma_evdo_registration_state { get; set; }
		[NoAccessorMethod]
		public uint cdma_nid { get; set; }
		[NoAccessorMethod]
		public uint cdma_sid { get; set; }
		[NoAccessorMethod]
		public GLib.Variant current_bands { owned get; set; }
		[NoAccessorMethod]
		public string m3gpp_operator_code { owned get; set; }
		[NoAccessorMethod]
		public string m3gpp_operator_name { owned get; set; }
		[NoAccessorMethod]
		public MM.Modem3gppRegistrationState m3gpp_registration_state { get; set; }
		[NoAccessorMethod]
		public MM.Modem3gppSubscriptionState m3gpp_subscription_state { get; set; }
		[NoAccessorMethod]
		public GLib.Variant signal_quality { owned get; set; }
		[NoAccessorMethod]
		public MM.ModemState state { get; set; }
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_sms_get_type ()")]
	public class Sms : MM.GdbusSmsProxy, GLib.AsyncInitable, GLib.DBusInterface, GLib.Initable, MM.GdbusSms {
		[CCode (has_construct_function = false)]
		protected Sms ();
		public uint8 dup_data (out size_t data_len);
		public string dup_discharge_timestamp ();
		public string dup_number ();
		public string dup_path ();
		public string dup_smsc ();
		public string dup_text ();
		public string dup_timestamp ();
		public int get_class ();
		public uint8 get_data (out size_t data_len);
		public bool get_delivery_report_request ();
		public uint get_delivery_state ();
		public unowned string get_discharge_timestamp ();
		public uint get_message_reference ();
		public unowned string get_number ();
		public unowned string get_path ();
		public MM.SmsPduType get_pdu_type ();
		public MM.SmsCdmaServiceCategory get_service_category ();
		public unowned string get_smsc ();
		public MM.SmsState get_state ();
		public MM.SmsStorage get_storage ();
		public MM.SmsCdmaTeleserviceId get_teleservice_id ();
		public unowned string get_text ();
		public unowned string get_timestamp ();
		public uint get_validity_relative ();
		public MM.SmsValidityType get_validity_type ();
		public async bool send (GLib.Cancellable? cancellable) throws GLib.Error;
		public bool send_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool store (MM.SmsStorage storage, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool store_sync (MM.SmsStorage storage, GLib.Cancellable? cancellable = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_sms_properties_get_type ()")]
	public class SmsProperties : GLib.Object {
		[CCode (has_construct_function = false)]
		public SmsProperties ();
		public MM.SmsProperties dup ();
		[CCode (has_construct_function = false)]
		public SmsProperties.from_dictionary (GLib.Variant dictionary) throws GLib.Error;
		[CCode (has_construct_function = false)]
		public SmsProperties.from_string (string str) throws GLib.Error;
		public int get_class ();
		public uint8 get_data (out size_t data_len);
		public GLib.ByteArray get_data_bytearray ();
		public bool get_delivery_report_request ();
		public GLib.Variant get_dictionary ();
		public unowned string get_number ();
		public MM.SmsCdmaServiceCategory get_service_category ();
		public unowned string get_smsc ();
		public MM.SmsCdmaTeleserviceId get_teleservice_id ();
		public unowned string get_text ();
		public uint get_validity_relative ();
		public MM.SmsValidityType get_validity_type ();
		public unowned GLib.ByteArray peek_data_bytearray ();
		public void set_class (int message_class);
		public void set_data (uint8 data, size_t data_length);
		public void set_data_bytearray (GLib.ByteArray data);
		public void set_delivery_report_request (bool request);
		public void set_number (string number);
		public void set_service_category (MM.SmsCdmaServiceCategory service_category);
		public void set_smsc (string smsc);
		public void set_teleservice_id (MM.SmsCdmaTeleserviceId teleservice_id);
		public void set_text (string text);
		public void set_validity_relative (uint validity);
	}
	[CCode (cheader_filename = "libmm-glib.h", type_id = "mm_unlock_retries_get_type ()")]
	public class UnlockRetries : GLib.Object {
		[CCode (has_construct_function = false)]
		public UnlockRetries ();
		public string build_string ();
		public bool cmp (MM.UnlockRetries b);
		public void @foreach (MM.UnlockRetriesForeachCb callback);
		[CCode (has_construct_function = false)]
		public UnlockRetries.from_dictionary (GLib.Variant dictionary);
		public uint @get (MM.ModemLock @lock);
		public GLib.Variant get_dictionary ();
		public void @set (MM.ModemLock @lock, uint retries);
		public void unset (MM.ModemLock @lock);
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusBearer", type_id = "mm_gdbus_bearer_get_type ()")]
	public interface GdbusBearer : GLib.Object {
		public async bool call_connect (GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_connect_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_disconnect (GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_disconnect_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void complete_connect (owned GLib.DBusMethodInvocation invocation);
		public void complete_disconnect (owned GLib.DBusMethodInvocation invocation);
		public static unowned GLib.DBusInterfaceInfo interface_info ();
		public static uint override_properties (GLib.ObjectClass klass, uint property_id_begin);
		[NoAccessorMethod]
		public abstract bool connected { get; set; }
		[NoAccessorMethod]
		public abstract string @interface { owned get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant ip4_config { owned get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant ip6_config { owned get; set; }
		[NoAccessorMethod]
		public abstract uint ip_timeout { get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant properties { owned get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant stats { owned get; set; }
		[NoAccessorMethod]
		public abstract bool suspended { get; set; }
		public virtual signal bool handle_connect (GLib.DBusMethodInvocation invocation);
		public virtual signal bool handle_disconnect (GLib.DBusMethodInvocation invocation);
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModem", type_id = "mm_gdbus_modem_get_type ()")]
	public interface GdbusModem : GLib.Object {
		public async bool call_command (string arg_cmd, uint arg_timeout, GLib.Cancellable? cancellable, out string out_response) throws GLib.Error;
		public bool call_command_sync (string arg_cmd, uint arg_timeout, out string out_response, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_create_bearer (GLib.Variant arg_properties, GLib.Cancellable? cancellable, out string out_path) throws GLib.Error;
		public bool call_create_bearer_sync (GLib.Variant arg_properties, out string out_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_delete_bearer (string arg_bearer, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_delete_bearer_sync (string arg_bearer, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_enable (bool arg_enable, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_enable_sync (bool arg_enable, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_factory_reset (string arg_code, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_factory_reset_sync (string arg_code, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_list_bearers (GLib.Cancellable? cancellable, out string out_bearers) throws GLib.Error;
		public bool call_list_bearers_sync (out string out_bearers, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_reset (GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_reset_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_set_current_bands (GLib.Variant arg_bands, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_set_current_bands_sync (GLib.Variant arg_bands, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_set_current_capabilities (uint arg_capabilities, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_set_current_capabilities_sync (uint arg_capabilities, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_set_current_modes (GLib.Variant arg_modes, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_set_current_modes_sync (GLib.Variant arg_modes, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_set_power_state (uint arg_state, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_set_power_state_sync (uint arg_state, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void complete_command (owned GLib.DBusMethodInvocation invocation, string response);
		public void complete_create_bearer (owned GLib.DBusMethodInvocation invocation, string path);
		public void complete_delete_bearer (owned GLib.DBusMethodInvocation invocation);
		public void complete_enable (owned GLib.DBusMethodInvocation invocation);
		public void complete_factory_reset (owned GLib.DBusMethodInvocation invocation);
		public void complete_list_bearers (owned GLib.DBusMethodInvocation invocation, string bearers);
		public void complete_reset (owned GLib.DBusMethodInvocation invocation);
		public void complete_set_current_bands (owned GLib.DBusMethodInvocation invocation);
		public void complete_set_current_capabilities (owned GLib.DBusMethodInvocation invocation);
		public void complete_set_current_modes (owned GLib.DBusMethodInvocation invocation);
		public void complete_set_power_state (owned GLib.DBusMethodInvocation invocation);
		public void emit_state_changed (int arg_old, int arg_new, uint arg_reason);
		public static unowned GLib.DBusInterfaceInfo interface_info ();
		public static uint override_properties (GLib.ObjectClass klass, uint property_id_begin);
		[NoAccessorMethod]
		public abstract uint access_technologies { get; set; }
		[CCode (array_length = false, array_null_terminated = true)]
		[NoAccessorMethod]
		public abstract string[] bearers { owned get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant current_bands { owned get; set; }
		[NoAccessorMethod]
		public abstract uint current_capabilities { get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant current_modes { owned get; set; }
		[NoAccessorMethod]
		public abstract string device { owned get; set; }
		[NoAccessorMethod]
		public abstract string device_identifier { owned get; set; }
		[CCode (array_length = false, array_null_terminated = true)]
		[NoAccessorMethod]
		public abstract string[] drivers { owned get; set; }
		[NoAccessorMethod]
		public abstract string equipment_identifier { owned get; set; }
		[NoAccessorMethod]
		public abstract string manufacturer { owned get; set; }
		[NoAccessorMethod]
		public abstract uint max_active_bearers { get; set; }
		[NoAccessorMethod]
		public abstract uint max_bearers { get; set; }
		[NoAccessorMethod]
		public abstract string model { owned get; set; }
		[CCode (array_length = false, array_null_terminated = true)]
		[NoAccessorMethod]
		public abstract string[] own_numbers { owned get; set; }
		[NoAccessorMethod]
		public abstract string plugin { owned get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant ports { owned get; set; }
		[NoAccessorMethod]
		public abstract uint power_state { get; set; }
		[NoAccessorMethod]
		public abstract string primary_port { owned get; set; }
		[NoAccessorMethod]
		public abstract string revision { owned get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant signal_quality { owned get; set; }
		[NoAccessorMethod]
		public abstract string sim { owned get; set; }
		[NoAccessorMethod]
		public abstract int state { get; set; }
		[NoAccessorMethod]
		public abstract uint state_failed_reason { get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant supported_bands { owned get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant supported_capabilities { owned get; set; }
		[NoAccessorMethod]
		public abstract uint supported_ip_families { get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant supported_modes { owned get; set; }
		[NoAccessorMethod]
		public abstract uint unlock_required { get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant unlock_retries { owned get; set; }
		public virtual signal bool handle_command (GLib.DBusMethodInvocation invocation, string arg_cmd, uint arg_timeout);
		public virtual signal bool handle_create_bearer (GLib.DBusMethodInvocation invocation, GLib.Variant arg_properties);
		public virtual signal bool handle_delete_bearer (GLib.DBusMethodInvocation invocation, string arg_bearer);
		public virtual signal bool handle_enable (GLib.DBusMethodInvocation invocation, bool arg_enable);
		public virtual signal bool handle_factory_reset (GLib.DBusMethodInvocation invocation, string arg_code);
		public virtual signal bool handle_list_bearers (GLib.DBusMethodInvocation invocation);
		public virtual signal bool handle_reset (GLib.DBusMethodInvocation invocation);
		public virtual signal bool handle_set_current_bands (GLib.DBusMethodInvocation invocation, GLib.Variant arg_bands);
		public virtual signal bool handle_set_current_capabilities (GLib.DBusMethodInvocation invocation, uint arg_capabilities);
		public virtual signal bool handle_set_current_modes (GLib.DBusMethodInvocation invocation, GLib.Variant arg_modes);
		public virtual signal bool handle_set_power_state (GLib.DBusMethodInvocation invocation, uint arg_state);
		public virtual signal void state_changed (int arg_old, int arg_new, uint arg_reason);
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModem3gpp", type_id = "mm_gdbus_modem3gpp_get_type ()")]
	public interface GdbusModem3gpp : GLib.Object {
		public async bool call_register (string arg_operator_id, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_register_sync (string arg_operator_id, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_scan (GLib.Cancellable? cancellable, out GLib.Variant out_results) throws GLib.Error;
		public bool call_scan_sync (out GLib.Variant out_results, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void complete_register (owned GLib.DBusMethodInvocation invocation);
		public void complete_scan (owned GLib.DBusMethodInvocation invocation, GLib.Variant results);
		public static unowned GLib.DBusInterfaceInfo interface_info ();
		public static uint override_properties (GLib.ObjectClass klass, uint property_id_begin);
		[NoAccessorMethod]
		public abstract uint enabled_facility_locks { get; set; }
		[NoAccessorMethod]
		public abstract string imei { owned get; set; }
		[NoAccessorMethod]
		public abstract string operator_code { owned get; set; }
		[NoAccessorMethod]
		public abstract string operator_name { owned get; set; }
		[NoAccessorMethod]
		public abstract uint registration_state { get; set; }
		[NoAccessorMethod]
		public abstract uint subscription_state { get; set; }
		public virtual signal bool handle_register (GLib.DBusMethodInvocation invocation, string arg_operator_id);
		public virtual signal bool handle_scan (GLib.DBusMethodInvocation invocation);
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModem3gppUssd", type_id = "mm_gdbus_modem3gpp_ussd_get_type ()")]
	public interface GdbusModem3gppUssd : GLib.Object {
		public async bool call_cancel (GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_cancel_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_initiate (string arg_command, GLib.Cancellable? cancellable, out string out_reply) throws GLib.Error;
		public bool call_initiate_sync (string arg_command, out string out_reply, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_respond (string arg_response, GLib.Cancellable? cancellable, out string out_reply) throws GLib.Error;
		public bool call_respond_sync (string arg_response, out string out_reply, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void complete_cancel (owned GLib.DBusMethodInvocation invocation);
		public void complete_initiate (owned GLib.DBusMethodInvocation invocation, string reply);
		public void complete_respond (owned GLib.DBusMethodInvocation invocation, string reply);
		public static unowned GLib.DBusInterfaceInfo interface_info ();
		public static uint override_properties (GLib.ObjectClass klass, uint property_id_begin);
		[NoAccessorMethod]
		public abstract string network_notification { owned get; set; }
		[NoAccessorMethod]
		public abstract string network_request { owned get; set; }
		[NoAccessorMethod]
		public abstract uint state { get; set; }
		public virtual signal bool handle_cancel (GLib.DBusMethodInvocation invocation);
		public virtual signal bool handle_initiate (GLib.DBusMethodInvocation invocation, string arg_command);
		public virtual signal bool handle_respond (GLib.DBusMethodInvocation invocation, string arg_response);
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemCdma", type_id = "mm_gdbus_modem_cdma_get_type ()")]
	public interface GdbusModemCdma : GLib.Object {
		public async bool call_activate (string arg_carrier_code, GLib.Cancellable? cancellable) throws GLib.Error;
		public async bool call_activate_manual (GLib.Variant arg_properties, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_activate_manual_sync (GLib.Variant arg_properties, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool call_activate_sync (string arg_carrier_code, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void complete_activate (owned GLib.DBusMethodInvocation invocation);
		public void complete_activate_manual (owned GLib.DBusMethodInvocation invocation);
		public void emit_activation_state_changed (uint arg_activation_state, uint arg_activation_error, GLib.Variant arg_status_changes);
		public static unowned GLib.DBusInterfaceInfo interface_info ();
		public static uint override_properties (GLib.ObjectClass klass, uint property_id_begin);
		[NoAccessorMethod]
		public abstract uint activation_state { get; set; }
		[NoAccessorMethod]
		public abstract uint cdma1x_registration_state { get; set; }
		[NoAccessorMethod]
		public abstract string esn { owned get; set; }
		[NoAccessorMethod]
		public abstract uint evdo_registration_state { get; set; }
		[NoAccessorMethod]
		public abstract string meid { owned get; set; }
		[NoAccessorMethod]
		public abstract uint nid { get; set; }
		[NoAccessorMethod]
		public abstract uint sid { get; set; }
		public virtual signal void activation_state_changed (uint arg_activation_state, uint arg_activation_error, GLib.Variant arg_status_changes);
		public virtual signal bool handle_activate (GLib.DBusMethodInvocation invocation, string arg_carrier_code);
		public virtual signal bool handle_activate_manual (GLib.DBusMethodInvocation invocation, GLib.Variant arg_properties);
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemFirmware", type_id = "mm_gdbus_modem_firmware_get_type ()")]
	public interface GdbusModemFirmware : GLib.Object {
		public async bool call_list (GLib.Cancellable? cancellable, out string out_selected, out GLib.Variant out_installed) throws GLib.Error;
		public bool call_list_sync (out string out_selected, out GLib.Variant out_installed, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_select (string arg_uniqueid, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_select_sync (string arg_uniqueid, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void complete_list (owned GLib.DBusMethodInvocation invocation, string selected, GLib.Variant installed);
		public void complete_select (owned GLib.DBusMethodInvocation invocation);
		public static unowned GLib.DBusInterfaceInfo interface_info ();
		public static uint override_properties (GLib.ObjectClass klass, uint property_id_begin);
		public virtual signal bool handle_list (GLib.DBusMethodInvocation invocation);
		public virtual signal bool handle_select (GLib.DBusMethodInvocation invocation, string arg_uniqueid);
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemLocation", type_id = "mm_gdbus_modem_location_get_type ()")]
	public interface GdbusModemLocation : GLib.Object {
		public async bool call_get_location (GLib.Cancellable? cancellable, out GLib.Variant out_Location) throws GLib.Error;
		public bool call_get_location_sync (out GLib.Variant out_Location, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_set_gps_refresh_rate (uint arg_rate, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_set_gps_refresh_rate_sync (uint arg_rate, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_set_supl_server (string arg_supl, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_set_supl_server_sync (string arg_supl, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_setup (uint arg_sources, bool arg_signal_location, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_setup_sync (uint arg_sources, bool arg_signal_location, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void complete_get_location (owned GLib.DBusMethodInvocation invocation, GLib.Variant Location);
		public void complete_set_gps_refresh_rate (owned GLib.DBusMethodInvocation invocation);
		public void complete_set_supl_server (owned GLib.DBusMethodInvocation invocation);
		public void complete_setup (owned GLib.DBusMethodInvocation invocation);
		public static unowned GLib.DBusInterfaceInfo interface_info ();
		public static uint override_properties (GLib.ObjectClass klass, uint property_id_begin);
		[NoAccessorMethod]
		public abstract uint capabilities { get; set; }
		[NoAccessorMethod]
		public abstract uint enabled { get; set; }
		[NoAccessorMethod]
		public abstract uint gps_refresh_rate { get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant location { owned get; set; }
		[NoAccessorMethod]
		public abstract bool signals_location { get; set; }
		[NoAccessorMethod]
		public abstract string supl_server { owned get; set; }
		public virtual signal bool handle_get_location (GLib.DBusMethodInvocation invocation);
		public virtual signal bool handle_set_gps_refresh_rate (GLib.DBusMethodInvocation invocation, uint arg_rate);
		public virtual signal bool handle_set_supl_server (GLib.DBusMethodInvocation invocation, string arg_supl);
		public virtual signal bool handle_setup (GLib.DBusMethodInvocation invocation, uint arg_sources, bool arg_signal_location);
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemMessaging", type_id = "mm_gdbus_modem_messaging_get_type ()")]
	public interface GdbusModemMessaging : GLib.Object {
		public async bool call_create (GLib.Variant arg_properties, GLib.Cancellable? cancellable, out string out_path) throws GLib.Error;
		public bool call_create_sync (GLib.Variant arg_properties, out string out_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_delete (string arg_path, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_delete_sync (string arg_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_list (GLib.Cancellable? cancellable, out string out_result) throws GLib.Error;
		public bool call_list_sync (out string out_result, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void complete_create (owned GLib.DBusMethodInvocation invocation, string path);
		public void complete_delete (owned GLib.DBusMethodInvocation invocation);
		public void complete_list (owned GLib.DBusMethodInvocation invocation, string result);
		public void emit_added (string arg_path, bool arg_received);
		public void emit_deleted (string arg_path);
		public static unowned GLib.DBusInterfaceInfo interface_info ();
		public static uint override_properties (GLib.ObjectClass klass, uint property_id_begin);
		[NoAccessorMethod]
		public abstract uint default_storage { get; set; }
		[CCode (array_length = false, array_null_terminated = true)]
		[NoAccessorMethod]
		public abstract string[] messages { owned get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant supported_storages { owned get; set; }
		public virtual signal void added (string arg_path, bool arg_received);
		public virtual signal void deleted (string arg_path);
		public virtual signal bool handle_create (GLib.DBusMethodInvocation invocation, GLib.Variant arg_properties);
		public virtual signal bool handle_delete (GLib.DBusMethodInvocation invocation, string arg_path);
		public virtual signal bool handle_list (GLib.DBusMethodInvocation invocation);
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemOma", type_id = "mm_gdbus_modem_oma_get_type ()")]
	public interface GdbusModemOma : GLib.Object {
		public async bool call_accept_network_initiated_session (uint arg_session_id, bool arg_accept, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_accept_network_initiated_session_sync (uint arg_session_id, bool arg_accept, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_cancel_session (GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_cancel_session_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_setup (uint arg_features, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_setup_sync (uint arg_features, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_start_client_initiated_session (uint arg_session_type, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_start_client_initiated_session_sync (uint arg_session_type, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void complete_accept_network_initiated_session (owned GLib.DBusMethodInvocation invocation);
		public void complete_cancel_session (owned GLib.DBusMethodInvocation invocation);
		public void complete_setup (owned GLib.DBusMethodInvocation invocation);
		public void complete_start_client_initiated_session (owned GLib.DBusMethodInvocation invocation);
		public void emit_session_state_changed (int arg_old_session_state, int arg_new_session_state, uint arg_session_state_failed_reason);
		public static unowned GLib.DBusInterfaceInfo interface_info ();
		public static uint override_properties (GLib.ObjectClass klass, uint property_id_begin);
		[NoAccessorMethod]
		public abstract uint features { get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant pending_network_initiated_sessions { owned get; set; }
		[NoAccessorMethod]
		public abstract int session_state { get; set; }
		[NoAccessorMethod]
		public abstract uint session_type { get; set; }
		public virtual signal bool handle_accept_network_initiated_session (GLib.DBusMethodInvocation invocation, uint arg_session_id, bool arg_accept);
		public virtual signal bool handle_cancel_session (GLib.DBusMethodInvocation invocation);
		public virtual signal bool handle_setup (GLib.DBusMethodInvocation invocation, uint arg_features);
		public virtual signal bool handle_start_client_initiated_session (GLib.DBusMethodInvocation invocation, uint arg_session_type);
		public virtual signal void session_state_changed (int arg_old_session_state, int arg_new_session_state, uint arg_session_state_failed_reason);
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemSignal", type_id = "mm_gdbus_modem_signal_get_type ()")]
	public interface GdbusModemSignal : GLib.Object {
		public async bool call_setup (uint arg_rate, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_setup_sync (uint arg_rate, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void complete_setup (owned GLib.DBusMethodInvocation invocation);
		public static unowned GLib.DBusInterfaceInfo interface_info ();
		public static uint override_properties (GLib.ObjectClass klass, uint property_id_begin);
		[NoAccessorMethod]
		public abstract GLib.Variant cdma { owned get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant evdo { owned get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant gsm { owned get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant lte { owned get; set; }
		[NoAccessorMethod]
		public abstract uint rate { get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant umts { owned get; set; }
		public virtual signal bool handle_setup (GLib.DBusMethodInvocation invocation, uint arg_rate);
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemSimple", type_id = "mm_gdbus_modem_simple_get_type ()")]
	public interface GdbusModemSimple : GLib.Object {
		public async bool call_connect (GLib.Variant arg_properties, GLib.Cancellable? cancellable, out string out_bearer) throws GLib.Error;
		public bool call_connect_sync (GLib.Variant arg_properties, out string out_bearer, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_disconnect (string arg_bearer, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_disconnect_sync (string arg_bearer, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_get_status (GLib.Cancellable? cancellable, out GLib.Variant out_properties) throws GLib.Error;
		public bool call_get_status_sync (out GLib.Variant out_properties, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void complete_connect (owned GLib.DBusMethodInvocation invocation, string bearer);
		public void complete_disconnect (owned GLib.DBusMethodInvocation invocation);
		public void complete_get_status (owned GLib.DBusMethodInvocation invocation, GLib.Variant properties);
		public static unowned GLib.DBusInterfaceInfo interface_info ();
		public static uint override_properties (GLib.ObjectClass klass, uint property_id_begin);
		public virtual signal bool handle_connect (GLib.DBusMethodInvocation invocation, GLib.Variant arg_properties);
		public virtual signal bool handle_disconnect (GLib.DBusMethodInvocation invocation, string arg_bearer);
		public virtual signal bool handle_get_status (GLib.DBusMethodInvocation invocation);
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemTime", type_id = "mm_gdbus_modem_time_get_type ()")]
	public interface GdbusModemTime : GLib.Object {
		public async bool call_get_network_time (GLib.Cancellable? cancellable, out string out_time) throws GLib.Error;
		public bool call_get_network_time_sync (out string out_time, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void complete_get_network_time (owned GLib.DBusMethodInvocation invocation, string time);
		public void emit_network_time_changed (string arg_time);
		public static unowned GLib.DBusInterfaceInfo interface_info ();
		public static uint override_properties (GLib.ObjectClass klass, uint property_id_begin);
		[NoAccessorMethod]
		public abstract GLib.Variant network_timezone { owned get; set; }
		public virtual signal bool handle_get_network_time (GLib.DBusMethodInvocation invocation);
		public virtual signal void network_time_changed (string arg_time);
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusModemVoice", type_id = "mm_gdbus_modem_voice_get_type ()")]
	public interface GdbusModemVoice : GLib.Object {
		public async bool call_create_call (GLib.Variant arg_properties, GLib.Cancellable? cancellable, out string out_path) throws GLib.Error;
		public bool call_create_call_sync (GLib.Variant arg_properties, out string out_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_delete_call (string arg_path, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_delete_call_sync (string arg_path, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_list_calls (GLib.Cancellable? cancellable, out string out_result) throws GLib.Error;
		public bool call_list_calls_sync (out string out_result, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void complete_create_call (owned GLib.DBusMethodInvocation invocation, string path);
		public void complete_delete_call (owned GLib.DBusMethodInvocation invocation);
		public void complete_list_calls (owned GLib.DBusMethodInvocation invocation, string result);
		public void emit_call_added (string arg_path);
		public void emit_call_deleted (string arg_path);
		public static unowned GLib.DBusInterfaceInfo interface_info ();
		public static uint override_properties (GLib.ObjectClass klass, uint property_id_begin);
		[CCode (array_length = false, array_null_terminated = true)]
		[NoAccessorMethod]
		public abstract string[] calls { owned get; set; }
		public virtual signal void call_added (string arg_path);
		public virtual signal void call_deleted (string arg_path);
		public virtual signal bool handle_create_call (GLib.DBusMethodInvocation invocation, GLib.Variant arg_properties);
		public virtual signal bool handle_delete_call (GLib.DBusMethodInvocation invocation, string arg_path);
		public virtual signal bool handle_list_calls (GLib.DBusMethodInvocation invocation);
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusObject", type_id = "mm_gdbus_object_get_type ()")]
	public interface GdbusObject : GLib.DBusObject, GLib.Object {
		public MM.GdbusModem get_modem ();
		public MM.GdbusModem3gpp get_modem3gpp ();
		public MM.GdbusModem3gppUssd get_modem3gpp_ussd ();
		public MM.GdbusModemCdma get_modem_cdma ();
		public MM.GdbusModemFirmware get_modem_firmware ();
		public MM.GdbusModemLocation get_modem_location ();
		public MM.GdbusModemMessaging get_modem_messaging ();
		public MM.GdbusModemOma get_modem_oma ();
		public MM.GdbusModemSignal get_modem_signal ();
		public MM.GdbusModemSimple get_modem_simple ();
		public MM.GdbusModemTime get_modem_time ();
		public MM.GdbusModemVoice get_modem_voice ();
		[NoAccessorMethod]
		public abstract MM.GdbusModem modem { owned get; set; }
		[NoAccessorMethod]
		public abstract MM.GdbusModem3gpp modem3gpp { owned get; set; }
		[NoAccessorMethod]
		public abstract MM.GdbusModem3gppUssd modem3gpp_ussd { owned get; set; }
		[NoAccessorMethod]
		public abstract MM.GdbusModemCdma modem_cdma { owned get; set; }
		[NoAccessorMethod]
		public abstract MM.GdbusModemFirmware modem_firmware { owned get; set; }
		[NoAccessorMethod]
		public abstract MM.GdbusModemLocation modem_location { owned get; set; }
		[NoAccessorMethod]
		public abstract MM.GdbusModemMessaging modem_messaging { owned get; set; }
		[NoAccessorMethod]
		public abstract MM.GdbusModemOma modem_oma { owned get; set; }
		[NoAccessorMethod]
		public abstract MM.GdbusModemSignal modem_signal { owned get; set; }
		[NoAccessorMethod]
		public abstract MM.GdbusModemSimple modem_simple { owned get; set; }
		[NoAccessorMethod]
		public abstract MM.GdbusModemTime modem_time { owned get; set; }
		[NoAccessorMethod]
		public abstract MM.GdbusModemVoice modem_voice { owned get; set; }
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusOrgFreedesktopModemManager1", type_id = "mm_gdbus_org_freedesktop_modem_manager1_get_type ()")]
	public interface GdbusOrgFreedesktopModemManager1 : GLib.Object {
		public async bool call_report_kernel_event (GLib.Variant arg_properties, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_report_kernel_event_sync (GLib.Variant arg_properties, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_scan_devices (GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_scan_devices_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_set_logging (string arg_level, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_set_logging_sync (string arg_level, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void complete_report_kernel_event (owned GLib.DBusMethodInvocation invocation);
		public void complete_scan_devices (owned GLib.DBusMethodInvocation invocation);
		public void complete_set_logging (owned GLib.DBusMethodInvocation invocation);
		public static unowned GLib.DBusInterfaceInfo interface_info ();
		public static uint override_properties (GLib.ObjectClass klass, uint property_id_begin);
		public virtual signal bool handle_report_kernel_event (GLib.DBusMethodInvocation invocation, GLib.Variant arg_properties);
		public virtual signal bool handle_scan_devices (GLib.DBusMethodInvocation invocation);
		public virtual signal bool handle_set_logging (GLib.DBusMethodInvocation invocation, string arg_level);
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusSim", type_id = "mm_gdbus_sim_get_type ()")]
	public interface GdbusSim : GLib.Object {
		public async bool call_change_pin (string arg_old_pin, string arg_new_pin, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_change_pin_sync (string arg_old_pin, string arg_new_pin, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_enable_pin (string arg_pin, bool arg_enabled, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_enable_pin_sync (string arg_pin, bool arg_enabled, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_send_pin (string arg_pin, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_send_pin_sync (string arg_pin, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_send_puk (string arg_puk, string arg_pin, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_send_puk_sync (string arg_puk, string arg_pin, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void complete_change_pin (owned GLib.DBusMethodInvocation invocation);
		public void complete_enable_pin (owned GLib.DBusMethodInvocation invocation);
		public void complete_send_pin (owned GLib.DBusMethodInvocation invocation);
		public void complete_send_puk (owned GLib.DBusMethodInvocation invocation);
		public static unowned GLib.DBusInterfaceInfo interface_info ();
		public static uint override_properties (GLib.ObjectClass klass, uint property_id_begin);
		[NoAccessorMethod]
		public abstract string imsi { owned get; set; }
		[NoAccessorMethod]
		public abstract string operator_identifier { owned get; set; }
		[NoAccessorMethod]
		public abstract string operator_name { owned get; set; }
		[NoAccessorMethod]
		public abstract string sim_identifier { owned get; set; }
		public virtual signal bool handle_change_pin (GLib.DBusMethodInvocation invocation, string arg_old_pin, string arg_new_pin);
		public virtual signal bool handle_enable_pin (GLib.DBusMethodInvocation invocation, string arg_pin, bool arg_enabled);
		public virtual signal bool handle_send_pin (GLib.DBusMethodInvocation invocation, string arg_pin);
		public virtual signal bool handle_send_puk (GLib.DBusMethodInvocation invocation, string arg_puk, string arg_pin);
	}
	[CCode (cheader_filename = "libmm-glib.h", cname = "MmGdbusSms", type_id = "mm_gdbus_sms_get_type ()")]
	public interface GdbusSms : GLib.Object {
		public async bool call_send (GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_send_sync (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool call_store (uint arg_storage, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool call_store_sync (uint arg_storage, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void complete_send (owned GLib.DBusMethodInvocation invocation);
		public void complete_store (owned GLib.DBusMethodInvocation invocation);
		public static unowned GLib.DBusInterfaceInfo interface_info ();
		public static uint override_properties (GLib.ObjectClass klass, uint property_id_begin);
		[NoAccessorMethod]
		public abstract int @class { get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant data { owned get; set; }
		[NoAccessorMethod]
		public abstract bool delivery_report_request { get; set; }
		[NoAccessorMethod]
		public abstract uint delivery_state { get; set; }
		[NoAccessorMethod]
		public abstract string discharge_timestamp { owned get; set; }
		[NoAccessorMethod]
		public abstract uint message_reference { get; set; }
		[NoAccessorMethod]
		public abstract string number { owned get; set; }
		[NoAccessorMethod]
		public abstract uint pdu_type { get; set; }
		[NoAccessorMethod]
		public abstract uint service_category { get; set; }
		[NoAccessorMethod]
		public abstract string smsc { owned get; set; }
		[NoAccessorMethod]
		public abstract uint state { get; set; }
		[NoAccessorMethod]
		public abstract uint storage { get; set; }
		[NoAccessorMethod]
		public abstract uint teleservice_id { get; set; }
		[NoAccessorMethod]
		public abstract string text { owned get; set; }
		[NoAccessorMethod]
		public abstract string timestamp { owned get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant validity { owned get; set; }
		public virtual signal bool handle_send (GLib.DBusMethodInvocation invocation);
		public virtual signal bool handle_store (GLib.DBusMethodInvocation invocation, uint arg_storage);
	}
	[CCode (cheader_filename = "libmm-glib.h", has_type_id = false)]
	public struct ModemModeCombination {
		public MM.ModemMode allowed;
		public MM.ModemMode preferred;
	}
	[CCode (cheader_filename = "libmm-glib.h", has_type_id = false)]
	public struct ModemPortInfo {
		public weak string name;
		public MM.ModemPortType type;
		public void array_free (uint array_size);
	}
	[CCode (cheader_filename = "libmm-glib.h", has_type_id = false)]
	public struct OmaPendingNetworkInitiatedSession {
		public MM.OmaSessionType session_type;
		public uint session_id;
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_BEARER_ALLOWED_AUTH_", type_id = "mm_bearer_allowed_auth_get_type ()")]
	[Flags]
	public enum BearerAllowedAuth {
		UNKNOWN,
		NONE,
		PAP,
		CHAP,
		MSCHAP,
		MSCHAPV2,
		EAP;
		public static string build_string_from_mask (MM.BearerAllowedAuth mask);
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_BEARER_IP_FAMILY_", type_id = "mm_bearer_ip_family_get_type ()")]
	[Flags]
	public enum BearerIpFamily {
		NONE,
		IPV4,
		IPV6,
		IPV4V6,
		ANY;
		public static string build_string_from_mask (MM.BearerIpFamily mask);
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_BEARER_IP_METHOD_", type_id = "mm_bearer_ip_method_get_type ()")]
	public enum BearerIpMethod {
		UNKNOWN,
		PPP,
		STATIC,
		DHCP;
		public static unowned string get_string (MM.BearerIpMethod val);
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_CALL_DIRECTION_", type_id = "mm_call_direction_get_type ()")]
	public enum CallDirection {
		UNKNOWN,
		INCOMING,
		OUTGOING;
		public static unowned string get_string (MM.CallDirection val);
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_CALL_STATE_", type_id = "mm_call_state_get_type ()")]
	public enum CallState {
		UNKNOWN,
		DIALING,
		RINGING_OUT,
		RINGING_IN,
		ACTIVE,
		HELD,
		WAITING,
		TERMINATED;
		public static unowned string get_string (MM.CallState val);
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_CALL_STATE_REASON_", type_id = "mm_call_state_reason_get_type ()")]
	public enum CallStateReason {
		UNKNOWN,
		OUTGOING_STARTED,
		INCOMING_NEW,
		ACCEPTED,
		TERMINATED,
		REFUSED_OR_BUSY,
		ERROR;
		public static unowned string get_string (MM.CallStateReason val);
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_FIRMWARE_IMAGE_TYPE_", type_id = "mm_firmware_image_type_get_type ()")]
	public enum FirmwareImageType {
		UNKNOWN,
		GENERIC,
		GOBI;
		public static unowned string get_string (MM.FirmwareImageType val);
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_3GPP_FACILITY_", type_id = "mm_modem_3gpp_facility_get_type ()")]
	[Flags]
	public enum Modem3gppFacility {
		NONE,
		SIM,
		FIXED_DIALING,
		PH_SIM,
		PH_FSIM,
		NET_PERS,
		NET_SUB_PERS,
		PROVIDER_PERS,
		CORP_PERS
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_3GPP_NETWORK_AVAILABILITY_", type_id = "mm_modem_3gpp_network_availability_get_type ()")]
	public enum Modem3gppNetworkAvailability {
		UNKNOWN,
		AVAILABLE,
		CURRENT,
		FORBIDDEN
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_3GPP_REGISTRATION_STATE_", type_id = "mm_modem_3gpp_registration_state_get_type ()")]
	public enum Modem3gppRegistrationState {
		IDLE,
		HOME,
		SEARCHING,
		DENIED,
		UNKNOWN,
		ROAMING,
		HOME_SMS_ONLY,
		ROAMING_SMS_ONLY,
		EMERGENCY_ONLY,
		HOME_CSFB_NOT_PREFERRED,
		ROAMING_CSFB_NOT_PREFERRED
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_3GPP_SUBSCRIPTION_STATE_", type_id = "mm_modem_3gpp_subscription_state_get_type ()")]
	public enum Modem3gppSubscriptionState {
		UNKNOWN,
		UNPROVISIONED,
		PROVISIONED,
		OUT_OF_DATA
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_3GPP_USSD_SESSION_STATE_", type_id = "mm_modem_3gpp_ussd_session_state_get_type ()")]
	public enum Modem3gppUssdSessionState {
		UNKNOWN,
		IDLE,
		ACTIVE,
		USER_RESPONSE
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_ACCESS_TECHNOLOGY_", type_id = "mm_modem_access_technology_get_type ()")]
	[Flags]
	public enum ModemAccessTechnology {
		UNKNOWN,
		POTS,
		GSM,
		GSM_COMPACT,
		GPRS,
		EDGE,
		UMTS,
		HSDPA,
		HSUPA,
		HSPA,
		HSPA_PLUS,
		@1XRTT,
		EVDO0,
		EVDOA,
		EVDOB,
		LTE,
		ANY;
		public static string build_string_from_mask (MM.ModemAccessTechnology mask);
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_BAND_", type_id = "mm_modem_band_get_type ()")]
	public enum ModemBand {
		UNKNOWN,
		EGSM,
		DCS,
		PCS,
		G850,
		U2100,
		U1800,
		U17IV,
		U800,
		U850,
		U900,
		U17IX,
		U1900,
		U2600,
		EUTRAN_1,
		EUTRAN_2,
		EUTRAN_3,
		EUTRAN_4,
		EUTRAN_5,
		EUTRAN_6,
		EUTRAN_7,
		EUTRAN_8,
		EUTRAN_9,
		EUTRAN_10,
		EUTRAN_11,
		EUTRAN_12,
		EUTRAN_13,
		EUTRAN_14,
		EUTRAN_17,
		EUTRAN_18,
		EUTRAN_19,
		EUTRAN_20,
		EUTRAN_21,
		EUTRAN_22,
		EUTRAN_23,
		EUTRAN_24,
		EUTRAN_25,
		EUTRAN_26,
		EUTRAN_33,
		EUTRAN_34,
		EUTRAN_35,
		EUTRAN_36,
		EUTRAN_37,
		EUTRAN_38,
		EUTRAN_39,
		EUTRAN_40,
		EUTRAN_41,
		EUTRAN_42,
		EUTRAN_43,
		EUTRAN_44,
		CDMA_BC0_CELLULAR_800,
		CDMA_BC1_PCS_1900,
		CDMA_BC2_TACS,
		CDMA_BC3_JTACS,
		CDMA_BC4_KOREAN_PCS,
		CDMA_BC5_NMT450,
		CDMA_BC6_IMT2000,
		CDMA_BC7_CELLULAR_700,
		CDMA_BC8_1800,
		CDMA_BC9_900,
		CDMA_BC10_SECONDARY_800,
		CDMA_BC11_PAMR_400,
		CDMA_BC12_PAMR_800,
		CDMA_BC13_IMT2000_2500,
		CDMA_BC14_PCS2_1900,
		CDMA_BC15_AWS,
		CDMA_BC16_US_2500,
		CDMA_BC17_US_FLO_2500,
		CDMA_BC18_US_PS_700,
		CDMA_BC19_US_LOWER_700,
		ANY;
		public static unowned string get_string (MM.ModemBand val);
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_CAPABILITY_", type_id = "mm_modem_capability_get_type ()")]
	[Flags]
	public enum ModemCapability {
		NONE,
		POTS,
		CDMA_EVDO,
		GSM_UMTS,
		LTE,
		LTE_ADVANCED,
		IRIDIUM,
		ANY;
		public static string build_string_from_mask (MM.ModemCapability mask);
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_CDMA_ACTIVATION_STATE_", type_id = "mm_modem_cdma_activation_state_get_type ()")]
	public enum ModemCdmaActivationState {
		UNKNOWN,
		NOT_ACTIVATED,
		ACTIVATING,
		PARTIALLY_ACTIVATED,
		ACTIVATED;
		public static unowned string get_string (MM.ModemCdmaActivationState val);
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_CDMA_REGISTRATION_STATE_", type_id = "mm_modem_cdma_registration_state_get_type ()")]
	public enum ModemCdmaRegistrationState {
		UNKNOWN,
		REGISTERED,
		HOME,
		ROAMING;
		public static unowned string get_string (MM.ModemCdmaRegistrationState val);
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_CDMA_RM_PROTOCOL_", type_id = "mm_modem_cdma_rm_protocol_get_type ()")]
	public enum ModemCdmaRmProtocol {
		UNKNOWN,
		ASYNC,
		PACKET_RELAY,
		PACKET_NETWORK_PPP,
		PACKET_NETWORK_SLIP,
		STU_III;
		public static unowned string get_string (MM.ModemCdmaRmProtocol val);
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_CONTACTS_STORAGE_", type_id = "mm_modem_contacts_storage_get_type ()")]
	public enum ModemContactsStorage {
		UNKNOWN,
		ME,
		SM,
		MT;
		public static unowned string get_string (MM.ModemContactsStorage val);
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_LOCATION_SOURCE_", type_id = "mm_modem_location_source_get_type ()")]
	[Flags]
	public enum ModemLocationSource {
		NONE,
		@3GPP_LAC_CI,
		GPS_RAW,
		GPS_NMEA,
		CDMA_BS,
		GPS_UNMANAGED,
		AGPS;
		public static string build_string_from_mask (MM.ModemLocationSource mask);
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_LOCK_", type_id = "mm_modem_lock_get_type ()")]
	public enum ModemLock {
		UNKNOWN,
		NONE,
		SIM_PIN,
		SIM_PIN2,
		SIM_PUK,
		SIM_PUK2,
		PH_SP_PIN,
		PH_SP_PUK,
		PH_NET_PIN,
		PH_NET_PUK,
		PH_SIM_PIN,
		PH_CORP_PIN,
		PH_CORP_PUK,
		PH_FSIM_PIN,
		PH_FSIM_PUK,
		PH_NETSUB_PIN,
		PH_NETSUB_PUK;
		public static unowned string get_string (MM.ModemLock val);
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_MODE_", type_id = "mm_modem_mode_get_type ()")]
	[Flags]
	public enum ModemMode {
		NONE,
		CS,
		@2G,
		@3G,
		@4G,
		ANY;
		public static string build_string_from_mask (MM.ModemMode mask);
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_PORT_TYPE_", type_id = "mm_modem_port_type_get_type ()")]
	public enum ModemPortType {
		UNKNOWN,
		NET,
		AT,
		QCDM,
		GPS,
		QMI,
		MBIM;
		public static unowned string get_string (MM.ModemPortType val);
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_POWER_STATE_", type_id = "mm_modem_power_state_get_type ()")]
	public enum ModemPowerState {
		UNKNOWN,
		OFF,
		LOW,
		ON;
		public static unowned string get_string (MM.ModemPowerState val);
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_STATE_", type_id = "mm_modem_state_get_type ()")]
	public enum ModemState {
		FAILED,
		UNKNOWN,
		INITIALIZING,
		LOCKED,
		DISABLED,
		DISABLING,
		ENABLING,
		ENABLED,
		SEARCHING,
		REGISTERED,
		DISCONNECTING,
		CONNECTING,
		CONNECTED;
		public static unowned string get_string (MM.ModemState val);
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_STATE_CHANGE_REASON_", type_id = "mm_modem_state_change_reason_get_type ()")]
	public enum ModemStateChangeReason {
		UNKNOWN,
		USER_REQUESTED,
		SUSPEND,
		FAILURE;
		public static unowned string get_string (MM.ModemStateChangeReason val);
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MODEM_STATE_FAILED_REASON_", type_id = "mm_modem_state_failed_reason_get_type ()")]
	public enum ModemStateFailedReason {
		NONE,
		UNKNOWN,
		SIM_MISSING,
		SIM_ERROR;
		public static unowned string get_string (MM.ModemStateFailedReason val);
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_OMA_FEATURE_", type_id = "mm_oma_feature_get_type ()")]
	[Flags]
	public enum OmaFeature {
		NONE,
		DEVICE_PROVISIONING,
		PRL_UPDATE,
		HANDS_FREE_ACTIVATION;
		public static string build_string_from_mask (MM.OmaFeature mask);
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_OMA_SESSION_STATE_", type_id = "mm_oma_session_state_get_type ()")]
	public enum OmaSessionState {
		FAILED,
		UNKNOWN,
		STARTED,
		RETRYING,
		CONNECTING,
		CONNECTED,
		AUTHENTICATED,
		MDN_DOWNLOADED,
		MSID_DOWNLOADED,
		PRL_DOWNLOADED,
		MIP_PROFILE_DOWNLOADED,
		COMPLETED;
		public static unowned string get_string (MM.OmaSessionState val);
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_OMA_SESSION_STATE_FAILED_REASON_", type_id = "mm_oma_session_state_failed_reason_get_type ()")]
	public enum OmaSessionStateFailedReason {
		UNKNOWN,
		NETWORK_UNAVAILABLE,
		SERVER_UNAVAILABLE,
		AUTHENTICATION_FAILED,
		MAX_RETRY_EXCEEDED,
		SESSION_CANCELLED;
		public static unowned string get_string (MM.OmaSessionStateFailedReason val);
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_OMA_SESSION_TYPE_", type_id = "mm_oma_session_type_get_type ()")]
	public enum OmaSessionType {
		UNKNOWN,
		CLIENT_INITIATED_DEVICE_CONFIGURE,
		CLIENT_INITIATED_PRL_UPDATE,
		CLIENT_INITIATED_HANDS_FREE_ACTIVATION,
		NETWORK_INITIATED_DEVICE_CONFIGURE,
		NETWORK_INITIATED_PRL_UPDATE,
		DEVICE_INITIATED_PRL_UPDATE,
		DEVICE_INITIATED_HANDS_FREE_ACTIVATION;
		public static unowned string get_string (MM.OmaSessionType val);
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_SMS_CDMA_SERVICE_CATEGORY_", type_id = "mm_sms_cdma_service_category_get_type ()")]
	public enum SmsCdmaServiceCategory {
		UNKNOWN,
		EMERGENCY_BROADCAST,
		ADMINISTRATIVE,
		MAINTENANCE,
		GENERAL_NEWS_LOCAL,
		GENERAL_NEWS_REGIONAL,
		GENERAL_NEWS_NATIONAL,
		GENERAL_NEWS_INTERNATIONAL,
		BUSINESS_NEWS_LOCAL,
		BUSINESS_NEWS_REGIONAL,
		BUSINESS_NEWS_NATIONAL,
		BUSINESS_NEWS_INTERNATIONAL,
		SPORTS_NEWS_LOCAL,
		SPORTS_NEWS_REGIONAL,
		SPORTS_NEWS_NATIONAL,
		SPORTS_NEWS_INTERNATIONAL,
		ENTERTAINMENT_NEWS_LOCAL,
		ENTERTAINMENT_NEWS_REGIONAL,
		ENTERTAINMENT_NEWS_NATIONAL,
		ENTERTAINMENT_NEWS_INTERNATIONAL,
		LOCAL_WEATHER,
		TRAFFIC_REPORT,
		FLIGHT_SCHEDULES,
		RESTAURANTS,
		LODGINGS,
		RETAIL_DIRECTORY,
		ADVERTISEMENTS,
		STOCK_QUOTES,
		EMPLOYMENT,
		HOSPITALS,
		TECHNOLOGY_NEWS,
		MULTICATEGORY,
		CMAS_PRESIDENTIAL_ALERT,
		CMAS_EXTREME_THREAT,
		CMAS_SEVERE_THREAT,
		CMAS_CHILD_ABDUCTION_EMERGENCY,
		CMAS_TEST;
		public static unowned string get_string (MM.SmsCdmaServiceCategory val);
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_SMS_CDMA_TELESERVICE_ID_", type_id = "mm_sms_cdma_teleservice_id_get_type ()")]
	public enum SmsCdmaTeleserviceId {
		UNKNOWN,
		CMT91,
		WPT,
		WMT,
		VMN,
		WAP,
		WEMT,
		SCPT,
		CATPT;
		public static unowned string get_string (MM.SmsCdmaTeleserviceId val);
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_SMS_DELIVERY_STATE_", type_id = "mm_sms_delivery_state_get_type ()")]
	public enum SmsDeliveryState {
		COMPLETED_RECEIVED,
		COMPLETED_FORWARDED_UNCONFIRMED,
		COMPLETED_REPLACED_BY_SC,
		TEMPORARY_ERROR_CONGESTION,
		TEMPORARY_ERROR_SME_BUSY,
		TEMPORARY_ERROR_NO_RESPONSE_FROM_SME,
		TEMPORARY_ERROR_SERVICE_REJECTED,
		TEMPORARY_ERROR_QOS_NOT_AVAILABLE,
		TEMPORARY_ERROR_IN_SME,
		ERROR_REMOTE_PROCEDURE,
		ERROR_INCOMPATIBLE_DESTINATION,
		ERROR_CONNECTION_REJECTED,
		ERROR_NOT_OBTAINABLE,
		ERROR_QOS_NOT_AVAILABLE,
		ERROR_NO_INTERWORKING_AVAILABLE,
		ERROR_VALIDITY_PERIOD_EXPIRED,
		ERROR_DELETED_BY_ORIGINATING_SME,
		ERROR_DELETED_BY_SC_ADMINISTRATION,
		ERROR_MESSAGE_DOES_NOT_EXIST,
		TEMPORARY_FATAL_ERROR_CONGESTION,
		TEMPORARY_FATAL_ERROR_SME_BUSY,
		TEMPORARY_FATAL_ERROR_NO_RESPONSE_FROM_SME,
		TEMPORARY_FATAL_ERROR_SERVICE_REJECTED,
		TEMPORARY_FATAL_ERROR_QOS_NOT_AVAILABLE,
		TEMPORARY_FATAL_ERROR_IN_SME,
		UNKNOWN,
		NETWORK_PROBLEM_ADDRESS_VACANT,
		NETWORK_PROBLEM_ADDRESS_TRANSLATION_FAILURE,
		NETWORK_PROBLEM_NETWORK_RESOURCE_OUTAGE,
		NETWORK_PROBLEM_NETWORK_FAILURE,
		NETWORK_PROBLEM_INVALID_TELESERVICE_ID,
		NETWORK_PROBLEM_OTHER,
		TERMINAL_PROBLEM_NO_PAGE_RESPONSE,
		TERMINAL_PROBLEM_DESTINATION_BUSY,
		TERMINAL_PROBLEM_NO_ACKNOWLEDGMENT,
		TERMINAL_PROBLEM_DESTINATION_RESOURCE_SHORTAGE,
		TERMINAL_PROBLEM_SMS_DELIVERY_POSTPONED,
		TERMINAL_PROBLEM_DESTINATION_OUT_OF_SERVICE,
		TERMINAL_PROBLEM_DESTINATION_NO_LONGER_AT_THIS_ADDRESS,
		TERMINAL_PROBLEM_OTHER,
		RADIO_INTERFACE_PROBLEM_RESOURCE_SHORTAGE,
		RADIO_INTERFACE_PROBLEM_INCOMPATIBILITY,
		RADIO_INTERFACE_PROBLEM_OTHER,
		GENERAL_PROBLEM_ENCODING,
		GENERAL_PROBLEM_SMS_ORIGINATION_DENIED,
		GENERAL_PROBLEM_SMS_TERMINATION_DENIED,
		GENERAL_PROBLEM_SUPPLEMENTARY_SERVICE_NOT_SUPPORTED,
		GENERAL_PROBLEM_SMS_NOT_SUPPORTED,
		GENERAL_PROBLEM_MISSING_EXPECTED_PARAMETER,
		GENERAL_PROBLEM_MISSING_MANDATORY_PARAMETER,
		GENERAL_PROBLEM_UNRECOGNIZED_PARAMETER_VALUE,
		GENERAL_PROBLEM_UNEXPECTED_PARAMETER_VALUE,
		GENERAL_PROBLEM_USER_DATA_SIZE_ERROR,
		GENERAL_PROBLEM_OTHER,
		TEMPORARY_NETWORK_PROBLEM_ADDRESS_VACANT,
		TEMPORARY_NETWORK_PROBLEM_ADDRESS_TRANSLATION_FAILURE,
		TEMPORARY_NETWORK_PROBLEM_NETWORK_RESOURCE_OUTAGE,
		TEMPORARY_NETWORK_PROBLEM_NETWORK_FAILURE,
		TEMPORARY_NETWORK_PROBLEM_INVALID_TELESERVICE_ID,
		TEMPORARY_NETWORK_PROBLEM_OTHER,
		TEMPORARY_TERMINAL_PROBLEM_NO_PAGE_RESPONSE,
		TEMPORARY_TERMINAL_PROBLEM_DESTINATION_BUSY,
		TEMPORARY_TERMINAL_PROBLEM_NO_ACKNOWLEDGMENT,
		TEMPORARY_TERMINAL_PROBLEM_DESTINATION_RESOURCE_SHORTAGE,
		TEMPORARY_TERMINAL_PROBLEM_SMS_DELIVERY_POSTPONED,
		TEMPORARY_TERMINAL_PROBLEM_DESTINATION_OUT_OF_SERVICE,
		TEMPORARY_TERMINAL_PROBLEM_DESTINATION_NO_LONGER_AT_THIS_ADDRESS,
		TEMPORARY_TERMINAL_PROBLEM_OTHER,
		TEMPORARY_RADIO_INTERFACE_PROBLEM_RESOURCE_SHORTAGE,
		TEMPORARY_RADIO_INTERFACE_PROBLEM_INCOMPATIBILITY,
		TEMPORARY_RADIO_INTERFACE_PROBLEM_OTHER,
		TEMPORARY_GENERAL_PROBLEM_ENCODING,
		TEMPORARY_GENERAL_PROBLEM_SMS_ORIGINATION_DENIED,
		TEMPORARY_GENERAL_PROBLEM_SMS_TERMINATION_DENIED,
		TEMPORARY_GENERAL_PROBLEM_SUPPLEMENTARY_SERVICE_NOT_SUPPORTED,
		TEMPORARY_GENERAL_PROBLEM_SMS_NOT_SUPPORTED,
		TEMPORARY_GENERAL_PROBLEM_MISSING_EXPECTED_PARAMETER,
		TEMPORARY_GENERAL_PROBLEM_MISSING_MANDATORY_PARAMETER,
		TEMPORARY_GENERAL_PROBLEM_UNRECOGNIZED_PARAMETER_VALUE,
		TEMPORARY_GENERAL_PROBLEM_UNEXPECTED_PARAMETER_VALUE,
		TEMPORARY_GENERAL_PROBLEM_USER_DATA_SIZE_ERROR,
		TEMPORARY_GENERAL_PROBLEM_OTHER;
		public static unowned string get_string (MM.SmsDeliveryState val);
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_SMS_PDU_TYPE_", type_id = "mm_sms_pdu_type_get_type ()")]
	public enum SmsPduType {
		UNKNOWN,
		DELIVER,
		SUBMIT,
		STATUS_REPORT,
		CDMA_DELIVER,
		CDMA_SUBMIT,
		CDMA_CANCELLATION,
		CDMA_DELIVERY_ACKNOWLEDGEMENT,
		CDMA_USER_ACKNOWLEDGEMENT,
		CDMA_READ_ACKNOWLEDGEMENT;
		public static unowned string get_string (MM.SmsPduType val);
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_SMS_STATE_", type_id = "mm_sms_state_get_type ()")]
	public enum SmsState {
		UNKNOWN,
		STORED,
		RECEIVING,
		RECEIVED,
		SENDING,
		SENT;
		public static unowned string get_string (MM.SmsState val);
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_SMS_STORAGE_", type_id = "mm_sms_storage_get_type ()")]
	public enum SmsStorage {
		UNKNOWN,
		SM,
		ME,
		MT,
		SR,
		BM,
		TA;
		public static unowned string get_string (MM.SmsStorage val);
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_SMS_VALIDITY_TYPE_", type_id = "mm_sms_validity_type_get_type ()")]
	public enum SmsValidityType {
		UNKNOWN,
		RELATIVE,
		ABSOLUTE,
		ENHANCED;
		public static unowned string get_string (MM.SmsValidityType val);
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_CDMA_ACTIVATION_ERROR_")]
	public errordomain CdmaActivationError {
		NONE,
		UNKNOWN,
		ROAMING,
		[CCode (cname = "MM_CDMA_ACTIVATION_ERROR_WRONG_RADIO_INTERFACE")]
		WRONGRADIOINTERFACE,
		[CCode (cname = "MM_CDMA_ACTIVATION_ERROR_COULD_NOT_CONNECT")]
		COULDNOTCONNECT,
		[CCode (cname = "MM_CDMA_ACTIVATION_ERROR_SECURITY_AUTHENTICATION_FAILED")]
		SECURITYAUTHENTICATIONFAILED,
		[CCode (cname = "MM_CDMA_ACTIVATION_ERROR_PROVISIONING_FAILED")]
		PROVISIONINGFAILED,
		[CCode (cname = "MM_CDMA_ACTIVATION_ERROR_NO_SIGNAL")]
		NOSIGNAL,
		[CCode (cname = "MM_CDMA_ACTIVATION_ERROR_TIMED_OUT")]
		TIMEDOUT,
		[CCode (cname = "MM_CDMA_ACTIVATION_ERROR_START_FAILED")]
		STARTFAILED;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_CONNECTION_ERROR_")]
	public errordomain ConnectionError {
		UNKNOWN,
		[CCode (cname = "MM_CONNECTION_ERROR_NO_CARRIER")]
		NOCARRIER,
		[CCode (cname = "MM_CONNECTION_ERROR_NO_DIALTONE")]
		NODIALTONE,
		BUSY,
		[CCode (cname = "MM_CONNECTION_ERROR_NO_ANSWER")]
		NOANSWER;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_CORE_ERROR_")]
	public errordomain CoreError {
		FAILED,
		CANCELLED,
		ABORTED,
		UNSUPPORTED,
		[CCode (cname = "MM_CORE_ERROR_NO_PLUGINS")]
		NOPLUGINS,
		UNAUTHORIZED,
		[CCode (cname = "MM_CORE_ERROR_INVALID_ARGS")]
		INVALIDARGS,
		[CCode (cname = "MM_CORE_ERROR_IN_PROGRESS")]
		INPROGRESS,
		[CCode (cname = "MM_CORE_ERROR_WRONG_STATE")]
		WRONGSTATE,
		CONNECTED,
		[CCode (cname = "MM_CORE_ERROR_TOO_MANY")]
		TOOMANY,
		[CCode (cname = "MM_CORE_ERROR_NOT_FOUND")]
		NOTFOUND,
		RETRY,
		EXISTS;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MESSAGE_ERROR_")]
	public errordomain MessageError {
		[CCode (cname = "MM_MESSAGE_ERROR_ME_FAILURE")]
		MEFAILURE,
		[CCode (cname = "MM_MESSAGE_ERROR_SMS_SERVICE_RESERVED")]
		SMSSERVICERESERVED,
		[CCode (cname = "MM_MESSAGE_ERROR_NOT_ALLOWED")]
		NOTALLOWED,
		[CCode (cname = "MM_MESSAGE_ERROR_NOT_SUPPORTED")]
		NOTSUPPORTED,
		[CCode (cname = "MM_MESSAGE_ERROR_INVALID_PDU_PARAMETER")]
		INVALIDPDUPARAMETER,
		[CCode (cname = "MM_MESSAGE_ERROR_INVALID_TEXT_PARAMETER")]
		INVALIDTEXTPARAMETER,
		[CCode (cname = "MM_MESSAGE_ERROR_SIM_NOT_INSERTED")]
		SIMNOTINSERTED,
		[CCode (cname = "MM_MESSAGE_ERROR_SIM_PIN")]
		SIMPIN,
		[CCode (cname = "MM_MESSAGE_ERROR_PH_SIM_PIN")]
		PHSIMPIN,
		[CCode (cname = "MM_MESSAGE_ERROR_SIM_FAILURE")]
		SIMFAILURE,
		[CCode (cname = "MM_MESSAGE_ERROR_SIM_BUSY")]
		SIMBUSY,
		[CCode (cname = "MM_MESSAGE_ERROR_SIM_WRONG")]
		SIMWRONG,
		[CCode (cname = "MM_MESSAGE_ERROR_SIM_PUK")]
		SIMPUK,
		[CCode (cname = "MM_MESSAGE_ERROR_SIM_PIN2")]
		SIMPIN2,
		[CCode (cname = "MM_MESSAGE_ERROR_SIM_PUK2")]
		SIMPUK2,
		[CCode (cname = "MM_MESSAGE_ERROR_MEMORY_FAILURE")]
		MEMORYFAILURE,
		[CCode (cname = "MM_MESSAGE_ERROR_INVALID_INDEX")]
		INVALIDINDEX,
		[CCode (cname = "MM_MESSAGE_ERROR_MEMORY_FULL")]
		MEMORYFULL,
		[CCode (cname = "MM_MESSAGE_ERROR_SMSC_ADDRESS_UNKNOWN")]
		SMSCADDRESSUNKNOWN,
		[CCode (cname = "MM_MESSAGE_ERROR_NO_NETWORK")]
		NONETWORK,
		[CCode (cname = "MM_MESSAGE_ERROR_NETWORK_TIMEOUT")]
		NETWORKTIMEOUT,
		[CCode (cname = "MM_MESSAGE_ERROR_NO_CNMA_ACK_EXPECTED")]
		NOCNMAACKEXPECTED,
		UNKNOWN;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_MOBILE_EQUIPMENT_ERROR_")]
	public errordomain MobileEquipmentError {
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_PHONE_FAILURE")]
		PHONEFAILURE,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_NO_CONNECTION")]
		NOCONNECTION,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_LINK_RESERVED")]
		LINKRESERVED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_NOT_ALLOWED")]
		NOTALLOWED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_NOT_SUPPORTED")]
		NOTSUPPORTED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_PH_SIM_PIN")]
		PHSIMPIN,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_PH_FSIM_PIN")]
		PHFSIMPIN,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_PH_FSIM_PUK")]
		PHFSIMPUK,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_SIM_NOT_INSERTED")]
		SIMNOTINSERTED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_SIM_PIN")]
		SIMPIN,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_SIM_PUK")]
		SIMPUK,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_SIM_FAILURE")]
		SIMFAILURE,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_SIM_BUSY")]
		SIMBUSY,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_SIM_WRONG")]
		SIMWRONG,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_INCORRECT_PASSWORD")]
		INCORRECTPASSWORD,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_SIM_PIN2")]
		SIMPIN2,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_SIM_PUK2")]
		SIMPUK2,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_MEMORY_FULL")]
		MEMORYFULL,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_INVALID_INDEX")]
		INVALIDINDEX,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_NOT_FOUND")]
		NOTFOUND,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_MEMORY_FAILURE")]
		MEMORYFAILURE,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_TEXT_TOO_LONG")]
		TEXTTOOLONG,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_INVALID_CHARS")]
		INVALIDCHARS,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_DIAL_STRING_TOO_LONG")]
		DIALSTRINGTOOLONG,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_DIAL_STRING_INVALID")]
		DIALSTRINGINVALID,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_NO_NETWORK")]
		NONETWORK,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_NETWORK_TIMEOUT")]
		NETWORKTIMEOUT,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_NETWORK_NOT_ALLOWED")]
		NETWORKNOTALLOWED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_NETWORK_PIN")]
		NETWORKPIN,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_NETWORK_PUK")]
		NETWORKPUK,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_NETWORK_SUBSET_PIN")]
		NETWORKSUBSETPIN,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_NETWORK_SUBSET_PUK")]
		NETWORKSUBSETPUK,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_SERVICE_PIN")]
		SERVICEPIN,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_SERVICE_PUK")]
		SERVICEPUK,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_CORP_PIN")]
		CORPPIN,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_CORP_PUK")]
		CORPPUK,
		UNKNOWN,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_GPRS_IMSI_UNKNOWN_IN_HLR")]
		GPRSIMSIUNKNOWNINHLR,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_GPRS_ILLEGAL_MS")]
		GPRSILLEGALMS,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_GPRS_IMSI_UNKNOWN_IN_VLR")]
		GPRSIMSIUNKNOWNINVLR,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_GPRS_ILLEGAL_ME")]
		GPRSILLEGALME,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_GPRS_SERVICE_NOT_ALLOWED")]
		GPRSSERVICENOTALLOWED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_GPRS_PLMN_NOT_ALLOWED")]
		GPRSPLMNNOTALLOWED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_GPRS_LOCATION_NOT_ALLOWED")]
		GPRSLOCATIONNOTALLOWED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_GPRS_ROAMING_NOT_ALLOWED")]
		GPRSROMAINGNOTALLOWED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_GPRS_NO_CELLS_IN_LOCATION_AREA")]
		GPRSNOCELLSINLOCATIONAREA,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_GPRS_NETWORK_FAILURE")]
		GPRSNETWORKFAILURE,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_GPRS_CONGESTION")]
		GPRSCONGESTION,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_GPRS_INSUFFICIENT_RESOURCES")]
		GPRSINSUFFICIENTRESOURCES,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_GPRS_MISSING_OR_UNKNOWN_APN")]
		GPRSMISSINGORUNKNOWNAPN,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_GPRS_USER_AUTHENTICATION_FAILED")]
		GPRSUSERAUTHENTICATIONFAILED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_GPRS_SERVICE_OPTION_NOT_SUPPORTED")]
		GPRSSERVICEOPTIONNOTSUPPORTED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_GPRS_SERVICE_OPTION_NOT_SUBSCRIBED")]
		GPRSSERVICEOPTIONNOTSUBSCRIBED,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_GPRS_SERVICE_OPTION_OUT_OF_ORDER")]
		GPRSSERVICEOPTIONOUTOFORDER,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_GPRS_UNKNOWN")]
		GPRSUNKNOWN,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_GPRS_PDP_AUTH_FAILURE")]
		GPRSPDPAUTHFAILURE,
		[CCode (cname = "MM_MOBILE_EQUIPMENT_ERROR_GPRS_INVALID_MOBILE_CLASS")]
		GPRSINVALIDMOBILECLASS;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "libmm-glib.h", cprefix = "MM_SERIAL_ERROR_")]
	public errordomain SerialError {
		UNKNOWN,
		[CCode (cname = "MM_SERIAL_ERROR_OPEN_FAILED")]
		OPENFAILED,
		[CCode (cname = "MM_SERIAL_ERROR_SEND_FAILED")]
		SENDFAILED,
		[CCode (cname = "MM_SERIAL_ERROR_RESPONSE_TIMEOUT")]
		RESPONSETIMEOUT,
		[CCode (cname = "MM_SERIAL_ERROR_OPEN_FAILED_NO_DEVICE")]
		OPENFAILEDNODEVICE,
		[CCode (cname = "MM_SERIAL_ERROR_FLASH_FAILED")]
		FLASHFAILED,
		[CCode (cname = "MM_SERIAL_ERROR_NOT_OPEN")]
		NOTOPEN,
		[CCode (cname = "MM_SERIAL_ERROR_PARSE_FAILED")]
		PARSEFAILED,
		[CCode (cname = "MM_SERIAL_ERROR_FRAME_NOT_FOUND")]
		FRAMENOTFOUND;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "libmm-glib.h", instance_pos = 2.9)]
	public delegate void UnlockRetriesForeachCb (MM.ModemLock @lock, uint count);
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_BEARER_METHOD_CONNECT")]
	public const string BEARER_METHOD_CONNECT;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_BEARER_METHOD_DISCONNECT")]
	public const string BEARER_METHOD_DISCONNECT;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_BEARER_PROPERTY_CONNECTED")]
	public const string BEARER_PROPERTY_CONNECTED;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_BEARER_PROPERTY_INTERFACE")]
	public const string BEARER_PROPERTY_INTERFACE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_BEARER_PROPERTY_IP4CONFIG")]
	public const string BEARER_PROPERTY_IP4CONFIG;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_BEARER_PROPERTY_IP6CONFIG")]
	public const string BEARER_PROPERTY_IP6CONFIG;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_BEARER_PROPERTY_IPTIMEOUT")]
	public const string BEARER_PROPERTY_IPTIMEOUT;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_BEARER_PROPERTY_PROPERTIES")]
	public const string BEARER_PROPERTY_PROPERTIES;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_BEARER_PROPERTY_STATS")]
	public const string BEARER_PROPERTY_STATS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_BEARER_PROPERTY_SUSPENDED")]
	public const string BEARER_PROPERTY_SUSPENDED;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_CALL_METHOD_ACCEPT")]
	public const string CALL_METHOD_ACCEPT;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_CALL_METHOD_HANGUP")]
	public const string CALL_METHOD_HANGUP;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_CALL_METHOD_SENDDTMF")]
	public const string CALL_METHOD_SENDDTMF;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_CALL_METHOD_START")]
	public const string CALL_METHOD_START;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_CALL_PROPERTY_DIRECTION")]
	public const string CALL_PROPERTY_DIRECTION;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_CALL_PROPERTY_NUMBER")]
	public const string CALL_PROPERTY_NUMBER;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_CALL_PROPERTY_STATE")]
	public const string CALL_PROPERTY_STATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_CALL_PROPERTY_STATEREASON")]
	public const string CALL_PROPERTY_STATEREASON;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_CALL_SIGNAL_DTMFRECEIVED")]
	public const string CALL_SIGNAL_DTMFRECEIVED;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_CALL_SIGNAL_STATECHANGED")]
	public const string CALL_SIGNAL_STATECHANGED;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_DBUS_ERROR_PREFIX")]
	public const string DBUS_ERROR_PREFIX;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_DBUS_INTERFACE")]
	public const string DBUS_INTERFACE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_DBUS_INTERFACE_BEARER")]
	public const string DBUS_INTERFACE_BEARER;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_DBUS_INTERFACE_CALL")]
	public const string DBUS_INTERFACE_CALL;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_DBUS_INTERFACE_MODEM")]
	public const string DBUS_INTERFACE_MODEM;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_DBUS_INTERFACE_MODEM_FIRMWARE")]
	public const string DBUS_INTERFACE_MODEM_FIRMWARE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_DBUS_INTERFACE_MODEM_LOCATION")]
	public const string DBUS_INTERFACE_MODEM_LOCATION;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_DBUS_INTERFACE_MODEM_MESSAGING")]
	public const string DBUS_INTERFACE_MODEM_MESSAGING;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_DBUS_INTERFACE_MODEM_MODEM3GPP")]
	public const string DBUS_INTERFACE_MODEM_MODEM3GPP;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_DBUS_INTERFACE_MODEM_MODEM3GPP_USSD")]
	public const string DBUS_INTERFACE_MODEM_MODEM3GPP_USSD;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_DBUS_INTERFACE_MODEM_MODEMCDMA")]
	public const string DBUS_INTERFACE_MODEM_MODEMCDMA;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_DBUS_INTERFACE_MODEM_OMA")]
	public const string DBUS_INTERFACE_MODEM_OMA;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_DBUS_INTERFACE_MODEM_SIGNAL")]
	public const string DBUS_INTERFACE_MODEM_SIGNAL;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_DBUS_INTERFACE_MODEM_TIME")]
	public const string DBUS_INTERFACE_MODEM_TIME;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_DBUS_INTERFACE_MODEM_VOICE")]
	public const string DBUS_INTERFACE_MODEM_VOICE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_DBUS_INTERFACE_SIM")]
	public const string DBUS_INTERFACE_SIM;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_DBUS_INTERFACE_SMS")]
	public const string DBUS_INTERFACE_SMS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_DBUS_PATH")]
	public const string DBUS_PATH;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_DBUS_SERVICE")]
	public const string DBUS_SERVICE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MAJOR_VERSION")]
	public const int MAJOR_VERSION;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MANAGER_METHOD_REPORTKERNELEVENT")]
	public const string MANAGER_METHOD_REPORTKERNELEVENT;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MANAGER_METHOD_SCANDEVICES")]
	public const string MANAGER_METHOD_SCANDEVICES;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MANAGER_METHOD_SETLOGGING")]
	public const string MANAGER_METHOD_SETLOGGING;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MICRO_VERSION")]
	public const int MICRO_VERSION;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MINOR_VERSION")]
	public const int MINOR_VERSION;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_CDMA_NID_UNKNOWN")]
	public const int MODEM_CDMA_NID_UNKNOWN;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_CDMA_SID_UNKNOWN")]
	public const int MODEM_CDMA_SID_UNKNOWN;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_FIRMWARE_METHOD_LIST")]
	public const string MODEM_FIRMWARE_METHOD_LIST;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_FIRMWARE_METHOD_SELECT")]
	public const string MODEM_FIRMWARE_METHOD_SELECT;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_LOCATION_METHOD_GETLOCATION")]
	public const string MODEM_LOCATION_METHOD_GETLOCATION;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_LOCATION_METHOD_SETGPSREFRESHRATE")]
	public const string MODEM_LOCATION_METHOD_SETGPSREFRESHRATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_LOCATION_METHOD_SETSUPLSERVER")]
	public const string MODEM_LOCATION_METHOD_SETSUPLSERVER;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_LOCATION_METHOD_SETUP")]
	public const string MODEM_LOCATION_METHOD_SETUP;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_LOCATION_PROPERTY_CAPABILITIES")]
	public const string MODEM_LOCATION_PROPERTY_CAPABILITIES;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_LOCATION_PROPERTY_ENABLED")]
	public const string MODEM_LOCATION_PROPERTY_ENABLED;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_LOCATION_PROPERTY_GPSREFRESHRATE")]
	public const string MODEM_LOCATION_PROPERTY_GPSREFRESHRATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_LOCATION_PROPERTY_LOCATION")]
	public const string MODEM_LOCATION_PROPERTY_LOCATION;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_LOCATION_PROPERTY_SIGNALSLOCATION")]
	public const string MODEM_LOCATION_PROPERTY_SIGNALSLOCATION;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_LOCATION_PROPERTY_SUPLSERVER")]
	public const string MODEM_LOCATION_PROPERTY_SUPLSERVER;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MESSAGING_METHOD_CREATE")]
	public const string MODEM_MESSAGING_METHOD_CREATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MESSAGING_METHOD_DELETE")]
	public const string MODEM_MESSAGING_METHOD_DELETE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MESSAGING_METHOD_LIST")]
	public const string MODEM_MESSAGING_METHOD_LIST;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MESSAGING_PROPERTY_DEFAULTSTORAGE")]
	public const string MODEM_MESSAGING_PROPERTY_DEFAULTSTORAGE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MESSAGING_PROPERTY_MESSAGES")]
	public const string MODEM_MESSAGING_PROPERTY_MESSAGES;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MESSAGING_PROPERTY_SUPPORTEDSTORAGES")]
	public const string MODEM_MESSAGING_PROPERTY_SUPPORTEDSTORAGES;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MESSAGING_SIGNAL_ADDED")]
	public const string MODEM_MESSAGING_SIGNAL_ADDED;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MESSAGING_SIGNAL_DELETED")]
	public const string MODEM_MESSAGING_SIGNAL_DELETED;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_METHOD_COMMAND")]
	public const string MODEM_METHOD_COMMAND;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_METHOD_CREATEBEARER")]
	public const string MODEM_METHOD_CREATEBEARER;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_METHOD_DELETEBEARER")]
	public const string MODEM_METHOD_DELETEBEARER;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_METHOD_ENABLE")]
	public const string MODEM_METHOD_ENABLE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_METHOD_FACTORYRESET")]
	public const string MODEM_METHOD_FACTORYRESET;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_METHOD_LISTBEARERS")]
	public const string MODEM_METHOD_LISTBEARERS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_METHOD_RESET")]
	public const string MODEM_METHOD_RESET;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_METHOD_SETCURRENTBANDS")]
	public const string MODEM_METHOD_SETCURRENTBANDS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_METHOD_SETCURRENTCAPABILITIES")]
	public const string MODEM_METHOD_SETCURRENTCAPABILITIES;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_METHOD_SETCURRENTMODES")]
	public const string MODEM_METHOD_SETCURRENTMODES;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_METHOD_SETPOWERSTATE")]
	public const string MODEM_METHOD_SETPOWERSTATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEM3GPP_METHOD_REGISTER")]
	public const string MODEM_MODEM3GPP_METHOD_REGISTER;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEM3GPP_METHOD_SCAN")]
	public const string MODEM_MODEM3GPP_METHOD_SCAN;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEM3GPP_PROPERTY_ENABLEDFACILITYLOCKS")]
	public const string MODEM_MODEM3GPP_PROPERTY_ENABLEDFACILITYLOCKS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEM3GPP_PROPERTY_IMEI")]
	public const string MODEM_MODEM3GPP_PROPERTY_IMEI;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEM3GPP_PROPERTY_OPERATORCODE")]
	public const string MODEM_MODEM3GPP_PROPERTY_OPERATORCODE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEM3GPP_PROPERTY_OPERATORNAME")]
	public const string MODEM_MODEM3GPP_PROPERTY_OPERATORNAME;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEM3GPP_PROPERTY_REGISTRATIONSTATE")]
	public const string MODEM_MODEM3GPP_PROPERTY_REGISTRATIONSTATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEM3GPP_PROPERTY_SUBSCRIPTIONSTATE")]
	public const string MODEM_MODEM3GPP_PROPERTY_SUBSCRIPTIONSTATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEM3GPP_USSD_METHOD_CANCEL")]
	public const string MODEM_MODEM3GPP_USSD_METHOD_CANCEL;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEM3GPP_USSD_METHOD_INITIATE")]
	public const string MODEM_MODEM3GPP_USSD_METHOD_INITIATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEM3GPP_USSD_METHOD_RESPOND")]
	public const string MODEM_MODEM3GPP_USSD_METHOD_RESPOND;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEM3GPP_USSD_PROPERTY_NETWORKNOTIFICATION")]
	public const string MODEM_MODEM3GPP_USSD_PROPERTY_NETWORKNOTIFICATION;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEM3GPP_USSD_PROPERTY_NETWORKREQUEST")]
	public const string MODEM_MODEM3GPP_USSD_PROPERTY_NETWORKREQUEST;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEM3GPP_USSD_PROPERTY_STATE")]
	public const string MODEM_MODEM3GPP_USSD_PROPERTY_STATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEMCDMA_METHOD_ACTIVATE")]
	public const string MODEM_MODEMCDMA_METHOD_ACTIVATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEMCDMA_METHOD_ACTIVATEMANUAL")]
	public const string MODEM_MODEMCDMA_METHOD_ACTIVATEMANUAL;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEMCDMA_PROPERTY_ACTIVATIONSTATE")]
	public const string MODEM_MODEMCDMA_PROPERTY_ACTIVATIONSTATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEMCDMA_PROPERTY_CDMA1XREGISTRATIONSTATE")]
	public const string MODEM_MODEMCDMA_PROPERTY_CDMA1XREGISTRATIONSTATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEMCDMA_PROPERTY_ESN")]
	public const string MODEM_MODEMCDMA_PROPERTY_ESN;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEMCDMA_PROPERTY_EVDOREGISTRATIONSTATE")]
	public const string MODEM_MODEMCDMA_PROPERTY_EVDOREGISTRATIONSTATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEMCDMA_PROPERTY_MEID")]
	public const string MODEM_MODEMCDMA_PROPERTY_MEID;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEMCDMA_PROPERTY_NID")]
	public const string MODEM_MODEMCDMA_PROPERTY_NID;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEMCDMA_PROPERTY_SID")]
	public const string MODEM_MODEMCDMA_PROPERTY_SID;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_MODEMCDMA_SIGNAL_ACTIVATIONSTATECHANGED")]
	public const string MODEM_MODEMCDMA_SIGNAL_ACTIVATIONSTATECHANGED;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_OMA_METHOD_ACCEPTNETWORKINITIATEDSESSION")]
	public const string MODEM_OMA_METHOD_ACCEPTNETWORKINITIATEDSESSION;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_OMA_METHOD_CANCELSESSION")]
	public const string MODEM_OMA_METHOD_CANCELSESSION;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_OMA_METHOD_SETUP")]
	public const string MODEM_OMA_METHOD_SETUP;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_OMA_METHOD_STARTCLIENTINITIATEDSESSION")]
	public const string MODEM_OMA_METHOD_STARTCLIENTINITIATEDSESSION;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_OMA_PROPERTY_FEATURES")]
	public const string MODEM_OMA_PROPERTY_FEATURES;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_OMA_PROPERTY_PENDINGNETWORKINITIATEDSESSIONS")]
	public const string MODEM_OMA_PROPERTY_PENDINGNETWORKINITIATEDSESSIONS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_OMA_PROPERTY_SESSIONSTATE")]
	public const string MODEM_OMA_PROPERTY_SESSIONSTATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_OMA_PROPERTY_SESSIONTYPE")]
	public const string MODEM_OMA_PROPERTY_SESSIONTYPE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_OMA_SIGNAL_SESSIONSTATECHANGED")]
	public const string MODEM_OMA_SIGNAL_SESSIONSTATECHANGED;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_ACCESSTECHNOLOGIES")]
	public const string MODEM_PROPERTY_ACCESSTECHNOLOGIES;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_BEARERS")]
	public const string MODEM_PROPERTY_BEARERS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_CURRENTBANDS")]
	public const string MODEM_PROPERTY_CURRENTBANDS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_CURRENTCAPABILITIES")]
	public const string MODEM_PROPERTY_CURRENTCAPABILITIES;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_CURRENTMODES")]
	public const string MODEM_PROPERTY_CURRENTMODES;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_DEVICE")]
	public const string MODEM_PROPERTY_DEVICE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_DEVICEIDENTIFIER")]
	public const string MODEM_PROPERTY_DEVICEIDENTIFIER;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_DRIVERS")]
	public const string MODEM_PROPERTY_DRIVERS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_EQUIPMENTIDENTIFIER")]
	public const string MODEM_PROPERTY_EQUIPMENTIDENTIFIER;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_MANUFACTURER")]
	public const string MODEM_PROPERTY_MANUFACTURER;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_MAXACTIVEBEARERS")]
	public const string MODEM_PROPERTY_MAXACTIVEBEARERS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_MAXBEARERS")]
	public const string MODEM_PROPERTY_MAXBEARERS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_MODEL")]
	public const string MODEM_PROPERTY_MODEL;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_OWNNUMBERS")]
	public const string MODEM_PROPERTY_OWNNUMBERS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_PLUGIN")]
	public const string MODEM_PROPERTY_PLUGIN;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_PORTS")]
	public const string MODEM_PROPERTY_PORTS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_POWERSTATE")]
	public const string MODEM_PROPERTY_POWERSTATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_PRIMARYPORT")]
	public const string MODEM_PROPERTY_PRIMARYPORT;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_REVISION")]
	public const string MODEM_PROPERTY_REVISION;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_SIGNALQUALITY")]
	public const string MODEM_PROPERTY_SIGNALQUALITY;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_SIM")]
	public const string MODEM_PROPERTY_SIM;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_STATE")]
	public const string MODEM_PROPERTY_STATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_STATEFAILEDREASON")]
	public const string MODEM_PROPERTY_STATEFAILEDREASON;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_SUPPORTEDBANDS")]
	public const string MODEM_PROPERTY_SUPPORTEDBANDS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_SUPPORTEDCAPABILITIES")]
	public const string MODEM_PROPERTY_SUPPORTEDCAPABILITIES;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_SUPPORTEDIPFAMILIES")]
	public const string MODEM_PROPERTY_SUPPORTEDIPFAMILIES;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_SUPPORTEDMODES")]
	public const string MODEM_PROPERTY_SUPPORTEDMODES;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_UNLOCKREQUIRED")]
	public const string MODEM_PROPERTY_UNLOCKREQUIRED;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_PROPERTY_UNLOCKRETRIES")]
	public const string MODEM_PROPERTY_UNLOCKRETRIES;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_SIGNAL_METHOD_SETUP")]
	public const string MODEM_SIGNAL_METHOD_SETUP;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_SIGNAL_PROPERTY_CDMA")]
	public const string MODEM_SIGNAL_PROPERTY_CDMA;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_SIGNAL_PROPERTY_EVDO")]
	public const string MODEM_SIGNAL_PROPERTY_EVDO;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_SIGNAL_PROPERTY_GSM")]
	public const string MODEM_SIGNAL_PROPERTY_GSM;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_SIGNAL_PROPERTY_LTE")]
	public const string MODEM_SIGNAL_PROPERTY_LTE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_SIGNAL_PROPERTY_RATE")]
	public const string MODEM_SIGNAL_PROPERTY_RATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_SIGNAL_PROPERTY_UMTS")]
	public const string MODEM_SIGNAL_PROPERTY_UMTS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_SIGNAL_STATECHANGED")]
	public const string MODEM_SIGNAL_STATECHANGED;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_TIME_METHOD_GETNETWORKTIME")]
	public const string MODEM_TIME_METHOD_GETNETWORKTIME;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_TIME_PROPERTY_NETWORKTIMEZONE")]
	public const string MODEM_TIME_PROPERTY_NETWORKTIMEZONE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_TIME_SIGNAL_NETWORKTIMECHANGED")]
	public const string MODEM_TIME_SIGNAL_NETWORKTIMECHANGED;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_VOICE_METHOD_CREATECALL")]
	public const string MODEM_VOICE_METHOD_CREATECALL;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_VOICE_METHOD_DELETECALL")]
	public const string MODEM_VOICE_METHOD_DELETECALL;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_VOICE_METHOD_LISTCALLS")]
	public const string MODEM_VOICE_METHOD_LISTCALLS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_VOICE_PROPERTY_CALLS")]
	public const string MODEM_VOICE_PROPERTY_CALLS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_VOICE_SIGNAL_CALLADDED")]
	public const string MODEM_VOICE_SIGNAL_CALLADDED;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_MODEM_VOICE_SIGNAL_CALLDELETED")]
	public const string MODEM_VOICE_SIGNAL_CALLDELETED;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIMPLE_PROPERTY_3GPP_OPERATOR_CODE")]
	public const string SIMPLE_PROPERTY_3GPP_OPERATOR_CODE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIMPLE_PROPERTY_3GPP_OPERATOR_NAME")]
	public const string SIMPLE_PROPERTY_3GPP_OPERATOR_NAME;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIMPLE_PROPERTY_3GPP_REGISTRATION_STATE")]
	public const string SIMPLE_PROPERTY_3GPP_REGISTRATION_STATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIMPLE_PROPERTY_3GPP_SUBSCRIPTION_STATE")]
	public const string SIMPLE_PROPERTY_3GPP_SUBSCRIPTION_STATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIMPLE_PROPERTY_ACCESS_TECHNOLOGIES")]
	public const string SIMPLE_PROPERTY_ACCESS_TECHNOLOGIES;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIMPLE_PROPERTY_CDMA_CDMA1X_REGISTRATION_STATE")]
	public const string SIMPLE_PROPERTY_CDMA_CDMA1X_REGISTRATION_STATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIMPLE_PROPERTY_CDMA_EVDO_REGISTRATION_STATE")]
	public const string SIMPLE_PROPERTY_CDMA_EVDO_REGISTRATION_STATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIMPLE_PROPERTY_CDMA_NID")]
	public const string SIMPLE_PROPERTY_CDMA_NID;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIMPLE_PROPERTY_CDMA_SID")]
	public const string SIMPLE_PROPERTY_CDMA_SID;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIMPLE_PROPERTY_CURRENT_BANDS")]
	public const string SIMPLE_PROPERTY_CURRENT_BANDS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIMPLE_PROPERTY_SIGNAL_QUALITY")]
	public const string SIMPLE_PROPERTY_SIGNAL_QUALITY;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIMPLE_PROPERTY_STATE")]
	public const string SIMPLE_PROPERTY_STATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIM_METHOD_CHANGEPIN")]
	public const string SIM_METHOD_CHANGEPIN;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIM_METHOD_ENABLEPIN")]
	public const string SIM_METHOD_ENABLEPIN;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIM_METHOD_SENDPIN")]
	public const string SIM_METHOD_SENDPIN;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIM_METHOD_SENDPUK")]
	public const string SIM_METHOD_SENDPUK;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIM_PROPERTY_IMSI")]
	public const string SIM_PROPERTY_IMSI;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIM_PROPERTY_OPERATORIDENTIFIER")]
	public const string SIM_PROPERTY_OPERATORIDENTIFIER;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIM_PROPERTY_OPERATORNAME")]
	public const string SIM_PROPERTY_OPERATORNAME;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SIM_PROPERTY_SIMIDENTIFIER")]
	public const string SIM_PROPERTY_SIMIDENTIFIER;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SMS_METHOD_SEND")]
	public const string SMS_METHOD_SEND;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SMS_METHOD_STORE")]
	public const string SMS_METHOD_STORE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SMS_PROPERTY_CLASS")]
	public const string SMS_PROPERTY_CLASS;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SMS_PROPERTY_DATA")]
	public const string SMS_PROPERTY_DATA;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SMS_PROPERTY_DELIVERYREPORTREQUEST")]
	public const string SMS_PROPERTY_DELIVERYREPORTREQUEST;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SMS_PROPERTY_DELIVERYSTATE")]
	public const string SMS_PROPERTY_DELIVERYSTATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SMS_PROPERTY_DISCHARGETIMESTAMP")]
	public const string SMS_PROPERTY_DISCHARGETIMESTAMP;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SMS_PROPERTY_MESSAGEREFERENCE")]
	public const string SMS_PROPERTY_MESSAGEREFERENCE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SMS_PROPERTY_NUMBER")]
	public const string SMS_PROPERTY_NUMBER;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SMS_PROPERTY_PDUTYPE")]
	public const string SMS_PROPERTY_PDUTYPE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SMS_PROPERTY_SERVICECATEGORY")]
	public const string SMS_PROPERTY_SERVICECATEGORY;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SMS_PROPERTY_SMSC")]
	public const string SMS_PROPERTY_SMSC;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SMS_PROPERTY_STATE")]
	public const string SMS_PROPERTY_STATE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SMS_PROPERTY_STORAGE")]
	public const string SMS_PROPERTY_STORAGE;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SMS_PROPERTY_TELESERVICEID")]
	public const string SMS_PROPERTY_TELESERVICEID;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SMS_PROPERTY_TEXT")]
	public const string SMS_PROPERTY_TEXT;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SMS_PROPERTY_TIMESTAMP")]
	public const string SMS_PROPERTY_TIMESTAMP;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_SMS_PROPERTY_VALIDITY")]
	public const string SMS_PROPERTY_VALIDITY;
	[CCode (cheader_filename = "libmm-glib.h", cname = "MM_UNLOCK_RETRIES_UNKNOWN")]
	public const int UNLOCK_RETRIES_UNKNOWN;
	[CCode (cheader_filename = "libmm-glib.h")]
	public static unowned GLib.DBusInterfaceInfo gdbus_bearer_interface_info ();
	[CCode (cheader_filename = "libmm-glib.h")]
	public static uint gdbus_bearer_override_properties (GLib.ObjectClass klass, uint property_id_begin);
	[CCode (cheader_filename = "libmm-glib.h")]
	public static unowned GLib.DBusInterfaceInfo gdbus_modem3gpp_interface_info ();
	[CCode (cheader_filename = "libmm-glib.h")]
	public static uint gdbus_modem3gpp_override_properties (GLib.ObjectClass klass, uint property_id_begin);
	[CCode (cheader_filename = "libmm-glib.h")]
	public static unowned GLib.DBusInterfaceInfo gdbus_modem3gpp_ussd_interface_info ();
	[CCode (cheader_filename = "libmm-glib.h")]
	public static uint gdbus_modem3gpp_ussd_override_properties (GLib.ObjectClass klass, uint property_id_begin);
	[CCode (cheader_filename = "libmm-glib.h")]
	public static unowned GLib.DBusInterfaceInfo gdbus_modem_cdma_interface_info ();
	[CCode (cheader_filename = "libmm-glib.h")]
	public static uint gdbus_modem_cdma_override_properties (GLib.ObjectClass klass, uint property_id_begin);
	[CCode (cheader_filename = "libmm-glib.h")]
	public static unowned GLib.DBusInterfaceInfo gdbus_modem_firmware_interface_info ();
	[CCode (cheader_filename = "libmm-glib.h")]
	public static uint gdbus_modem_firmware_override_properties (GLib.ObjectClass klass, uint property_id_begin);
	[CCode (cheader_filename = "libmm-glib.h")]
	public static unowned GLib.DBusInterfaceInfo gdbus_modem_interface_info ();
	[CCode (cheader_filename = "libmm-glib.h")]
	public static unowned GLib.DBusInterfaceInfo gdbus_modem_location_interface_info ();
	[CCode (cheader_filename = "libmm-glib.h")]
	public static uint gdbus_modem_location_override_properties (GLib.ObjectClass klass, uint property_id_begin);
	[CCode (cheader_filename = "libmm-glib.h")]
	public static unowned GLib.DBusInterfaceInfo gdbus_modem_messaging_interface_info ();
	[CCode (cheader_filename = "libmm-glib.h")]
	public static uint gdbus_modem_messaging_override_properties (GLib.ObjectClass klass, uint property_id_begin);
	[CCode (cheader_filename = "libmm-glib.h")]
	public static unowned GLib.DBusInterfaceInfo gdbus_modem_oma_interface_info ();
	[CCode (cheader_filename = "libmm-glib.h")]
	public static uint gdbus_modem_oma_override_properties (GLib.ObjectClass klass, uint property_id_begin);
	[CCode (cheader_filename = "libmm-glib.h")]
	public static uint gdbus_modem_override_properties (GLib.ObjectClass klass, uint property_id_begin);
	[CCode (cheader_filename = "libmm-glib.h")]
	public static unowned GLib.DBusInterfaceInfo gdbus_modem_signal_interface_info ();
	[CCode (cheader_filename = "libmm-glib.h")]
	public static uint gdbus_modem_signal_override_properties (GLib.ObjectClass klass, uint property_id_begin);
	[CCode (cheader_filename = "libmm-glib.h")]
	public static unowned GLib.DBusInterfaceInfo gdbus_modem_simple_interface_info ();
	[CCode (cheader_filename = "libmm-glib.h")]
	public static uint gdbus_modem_simple_override_properties (GLib.ObjectClass klass, uint property_id_begin);
	[CCode (cheader_filename = "libmm-glib.h")]
	public static unowned GLib.DBusInterfaceInfo gdbus_modem_time_interface_info ();
	[CCode (cheader_filename = "libmm-glib.h")]
	public static uint gdbus_modem_time_override_properties (GLib.ObjectClass klass, uint property_id_begin);
	[CCode (cheader_filename = "libmm-glib.h")]
	public static unowned GLib.DBusInterfaceInfo gdbus_modem_voice_interface_info ();
	[CCode (cheader_filename = "libmm-glib.h")]
	public static uint gdbus_modem_voice_override_properties (GLib.ObjectClass klass, uint property_id_begin);
	[CCode (cheader_filename = "libmm-glib.h")]
	public static unowned GLib.DBusInterfaceInfo gdbus_org_freedesktop_modem_manager1_interface_info ();
	[CCode (cheader_filename = "libmm-glib.h")]
	public static uint gdbus_org_freedesktop_modem_manager1_override_properties (GLib.ObjectClass klass, uint property_id_begin);
	[CCode (cheader_filename = "libmm-glib.h")]
	public static unowned GLib.DBusInterfaceInfo gdbus_sim_interface_info ();
	[CCode (cheader_filename = "libmm-glib.h")]
	public static uint gdbus_sim_override_properties (GLib.ObjectClass klass, uint property_id_begin);
	[CCode (cheader_filename = "libmm-glib.h")]
	public static unowned GLib.DBusInterfaceInfo gdbus_sms_interface_info ();
	[CCode (cheader_filename = "libmm-glib.h")]
	public static uint gdbus_sms_override_properties (GLib.ObjectClass klass, uint property_id_begin);
}
