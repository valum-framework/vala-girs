<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Camel" version="1.2"/>
  <include name="EDataServer" version="1.2"/>
  <include name="GLib" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <include name="libxml2" version="2.0"/>
  <package name="libebook-contacts-1.2"/>
  <c:include name="libebook-contacts/libebook-contacts.h"/>
  <namespace name="EBookContacts"
             version="1.2"
             shared-library="libebook-contacts-1.2.so.2,libedataserver-1.2.so.22"
             c:identifier-prefixes="E"
             c:symbol-prefixes="e">
    <record name="AddressWestern"
            c:type="EAddressWestern"
            glib:type-name="EAddressWestern"
            glib:get-type="e_address_western_get_type"
            c:symbol-prefix="address_western">
      <doc xml:space="preserve">Western address structure.</doc>
      <field name="po_box" writable="1">
        <doc xml:space="preserve">PO Box.</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="extended" writable="1">
        <doc xml:space="preserve">TODO, we're not sure what this is.</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="street" writable="1">
        <doc xml:space="preserve">Street name</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="locality" writable="1">
        <doc xml:space="preserve">City or town</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="region" writable="1">
        <doc xml:space="preserve">State or province</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="postal_code" writable="1">
        <doc xml:space="preserve">Postal Code</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="country" writable="1">
        <doc xml:space="preserve">Country</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <method name="copy" c:identifier="e_address_western_copy" version="3.24">
        <doc xml:space="preserve">Creates a copy of @eaw.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #EAddressWestern struct identical to @eaw.</doc>
          <type name="AddressWestern" c:type="EAddressWestern*"/>
        </return-value>
        <parameters>
          <instance-parameter name="eaw" transfer-ownership="none">
            <doc xml:space="preserve">an #EAddressWestern</doc>
            <type name="AddressWestern" c:type="EAddressWestern*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="e_address_western_free">
        <doc xml:space="preserve">Frees @eaw and its contents.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="eaw" transfer-ownership="none">
            <doc xml:space="preserve">an #EAddressWestern</doc>
            <type name="AddressWestern" c:type="EAddressWestern*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="parse" c:identifier="e_address_western_parse">
        <doc xml:space="preserve">Parses a string representing a mailing address into a
structure of type #EAddressWestern.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #EAddressWestern structure, or %NULL if the parsing failed.</doc>
          <type name="AddressWestern" c:type="EAddressWestern*"/>
        </return-value>
        <parameters>
          <parameter name="in_address" transfer-ownership="none">
            <doc xml:space="preserve">a string representing a mailing address</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="BookChange"
            c:type="EBookChange"
            deprecated="1"
            deprecated-version="3.2">
      <doc xml:space="preserve">This is a part of the deprecated #EBook API.</doc>
      <field name="change_type" writable="1">
        <doc xml:space="preserve">The #EBookChangeType</doc>
        <type name="BookChangeType" c:type="EBookChangeType"/>
      </field>
      <field name="contact" writable="1">
        <doc xml:space="preserve">The #EContact which changed</doc>
        <type name="Contact" c:type="EContact*"/>
      </field>
    </record>
    <enumeration name="BookChangeType"
                 deprecated="1"
                 deprecated-version="3.2"
                 glib:type-name="EBookChangeType"
                 glib:get-type="e_book_change_type_get_type"
                 c:type="EBookChangeType">
      <doc xml:space="preserve">The type of change in an #EBookChange</doc>
      <member name="added"
              value="0"
              c:identifier="E_BOOK_CHANGE_CARD_ADDED"
              glib:nick="added">
        <doc xml:space="preserve">A vCard was added</doc>
      </member>
      <member name="deleted"
              value="1"
              c:identifier="E_BOOK_CHANGE_CARD_DELETED"
              glib:nick="deleted">
        <doc xml:space="preserve">A vCard was deleted</doc>
      </member>
      <member name="modified"
              value="2"
              c:identifier="E_BOOK_CHANGE_CARD_MODIFIED"
              glib:nick="modified">
        <doc xml:space="preserve">A vCard was modified</doc>
      </member>
    </enumeration>
    <enumeration name="BookClientError"
                 version="3.2"
                 glib:type-name="EBookClientError"
                 glib:get-type="e_book_client_error_get_type"
                 c:type="EBookClientError"
                 glib:error-domain="e-book-client-error-quark">
      <doc xml:space="preserve">Error codes returned by #EBookClient APIs, if an #EClientError was not available.</doc>
      <member name="no_such_book"
              value="0"
              c:identifier="E_BOOK_CLIENT_ERROR_NO_SUCH_BOOK"
              glib:nick="no-such-book">
        <doc xml:space="preserve">Requested book did not exist</doc>
      </member>
      <member name="contact_not_found"
              value="1"
              c:identifier="E_BOOK_CLIENT_ERROR_CONTACT_NOT_FOUND"
              glib:nick="contact-not-found">
        <doc xml:space="preserve">Contact referred to was not found</doc>
      </member>
      <member name="contact_id_already_exists"
              value="2"
              c:identifier="E_BOOK_CLIENT_ERROR_CONTACT_ID_ALREADY_EXISTS"
              glib:nick="contact-id-already-exists">
        <doc xml:space="preserve">Tried to add a contact which already exists</doc>
      </member>
      <member name="no_such_source"
              value="3"
              c:identifier="E_BOOK_CLIENT_ERROR_NO_SUCH_SOURCE"
              glib:nick="no-such-source">
        <doc xml:space="preserve">Referred #ESource does not exist</doc>
      </member>
      <member name="no_space"
              value="4"
              c:identifier="E_BOOK_CLIENT_ERROR_NO_SPACE"
              glib:nick="no-space">
        <doc xml:space="preserve">Out of disk space</doc>
      </member>
      <function name="create"
                c:identifier="e_book_client_error_create"
                version="3.2"
                deprecated="1"
                deprecated-version="3.8">
        <doc-deprecated xml:space="preserve">Just use the #GError API directly.</doc-deprecated>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #GError containing an E_BOOK_CLIENT_ERROR of the given
@code. If the @custom_msg is NULL, then the error message is
the one returned from e_book_client_error_to_string() for the @code,
otherwise the given message is used.

Returned pointer should be freed with g_error_free().</doc>
          <type name="GLib.Error" c:type="GError*"/>
        </return-value>
        <parameters>
          <parameter name="code" transfer-ownership="none">
            <doc xml:space="preserve">an #EBookClientError code to create</doc>
            <type name="BookClientError" c:type="EBookClientError"/>
          </parameter>
          <parameter name="custom_msg" transfer-ownership="none">
            <doc xml:space="preserve">custom message to use for the error; can be %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="quark" c:identifier="e_book_client_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="to_string"
                c:identifier="e_book_client_error_to_string"
                version="3.2">
        <doc xml:space="preserve">Get localized human readable description of the given error code.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Localized human readable description of the given error code</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="code" transfer-ownership="none">
            <doc xml:space="preserve">an #EBookClientError code</doc>
            <type name="BookClientError" c:type="EBookClientError"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <bitfield name="BookClientViewFlags"
              version="3.4"
              glib:type-name="EBookClientViewFlags"
              glib:get-type="e_book_client_view_flags_get_type"
              c:type="EBookClientViewFlags">
      <doc xml:space="preserve">Flags that control the behaviour of an #EBookClientView.</doc>
      <member name="none"
              value="0"
              c:identifier="E_BOOK_CLIENT_VIEW_FLAGS_NONE"
              glib:nick="none">
        <doc xml:space="preserve">Symbolic value for no flags</doc>
      </member>
      <member name="notify_initial"
              value="1"
              c:identifier="E_BOOK_CLIENT_VIEW_FLAGS_NOTIFY_INITIAL"
              glib:nick="notify-initial">
        <doc xml:space="preserve">If this flag is set then all contacts matching the view's query will
  be sent as notifications when starting the view, otherwise only future
  changes will be reported.  The default for a #EBookClientView is %TRUE.</doc>
      </member>
    </bitfield>
    <enumeration name="BookCursorOrigin"
                 version="3.12"
                 glib:type-name="EBookCursorOrigin"
                 glib:get-type="e_book_cursor_origin_get_type"
                 c:type="EBookCursorOrigin">
      <doc xml:space="preserve">Specifies the start position to in the list of traversed contacts
in calls to e_book_client_cursor_step().

When an #EBookClientCursor is created, the current position implied by %E_BOOK_CURSOR_ORIGIN_CURRENT
is the same as %E_BOOK_CURSOR_ORIGIN_BEGIN.</doc>
      <member name="current"
              value="0"
              c:identifier="E_BOOK_CURSOR_ORIGIN_CURRENT"
              glib:nick="current">
        <doc xml:space="preserve">The current cursor position</doc>
      </member>
      <member name="begin"
              value="1"
              c:identifier="E_BOOK_CURSOR_ORIGIN_BEGIN"
              glib:nick="begin">
        <doc xml:space="preserve">The beginning of the cursor results.</doc>
      </member>
      <member name="end"
              value="2"
              c:identifier="E_BOOK_CURSOR_ORIGIN_END"
              glib:nick="end">
        <doc xml:space="preserve">The ending of the cursor results.</doc>
      </member>
    </enumeration>
    <enumeration name="BookCursorSortType"
                 version="3.12"
                 glib:type-name="EBookCursorSortType"
                 glib:get-type="e_book_cursor_sort_type_get_type"
                 c:type="EBookCursorSortType">
      <doc xml:space="preserve">Specifies the sort order of an ordered query</doc>
      <member name="ascending"
              value="0"
              c:identifier="E_BOOK_CURSOR_SORT_ASCENDING"
              glib:nick="ascending">
        <doc xml:space="preserve">Sort results in ascending order</doc>
      </member>
      <member name="descending"
              value="1"
              c:identifier="E_BOOK_CURSOR_SORT_DESCENDING"
              glib:nick="descending">
        <doc xml:space="preserve">Sort results in descending order</doc>
      </member>
    </enumeration>
    <bitfield name="BookCursorStepFlags"
              version="3.12"
              glib:type-name="EBookCursorStepFlags"
              glib:get-type="e_book_cursor_step_flags_get_type"
              c:type="EBookCursorStepFlags">
      <doc xml:space="preserve">Defines the behaviour of e_book_client_cursor_step().</doc>
      <member name="move"
              value="1"
              c:identifier="E_BOOK_CURSOR_STEP_MOVE"
              glib:nick="move">
        <doc xml:space="preserve">The cursor position should be modified while stepping</doc>
      </member>
      <member name="fetch"
              value="2"
              c:identifier="E_BOOK_CURSOR_STEP_FETCH"
              glib:nick="fetch">
        <doc xml:space="preserve">Traversed contacts should be listed and returned while stepping.</doc>
      </member>
    </bitfield>
    <enumeration name="BookIndexType"
                 glib:type-name="EBookIndexType"
                 glib:get-type="e_book_index_type_get_type"
                 c:type="EBookIndexType">
      <doc xml:space="preserve">The type of index defined by e_source_backend_summary_setup_set_indexed_fields()</doc>
      <member name="prefix"
              value="0"
              c:identifier="E_BOOK_INDEX_PREFIX"
              glib:nick="prefix">
        <doc xml:space="preserve">An index suitable for searching contacts with a prefix pattern</doc>
      </member>
      <member name="suffix"
              value="1"
              c:identifier="E_BOOK_INDEX_SUFFIX"
              glib:nick="suffix">
        <doc xml:space="preserve">An index suitable for searching contacts with a suffix pattern</doc>
      </member>
      <member name="phone"
              value="2"
              c:identifier="E_BOOK_INDEX_PHONE"
              glib:nick="phone">
        <doc xml:space="preserve">An index suitable for searching contacts for phone numbers.
&lt;note&gt;&lt;para&gt;Phone numbers must be convertible into FQTN according to E.164 to be
stored in this index. The number "+9999999" for instance won't be stored because
the country calling code "+999" currently is not assigned.&lt;/para&gt;&lt;/note&gt;</doc>
      </member>
      <member name="sort_key"
              value="3"
              c:identifier="E_BOOK_INDEX_SORT_KEY"
              glib:nick="sort-key">
        <doc xml:space="preserve">Indicates that a given #EContactField should be usable as a sort key.</doc>
      </member>
    </enumeration>
    <record name="BookQuery"
            c:type="EBookQuery"
            glib:type-name="EBookQuery"
            glib:get-type="e_book_query_get_type"
            c:symbol-prefix="book_query">
      <method name="andv" c:identifier="e_book_query_andv" introspectable="0">
        <doc xml:space="preserve">Creates a new #EBookQuery which is the logical AND of the queries specified.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #EBookQuery</doc>
          <type name="BookQuery" c:type="EBookQuery*"/>
        </return-value>
        <parameters>
          <instance-parameter name="q" transfer-ownership="none">
            <doc xml:space="preserve">first #EBookQuery</doc>
            <type name="BookQuery" c:type="EBookQuery*"/>
          </instance-parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve">%NULL terminated list of #EBookQuery pointers</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="e_book_query_copy">
        <doc xml:space="preserve">Creates a copy of @q.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #EBookQuery identical to @q.</doc>
          <type name="BookQuery" c:type="EBookQuery*"/>
        </return-value>
        <parameters>
          <instance-parameter name="q" transfer-ownership="none">
            <doc xml:space="preserve">an #EBookQuery</doc>
            <type name="BookQuery" c:type="EBookQuery*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="not" c:identifier="e_book_query_not">
        <doc xml:space="preserve">Creates a new #EBookQuery which is the opposite of #q.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the new #EBookQuery</doc>
          <type name="BookQuery" c:type="EBookQuery*"/>
        </return-value>
        <parameters>
          <instance-parameter name="q" transfer-ownership="none">
            <doc xml:space="preserve">an #EBookQuery</doc>
            <type name="BookQuery" c:type="EBookQuery*"/>
          </instance-parameter>
          <parameter name="unref" transfer-ownership="none">
            <doc xml:space="preserve">if %TRUE, the new query takes ownership of the existing queries</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="orv" c:identifier="e_book_query_orv" introspectable="0">
        <doc xml:space="preserve">Creates a new #EBookQuery which is the logical OR of the queries specified.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #EBookQuery</doc>
          <type name="BookQuery" c:type="EBookQuery*"/>
        </return-value>
        <parameters>
          <instance-parameter name="q" transfer-ownership="none">
            <doc xml:space="preserve">first #EBookQuery</doc>
            <type name="BookQuery" c:type="EBookQuery*"/>
          </instance-parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve">%NULL terminated list of #EBookQuery pointers</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="e_book_query_ref">
        <doc xml:space="preserve">Increment the reference count on @q.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@q</doc>
          <type name="BookQuery" c:type="EBookQuery*"/>
        </return-value>
        <parameters>
          <instance-parameter name="q" transfer-ownership="none">
            <doc xml:space="preserve">a #EBookQuery</doc>
            <type name="BookQuery" c:type="EBookQuery*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="to_string" c:identifier="e_book_query_to_string">
        <doc xml:space="preserve">Return the string representation of @q.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The string form of the query. This string should be freed when
finished with.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="q" transfer-ownership="none">
            <doc xml:space="preserve">an #EBookQuery</doc>
            <type name="BookQuery" c:type="EBookQuery*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="e_book_query_unref">
        <doc xml:space="preserve">Decrement the reference count on @q. When the reference count reaches 0, @q
will be freed and any child queries will have e_book_query_unref() called.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="q" transfer-ownership="none">
            <doc xml:space="preserve">an #EBookQuery</doc>
            <type name="BookQuery" c:type="EBookQuery*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="and" c:identifier="e_book_query_and">
        <doc xml:space="preserve">Create a new #EBookQuery which is the logical AND of the queries in #qs.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #EBookQuery</doc>
          <type name="BookQuery" c:type="EBookQuery*"/>
        </return-value>
        <parameters>
          <parameter name="nqs" transfer-ownership="none">
            <doc xml:space="preserve">the number of queries to AND</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="qs" transfer-ownership="none">
            <doc xml:space="preserve">pointer to an array of #EBookQuery items</doc>
            <type name="BookQuery" c:type="EBookQuery**"/>
          </parameter>
          <parameter name="unref" transfer-ownership="none">
            <doc xml:space="preserve">if %TRUE, the new query takes ownership of the existing queries</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="any_field_contains"
                c:identifier="e_book_query_any_field_contains">
        <doc xml:space="preserve">Creates a new #EBookQuery which tests if any field contains @value.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the new #EBookQuery</doc>
          <type name="BookQuery" c:type="EBookQuery*"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">a value</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="field_exists" c:identifier="e_book_query_field_exists">
        <doc xml:space="preserve">Creates a new #EBookQuery which tests if the field @field exists.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the new #EBookQuery</doc>
          <type name="BookQuery" c:type="EBookQuery*"/>
        </return-value>
        <parameters>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">a #EContactField</doc>
            <type name="ContactField" c:type="EContactField"/>
          </parameter>
        </parameters>
      </function>
      <function name="field_test" c:identifier="e_book_query_field_test">
        <doc xml:space="preserve">Creates a new #EBookQuery which tests @field for @value using the test @test.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the new #EBookQuery</doc>
          <type name="BookQuery" c:type="EBookQuery*"/>
        </return-value>
        <parameters>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">an #EContactField to test</doc>
            <type name="ContactField" c:type="EContactField"/>
          </parameter>
          <parameter name="test" transfer-ownership="none">
            <doc xml:space="preserve">the test to apply</doc>
            <type name="BookQueryTest" c:type="EBookQueryTest"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">the value to test for</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="from_string" c:identifier="e_book_query_from_string">
        <doc xml:space="preserve">Parse @query_string and return a new #EBookQuery representing it.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the new #EBookQuery.</doc>
          <type name="BookQuery" c:type="EBookQuery*"/>
        </return-value>
        <parameters>
          <parameter name="query_string" transfer-ownership="none">
            <doc xml:space="preserve">the query</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="or" c:identifier="e_book_query_or">
        <doc xml:space="preserve">Creates a new #EBookQuery which is the logical OR of the queries in #qs.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #EBookQuery</doc>
          <type name="BookQuery" c:type="EBookQuery*"/>
        </return-value>
        <parameters>
          <parameter name="nqs" transfer-ownership="none">
            <doc xml:space="preserve">the number of queries to OR</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="qs" transfer-ownership="none">
            <doc xml:space="preserve">pointer to an array of #EBookQuery items</doc>
            <type name="BookQuery" c:type="EBookQuery**"/>
          </parameter>
          <parameter name="unref" transfer-ownership="none">
            <doc xml:space="preserve">if %TRUE, the new query takes ownership of the existing queries</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="vcard_field_exists"
                c:identifier="e_book_query_vcard_field_exists">
        <doc xml:space="preserve">Creates a new #EBookQuery which tests if the field @field exists. @field
should be a vCard field name, such as #FN or #X-MSN.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the new #EBookQuery</doc>
          <type name="BookQuery" c:type="EBookQuery*"/>
        </return-value>
        <parameters>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">a field name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="vcard_field_test"
                c:identifier="e_book_query_vcard_field_test"
                version="2.22">
        <doc xml:space="preserve">Creates a new #EBookQuery which tests @field for @value using the test @test.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the new #EBookQuery</doc>
          <type name="BookQuery" c:type="EBookQuery*"/>
        </return-value>
        <parameters>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve">a EVCard field name to test</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="test" transfer-ownership="none">
            <doc xml:space="preserve">the test to apply</doc>
            <type name="BookQueryTest" c:type="EBookQueryTest"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">the value to test for</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <enumeration name="BookQueryTest" c:type="EBookQueryTest">
      <doc xml:space="preserve">The kind of test a query created by e_book_query_field_test() shall perform.

See also: e_phone_number_compare_strings().</doc>
      <member name="is" value="0" c:identifier="E_BOOK_QUERY_IS">
        <doc xml:space="preserve">look for exact match of the supplied test value</doc>
      </member>
      <member name="contains" value="1" c:identifier="E_BOOK_QUERY_CONTAINS">
        <doc xml:space="preserve">check if a field contains the test value</doc>
      </member>
      <member name="begins_with"
              value="2"
              c:identifier="E_BOOK_QUERY_BEGINS_WITH">
        <doc xml:space="preserve">check if a field starts with the test value</doc>
      </member>
      <member name="ends_with" value="3" c:identifier="E_BOOK_QUERY_ENDS_WITH">
        <doc xml:space="preserve">check if a field ends with the test value</doc>
      </member>
      <member name="equals_phone_number"
              value="4"
              c:identifier="E_BOOK_QUERY_EQUALS_PHONE_NUMBER">
        <doc xml:space="preserve">check if a field matches with a value tested
using e_phone_number_compare_strings(), the match must be of strenth %E_PHONE_NUMBER_MATCH_EXACT
for this query to return any matches.</doc>
      </member>
      <member name="equals_national_phone_number"
              value="5"
              c:identifier="E_BOOK_QUERY_EQUALS_NATIONAL_PHONE_NUMBER">
        <doc xml:space="preserve">check if a field matches with a value tested
using e_phone_number_compare_strings(), the match must be at least of strength %E_PHONE_NUMBER_MATCH_NATIONAL
for this query to return any matches.</doc>
      </member>
      <member name="equals_short_phone_number"
              value="6"
              c:identifier="E_BOOK_QUERY_EQUALS_SHORT_PHONE_NUMBER">
        <doc xml:space="preserve">check if a field matches with a value tested
using e_phone_number_compare_strings(), the match must be at least of strength %E_PHONE_NUMBER_MATCH_SHORT
for this query to return any matches.</doc>
      </member>
      <member name="regex_normal"
              value="7"
              c:identifier="E_BOOK_QUERY_REGEX_NORMAL">
        <doc xml:space="preserve">A regular expression query against contact data normalized with e_util_utf8_normalize(),
the normalized data is lower case with any accents removed.</doc>
      </member>
      <member name="regex_raw" value="8" c:identifier="E_BOOK_QUERY_REGEX_RAW">
        <doc xml:space="preserve">A regular expression query against raw contact data, this is usually slower than
a %E_BOOK_QUERY_REGEX_NORMAL as it implies that #EVCards must be parsed in order to get the raw data
for comparison.</doc>
      </member>
      <member name="last" value="9" c:identifier="E_BOOK_QUERY_LAST">
        <doc xml:space="preserve">End marker for the #EBookQueryTest enumeration, not a valid query test.</doc>
      </member>
    </enumeration>
    <enumeration name="BookViewStatus"
                 deprecated="1"
                 deprecated-version="3.2"
                 glib:type-name="EBookViewStatus"
                 glib:get-type="e_book_view_status_get_type"
                 c:type="EBookViewStatus">
      <doc xml:space="preserve">Status messages used in notifications in the deprecated #EBookView class</doc>
      <doc-deprecated xml:space="preserve">Use #EBookClientView instead.</doc-deprecated>
      <member name="status_ok"
              value="0"
              c:identifier="E_BOOK_VIEW_STATUS_OK"
              glib:nick="status-ok">
        <doc xml:space="preserve">Ok</doc>
      </member>
      <member name="status_time_limit_exceeded"
              value="1"
              c:identifier="E_BOOK_VIEW_STATUS_TIME_LIMIT_EXCEEDED"
              glib:nick="status-time-limit-exceeded">
        <doc xml:space="preserve">Time limit exceeded</doc>
      </member>
      <member name="status_size_limit_exceeded"
              value="2"
              c:identifier="E_BOOK_VIEW_STATUS_SIZE_LIMIT_EXCEEDED"
              glib:nick="status-size-limit-exceeded">
        <doc xml:space="preserve">Size limit exceeded</doc>
      </member>
      <member name="error_invalid_query"
              value="3"
              c:identifier="E_BOOK_VIEW_ERROR_INVALID_QUERY"
              glib:nick="error-invalid-query">
        <doc xml:space="preserve">Invalid search expression</doc>
      </member>
      <member name="error_query_refused"
              value="4"
              c:identifier="E_BOOK_VIEW_ERROR_QUERY_REFUSED"
              glib:nick="error-query-refused">
        <doc xml:space="preserve">Search expression refused</doc>
      </member>
      <member name="error_other_error"
              value="5"
              c:identifier="E_BOOK_VIEW_ERROR_OTHER_ERROR"
              glib:nick="error-other-error">
        <doc xml:space="preserve">Another error occurred</doc>
      </member>
    </enumeration>
    <class name="Contact"
           c:symbol-prefix="contact"
           c:type="EContact"
           parent="VCard"
           glib:type-name="EContact"
           glib:get-type="e_contact_get_type"
           glib:type-struct="ContactClass">
      <constructor name="new" c:identifier="e_contact_new">
        <doc xml:space="preserve">Creates a new, blank #EContact.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #EContact.</doc>
          <type name="Contact" c:type="EContact*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_vcard"
                   c:identifier="e_contact_new_from_vcard">
        <doc xml:space="preserve">Creates a new #EContact based on a vcard.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #EContact.</doc>
          <type name="Contact" c:type="EContact*"/>
        </return-value>
        <parameters>
          <parameter name="vcard" transfer-ownership="none">
            <doc xml:space="preserve">a string representing a vcard</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_vcard_with_uid"
                   c:identifier="e_contact_new_from_vcard_with_uid"
                   version="3.4">
        <doc xml:space="preserve">Creates a new #EContact based on a vcard and a predefined UID.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #EContact.</doc>
          <type name="Contact" c:type="EContact*"/>
        </return-value>
        <parameters>
          <parameter name="vcard" transfer-ownership="none">
            <doc xml:space="preserve">a string representing a vcard</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:space="preserve">a contact UID</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="field_id" c:identifier="e_contact_field_id">
        <doc xml:space="preserve">Gets the #EContactField corresponding to the @field_name.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #EContactField corresponding to @field_name, or %0 if it doesn't exist.</doc>
          <type name="ContactField" c:type="EContactField"/>
        </return-value>
        <parameters>
          <parameter name="field_name" transfer-ownership="none">
            <doc xml:space="preserve">a string representing a contact field</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="field_id_from_vcard"
                c:identifier="e_contact_field_id_from_vcard"
                version="2.26">
        <doc xml:space="preserve">Gets the #EContactField corresponding to the @vcard_field.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #EContactField corresponding to @vcard_field, or %0 if it doesn't exist.</doc>
          <type name="ContactField" c:type="EContactField"/>
        </return-value>
        <parameters>
          <parameter name="vcard_field" transfer-ownership="none">
            <doc xml:space="preserve">a string representing a vCard field</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="field_is_string"
                c:identifier="e_contact_field_is_string"
                version="3.16">
        <doc xml:space="preserve">Returns whether the @field_id is of a string type,
thus it can be used with e_contact_get_const().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Whether the @field_id is of a string type.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="field_id" transfer-ownership="none">
            <doc xml:space="preserve">an #EContactField</doc>
            <type name="ContactField" c:type="EContactField"/>
          </parameter>
        </parameters>
      </function>
      <function name="field_name" c:identifier="e_contact_field_name">
        <doc xml:space="preserve">Gets the string representation of @field_id.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The string representation of @field_id, or %NULL if it doesn't exist.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="field_id" transfer-ownership="none">
            <doc xml:space="preserve">an #EContactField</doc>
            <type name="ContactField" c:type="EContactField"/>
          </parameter>
        </parameters>
      </function>
      <function name="field_type"
                c:identifier="e_contact_field_type"
                version="3.8">
        <doc xml:space="preserve">Gets the #GType used for this contact field, this indicates
what kind of value can be passed to e_contact_set().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The #GType used for @field_id, or %G_TYPE_INVALID if it doesn't exist.</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <parameter name="field_id" transfer-ownership="none">
            <doc xml:space="preserve">an #EContactField</doc>
            <type name="ContactField" c:type="EContactField"/>
          </parameter>
        </parameters>
      </function>
      <function name="pretty_name" c:identifier="e_contact_pretty_name">
        <doc xml:space="preserve">Gets a human-readable, translated string representation
of @field_id.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The human-readable representation of @field_id, or %NULL if it doesn't exist.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="field_id" transfer-ownership="none">
            <doc xml:space="preserve">an #EContactField</doc>
            <type name="ContactField" c:type="EContactField"/>
          </parameter>
        </parameters>
      </function>
      <function name="vcard_attribute"
                c:identifier="e_contact_vcard_attribute">
        <doc xml:space="preserve">Gets the vcard attribute corresponding to @field_id, as a string.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The vcard attribute corresponding to @field_id, or %NULL if it doesn't exist.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="field_id" transfer-ownership="none">
            <doc xml:space="preserve">an #EContactField</doc>
            <type name="ContactField" c:type="EContactField"/>
          </parameter>
        </parameters>
      </function>
      <method name="duplicate" c:identifier="e_contact_duplicate">
        <doc xml:space="preserve">Creates a copy of @contact.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #EContact identical to @contact.</doc>
          <type name="Contact" c:type="EContact*"/>
        </return-value>
        <parameters>
          <instance-parameter name="contact" transfer-ownership="none">
            <doc xml:space="preserve">an #EContact</doc>
            <type name="Contact" c:type="EContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get" c:identifier="e_contact_get">
        <doc xml:space="preserve">Gets the value of @contact's field specified by @field_id.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">Depends on the field's type, owned by the caller. This may be %NULL if the field isn't set.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="contact" transfer-ownership="none">
            <doc xml:space="preserve">an #EContact</doc>
            <type name="Contact" c:type="EContact*"/>
          </instance-parameter>
          <parameter name="field_id" transfer-ownership="none">
            <doc xml:space="preserve">an #EContactField</doc>
            <type name="ContactField" c:type="EContactField"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_attributes" c:identifier="e_contact_get_attributes">
        <doc xml:space="preserve">Gets a list of the vcard attributes for @contact's @field_id.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #GList of pointers
to #EVCardAttribute, owned by the caller.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="VCardAttribute"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="contact" transfer-ownership="none">
            <doc xml:space="preserve">an #EContact</doc>
            <type name="Contact" c:type="EContact*"/>
          </instance-parameter>
          <parameter name="field_id" transfer-ownership="none">
            <doc xml:space="preserve">an #EContactField</doc>
            <type name="ContactField" c:type="EContactField"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_attributes_set"
              c:identifier="e_contact_get_attributes_set"
              version="3.16">
        <doc xml:space="preserve">Gets a list of the vcard attributes for @contact's @field_ids.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #GList of pointers
to #EVCardAttribute, owned by the caller.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="VCardAttribute"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="contact" transfer-ownership="none">
            <doc xml:space="preserve">an #EContact</doc>
            <type name="Contact" c:type="EContact*"/>
          </instance-parameter>
          <parameter name="field_ids" transfer-ownership="none">
            <doc xml:space="preserve">an array of #EContactField</doc>
            <type name="ContactField" c:type="const EContactField"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve">number of elements in field_ids</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_const" c:identifier="e_contact_get_const">
        <doc xml:space="preserve">Gets the value of @contact's field specified by @field_id, caching
the result so it can be freed later. Use e_contact_field_is_string()
to check whether the field can be used here.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">Depends on the field's type, owned by the
#EContact.</doc>
          <type name="gpointer" c:type="gconstpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="contact" transfer-ownership="none">
            <doc xml:space="preserve">an #EContact</doc>
            <type name="Contact" c:type="EContact*"/>
          </instance-parameter>
          <parameter name="field_id" transfer-ownership="none">
            <doc xml:space="preserve">an #EContactField</doc>
            <type name="ContactField" c:type="EContactField"/>
          </parameter>
        </parameters>
      </method>
      <method name="inline_local_photos"
              c:identifier="e_contact_inline_local_photos"
              version="3.4"
              throws="1">
        <doc xml:space="preserve">Tries to modify any #EContactPhoto fields which are
stored on the local file system as type %E_CONTACT_PHOTO_TYPE_URI
to be inlined and stored as %E_CONTACT_PHOTO_TYPE_INLINED instead.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if there were no errors, upon error %FALSE is returned
   and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="contact" transfer-ownership="none">
            <doc xml:space="preserve">an #EContact</doc>
            <type name="Contact" c:type="EContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set" c:identifier="e_contact_set">
        <doc xml:space="preserve">Sets the value of @contact's field specified by @field_id to @value.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="contact" transfer-ownership="none">
            <doc xml:space="preserve">an #EContact</doc>
            <type name="Contact" c:type="EContact*"/>
          </instance-parameter>
          <parameter name="field_id" transfer-ownership="none">
            <doc xml:space="preserve">an #EContactField</doc>
            <type name="ContactField" c:type="EContactField"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a value whose type depends on the @field_id</doc>
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_attributes" c:identifier="e_contact_set_attributes">
        <doc xml:space="preserve">Sets the vcard attributes for @contact's @field_id.
Attributes are added to the contact in the same order as they are in @attributes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="contact" transfer-ownership="none">
            <doc xml:space="preserve">an #EContact</doc>
            <type name="Contact" c:type="EContact*"/>
          </instance-parameter>
          <parameter name="field_id" transfer-ownership="none">
            <doc xml:space="preserve">an #EContactField</doc>
            <type name="ContactField" c:type="EContactField"/>
          </parameter>
          <parameter name="attributes" transfer-ownership="none">
            <doc xml:space="preserve">a #GList of pointers to #EVCardAttribute</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="VCardAttribute"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <property name="Rev" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="address" writable="1" transfer-ownership="none">
        <type name="ContactAttrList"/>
      </property>
      <property name="address-home" writable="1" transfer-ownership="none">
        <type name="ContactAddress"/>
      </property>
      <property name="address-label-home"
                writable="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="address-label-other"
                writable="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="address-label-work"
                writable="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="address-other" writable="1" transfer-ownership="none">
        <type name="ContactAddress"/>
      </property>
      <property name="address-work" writable="1" transfer-ownership="none">
        <type name="ContactAddress"/>
      </property>
      <property name="anniversary" writable="1" transfer-ownership="none">
        <type name="ContactDate"/>
      </property>
      <property name="assistant" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="assistant-phone" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="birth-date" writable="1" transfer-ownership="none">
        <type name="ContactDate"/>
      </property>
      <property name="blog-url" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="book-uid" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="business-fax" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="business-phone" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="business-phone-2" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="callback-phone" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="caluri" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="car-phone" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="categories" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="category-list" writable="1" transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="company-phone" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="email" writable="1" transfer-ownership="none">
        <type name="ContactAttrList"/>
      </property>
      <property name="email-1" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="email-2" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="email-3" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="email-4" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="family-name" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="fburl" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="file-as" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="full-name" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="geo" writable="1" transfer-ownership="none">
        <type name="ContactGeo"/>
      </property>
      <property name="given-name" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="home-fax" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="home-phone" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="home-phone-2" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="homepage-url" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="icscalendar" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-aim" writable="1" transfer-ownership="none">
        <type name="ContactAttrList"/>
      </property>
      <property name="im-aim-home-1" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-aim-home-2" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-aim-home-3" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-aim-work-1" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-aim-work-2" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-aim-work-3" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-gadugadu" writable="1" transfer-ownership="none">
        <type name="ContactAttrList"/>
      </property>
      <property name="im-gadugadu-home-1"
                writable="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-gadugadu-home-2"
                writable="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-gadugadu-home-3"
                writable="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-gadugadu-work-1"
                writable="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-gadugadu-work-2"
                writable="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-gadugadu-work-3"
                writable="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-google-talk" writable="1" transfer-ownership="none">
        <type name="ContactAttrList"/>
      </property>
      <property name="im-google-talk-home-1"
                writable="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-google-talk-home-2"
                writable="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-google-talk-home-3"
                writable="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-google-talk-work-1"
                writable="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-google-talk-work-2"
                writable="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-google-talk-work-3"
                writable="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-groupwise" writable="1" transfer-ownership="none">
        <type name="ContactAttrList"/>
      </property>
      <property name="im-groupwise-home-1"
                writable="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-groupwise-home-2"
                writable="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-groupwise-home-3"
                writable="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-groupwise-work-1"
                writable="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-groupwise-work-2"
                writable="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-groupwise-work-3"
                writable="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-icq" writable="1" transfer-ownership="none">
        <type name="ContactAttrList"/>
      </property>
      <property name="im-icq-home-1" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-icq-home-2" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-icq-home-3" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-icq-work-1" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-icq-work-2" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-icq-work-3" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-jabber" writable="1" transfer-ownership="none">
        <type name="ContactAttrList"/>
      </property>
      <property name="im-jabber-home-1" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-jabber-home-2" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-jabber-home-3" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-jabber-work-1" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-jabber-work-2" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-jabber-work-3" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-msn" writable="1" transfer-ownership="none">
        <type name="ContactAttrList"/>
      </property>
      <property name="im-msn-home-1" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-msn-home-2" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-msn-home-3" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-msn-work-1" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-msn-work-2" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-msn-work-3" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-skype" writable="1" transfer-ownership="none">
        <type name="ContactAttrList"/>
      </property>
      <property name="im-skype-home-1" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-skype-home-2" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-skype-home-3" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-skype-work-1" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-skype-work-2" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-skype-work-3" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-twitter" writable="1" transfer-ownership="none">
        <type name="ContactAttrList"/>
      </property>
      <property name="im-yahoo" writable="1" transfer-ownership="none">
        <type name="ContactAttrList"/>
      </property>
      <property name="im-yahoo-home-1" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-yahoo-home-2" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-yahoo-home-3" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-yahoo-work-1" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-yahoo-work-2" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="im-yahoo-work-3" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="isdn-phone" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="list" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="list-show-addresses"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="logo" writable="1" transfer-ownership="none">
        <type name="ContactPhoto"/>
      </property>
      <property name="mailer" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="manager" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="mobile-phone" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name" writable="1" transfer-ownership="none">
        <type name="ContactName"/>
      </property>
      <property name="name-or-org" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="nickname" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="note" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="office" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="org" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="org-unit" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="other-fax" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="other-phone" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="pager" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="pgpCert" writable="1" transfer-ownership="none">
        <type name="ContactCert"/>
      </property>
      <property name="phone" writable="1" transfer-ownership="none">
        <type name="ContactAttrList"/>
      </property>
      <property name="photo" writable="1" transfer-ownership="none">
        <type name="ContactPhoto"/>
      </property>
      <property name="primary-phone" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="radio" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="role" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="sip" writable="1" transfer-ownership="none">
        <type name="ContactAttrList"/>
      </property>
      <property name="spouse" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="telex" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="tty" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="video-url" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="wants-html" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="x509Cert" writable="1" transfer-ownership="none">
        <type name="ContactCert"/>
      </property>
      <field name="parent">
        <type name="VCard" c:type="EVCard"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ContactPrivate" c:type="EContactPrivate*"/>
      </field>
    </class>
    <record name="ContactAddress"
            c:type="EContactAddress"
            glib:type-name="EContactAddress"
            glib:get-type="e_contact_address_get_type"
            c:symbol-prefix="contact_address">
      <field name="address_format" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="po" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="ext" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="street" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="locality" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="region" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="code" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="country" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <constructor name="new"
                   c:identifier="e_contact_address_new"
                   version="3.2">
        <doc xml:space="preserve">Creates a new #EContactAddress struct.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #EContactAddress struct.</doc>
          <type name="ContactAddress" c:type="EContactAddress*"/>
        </return-value>
      </constructor>
      <method name="free" c:identifier="e_contact_address_free">
        <doc xml:space="preserve">Frees the @address struct and its contents.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve">an #EContactAddress</doc>
            <type name="ContactAddress" c:type="EContactAddress*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <glib:boxed glib:name="ContactAttrList"
                c:symbol-prefix="contact_attr_list"
                glib:type-name="EContactAttrList"
                glib:get-type="e_contact_attr_list_get_type">
      <function name="copy"
                c:identifier="e_contact_attr_list_copy"
                version="3.8">
        <doc xml:space="preserve">Copies a list of allocated strings, specifically
for the #EContactAttrList boxed type used for multi valued
contact fields.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A copy of @list</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve">A #GList of strings</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="utf8"/>
            </type>
          </parameter>
        </parameters>
      </function>
      <function name="free"
                c:identifier="e_contact_attr_list_free"
                version="3.8">
        <doc xml:space="preserve">Frees a list of allocated strings, specifically
for the #EContactAttrList boxed type used for multi valued
contact fields.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve">A #GList of strings</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="utf8"/>
            </type>
          </parameter>
        </parameters>
      </function>
    </glib:boxed>
    <record name="ContactCert"
            c:type="EContactCert"
            glib:type-name="EContactCert"
            glib:get-type="e_contact_cert_get_type"
            c:symbol-prefix="contact_cert">
      <field name="length" writable="1">
        <type name="gsize" c:type="gsize"/>
      </field>
      <field name="data" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <constructor name="new" c:identifier="e_contact_cert_new" version="3.8">
        <doc xml:space="preserve">Creates an #EContactCert struct with all values set to 0.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #EContactCert struct.</doc>
          <type name="ContactCert" c:type="EContactCert*"/>
        </return-value>
      </constructor>
      <method name="free" c:identifier="e_contact_cert_free">
        <doc xml:space="preserve">Frees the @cert struct and its contents.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="cert" transfer-ownership="none">
            <doc xml:space="preserve">an #EContactCert</doc>
            <type name="ContactCert" c:type="EContactCert*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <record name="ContactClass"
            c:type="EContactClass"
            glib:is-gtype-struct-for="Contact">
      <field name="parent_class">
        <type name="VCardClass" c:type="EVCardClass"/>
      </field>
      <field name="_ebook_reserved0" introspectable="0">
        <callback name="_ebook_reserved0">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_ebook_reserved1" introspectable="0">
        <callback name="_ebook_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_ebook_reserved2" introspectable="0">
        <callback name="_ebook_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_ebook_reserved3" introspectable="0">
        <callback name="_ebook_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_ebook_reserved4" introspectable="0">
        <callback name="_ebook_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="ContactDate"
            c:type="EContactDate"
            glib:type-name="EContactDate"
            glib:get-type="e_contact_date_get_type"
            c:symbol-prefix="contact_date">
      <field name="year" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="month" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="day" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <constructor name="new" c:identifier="e_contact_date_new">
        <doc xml:space="preserve">Creates a new #EContactDate struct.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #EContactDate struct.</doc>
          <type name="ContactDate" c:type="EContactDate*"/>
        </return-value>
      </constructor>
      <method name="equal" c:identifier="e_contact_date_equal">
        <doc xml:space="preserve">Checks if @dt1 and @dt2 are the same date.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @dt1 and @dt2 are equal, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dt1" transfer-ownership="none">
            <doc xml:space="preserve">an #EContactDate</doc>
            <type name="ContactDate" c:type="EContactDate*"/>
          </instance-parameter>
          <parameter name="dt2" transfer-ownership="none">
            <doc xml:space="preserve">an #EContactDate</doc>
            <type name="ContactDate" c:type="EContactDate*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="e_contact_date_free">
        <doc xml:space="preserve">Frees the @date struct and its contents.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="date" transfer-ownership="none">
            <doc xml:space="preserve">an #EContactDate</doc>
            <type name="ContactDate" c:type="EContactDate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="to_string" c:identifier="e_contact_date_to_string">
        <doc xml:space="preserve">Generates a date string in the format YYYY-MM-DD based
on the values of @dt.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A date string, owned by the caller.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dt" transfer-ownership="none">
            <doc xml:space="preserve">an #EContactDate</doc>
            <type name="ContactDate" c:type="EContactDate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="from_string" c:identifier="e_contact_date_from_string">
        <doc xml:space="preserve">Creates a new #EContactDate based on @str.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #EContactDate struct.</doc>
          <type name="ContactDate" c:type="EContactDate*"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve">a date string in the format YYYY-MM-DD or YYYYMMDD</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <enumeration name="ContactField" c:type="EContactField">
      <member name="uid" value="1" c:identifier="E_CONTACT_UID">
      </member>
      <member name="file_as" value="2" c:identifier="E_CONTACT_FILE_AS">
      </member>
      <member name="book_uid" value="3" c:identifier="E_CONTACT_BOOK_UID">
      </member>
      <member name="full_name" value="4" c:identifier="E_CONTACT_FULL_NAME">
      </member>
      <member name="given_name" value="5" c:identifier="E_CONTACT_GIVEN_NAME">
      </member>
      <member name="family_name"
              value="6"
              c:identifier="E_CONTACT_FAMILY_NAME">
      </member>
      <member name="nickname" value="7" c:identifier="E_CONTACT_NICKNAME">
      </member>
      <member name="email_1" value="8" c:identifier="E_CONTACT_EMAIL_1">
      </member>
      <member name="email_2" value="9" c:identifier="E_CONTACT_EMAIL_2">
      </member>
      <member name="email_3" value="10" c:identifier="E_CONTACT_EMAIL_3">
      </member>
      <member name="email_4" value="11" c:identifier="E_CONTACT_EMAIL_4">
      </member>
      <member name="mailer" value="12" c:identifier="E_CONTACT_MAILER">
      </member>
      <member name="address_label_home"
              value="13"
              c:identifier="E_CONTACT_ADDRESS_LABEL_HOME">
      </member>
      <member name="address_label_work"
              value="14"
              c:identifier="E_CONTACT_ADDRESS_LABEL_WORK">
      </member>
      <member name="address_label_other"
              value="15"
              c:identifier="E_CONTACT_ADDRESS_LABEL_OTHER">
      </member>
      <member name="phone_assistant"
              value="16"
              c:identifier="E_CONTACT_PHONE_ASSISTANT">
      </member>
      <member name="phone_business"
              value="17"
              c:identifier="E_CONTACT_PHONE_BUSINESS">
      </member>
      <member name="phone_business_2"
              value="18"
              c:identifier="E_CONTACT_PHONE_BUSINESS_2">
      </member>
      <member name="phone_business_fax"
              value="19"
              c:identifier="E_CONTACT_PHONE_BUSINESS_FAX">
      </member>
      <member name="phone_callback"
              value="20"
              c:identifier="E_CONTACT_PHONE_CALLBACK">
      </member>
      <member name="phone_car" value="21" c:identifier="E_CONTACT_PHONE_CAR">
      </member>
      <member name="phone_company"
              value="22"
              c:identifier="E_CONTACT_PHONE_COMPANY">
      </member>
      <member name="phone_home" value="23" c:identifier="E_CONTACT_PHONE_HOME">
      </member>
      <member name="phone_home_2"
              value="24"
              c:identifier="E_CONTACT_PHONE_HOME_2">
      </member>
      <member name="phone_home_fax"
              value="25"
              c:identifier="E_CONTACT_PHONE_HOME_FAX">
      </member>
      <member name="phone_isdn" value="26" c:identifier="E_CONTACT_PHONE_ISDN">
      </member>
      <member name="phone_mobile"
              value="27"
              c:identifier="E_CONTACT_PHONE_MOBILE">
      </member>
      <member name="phone_other"
              value="28"
              c:identifier="E_CONTACT_PHONE_OTHER">
      </member>
      <member name="phone_other_fax"
              value="29"
              c:identifier="E_CONTACT_PHONE_OTHER_FAX">
      </member>
      <member name="phone_pager"
              value="30"
              c:identifier="E_CONTACT_PHONE_PAGER">
      </member>
      <member name="phone_primary"
              value="31"
              c:identifier="E_CONTACT_PHONE_PRIMARY">
      </member>
      <member name="phone_radio"
              value="32"
              c:identifier="E_CONTACT_PHONE_RADIO">
      </member>
      <member name="phone_telex"
              value="33"
              c:identifier="E_CONTACT_PHONE_TELEX">
      </member>
      <member name="phone_ttytdd"
              value="34"
              c:identifier="E_CONTACT_PHONE_TTYTDD">
      </member>
      <member name="org" value="35" c:identifier="E_CONTACT_ORG">
      </member>
      <member name="org_unit" value="36" c:identifier="E_CONTACT_ORG_UNIT">
      </member>
      <member name="office" value="37" c:identifier="E_CONTACT_OFFICE">
      </member>
      <member name="title" value="38" c:identifier="E_CONTACT_TITLE">
      </member>
      <member name="role" value="39" c:identifier="E_CONTACT_ROLE">
      </member>
      <member name="manager" value="40" c:identifier="E_CONTACT_MANAGER">
      </member>
      <member name="assistant" value="41" c:identifier="E_CONTACT_ASSISTANT">
      </member>
      <member name="homepage_url"
              value="42"
              c:identifier="E_CONTACT_HOMEPAGE_URL">
      </member>
      <member name="blog_url" value="43" c:identifier="E_CONTACT_BLOG_URL">
      </member>
      <member name="categories" value="44" c:identifier="E_CONTACT_CATEGORIES">
      </member>
      <member name="calendar_uri"
              value="45"
              c:identifier="E_CONTACT_CALENDAR_URI">
      </member>
      <member name="freebusy_url"
              value="46"
              c:identifier="E_CONTACT_FREEBUSY_URL">
      </member>
      <member name="ics_calendar"
              value="47"
              c:identifier="E_CONTACT_ICS_CALENDAR">
      </member>
      <member name="video_url" value="48" c:identifier="E_CONTACT_VIDEO_URL">
      </member>
      <member name="spouse" value="49" c:identifier="E_CONTACT_SPOUSE">
      </member>
      <member name="note" value="50" c:identifier="E_CONTACT_NOTE">
      </member>
      <member name="im_aim_home_1"
              value="51"
              c:identifier="E_CONTACT_IM_AIM_HOME_1">
      </member>
      <member name="im_aim_home_2"
              value="52"
              c:identifier="E_CONTACT_IM_AIM_HOME_2">
      </member>
      <member name="im_aim_home_3"
              value="53"
              c:identifier="E_CONTACT_IM_AIM_HOME_3">
      </member>
      <member name="im_aim_work_1"
              value="54"
              c:identifier="E_CONTACT_IM_AIM_WORK_1">
      </member>
      <member name="im_aim_work_2"
              value="55"
              c:identifier="E_CONTACT_IM_AIM_WORK_2">
      </member>
      <member name="im_aim_work_3"
              value="56"
              c:identifier="E_CONTACT_IM_AIM_WORK_3">
      </member>
      <member name="im_groupwise_home_1"
              value="57"
              c:identifier="E_CONTACT_IM_GROUPWISE_HOME_1">
      </member>
      <member name="im_groupwise_home_2"
              value="58"
              c:identifier="E_CONTACT_IM_GROUPWISE_HOME_2">
      </member>
      <member name="im_groupwise_home_3"
              value="59"
              c:identifier="E_CONTACT_IM_GROUPWISE_HOME_3">
      </member>
      <member name="im_groupwise_work_1"
              value="60"
              c:identifier="E_CONTACT_IM_GROUPWISE_WORK_1">
      </member>
      <member name="im_groupwise_work_2"
              value="61"
              c:identifier="E_CONTACT_IM_GROUPWISE_WORK_2">
      </member>
      <member name="im_groupwise_work_3"
              value="62"
              c:identifier="E_CONTACT_IM_GROUPWISE_WORK_3">
      </member>
      <member name="im_jabber_home_1"
              value="63"
              c:identifier="E_CONTACT_IM_JABBER_HOME_1">
      </member>
      <member name="im_jabber_home_2"
              value="64"
              c:identifier="E_CONTACT_IM_JABBER_HOME_2">
      </member>
      <member name="im_jabber_home_3"
              value="65"
              c:identifier="E_CONTACT_IM_JABBER_HOME_3">
      </member>
      <member name="im_jabber_work_1"
              value="66"
              c:identifier="E_CONTACT_IM_JABBER_WORK_1">
      </member>
      <member name="im_jabber_work_2"
              value="67"
              c:identifier="E_CONTACT_IM_JABBER_WORK_2">
      </member>
      <member name="im_jabber_work_3"
              value="68"
              c:identifier="E_CONTACT_IM_JABBER_WORK_3">
      </member>
      <member name="im_yahoo_home_1"
              value="69"
              c:identifier="E_CONTACT_IM_YAHOO_HOME_1">
      </member>
      <member name="im_yahoo_home_2"
              value="70"
              c:identifier="E_CONTACT_IM_YAHOO_HOME_2">
      </member>
      <member name="im_yahoo_home_3"
              value="71"
              c:identifier="E_CONTACT_IM_YAHOO_HOME_3">
      </member>
      <member name="im_yahoo_work_1"
              value="72"
              c:identifier="E_CONTACT_IM_YAHOO_WORK_1">
      </member>
      <member name="im_yahoo_work_2"
              value="73"
              c:identifier="E_CONTACT_IM_YAHOO_WORK_2">
      </member>
      <member name="im_yahoo_work_3"
              value="74"
              c:identifier="E_CONTACT_IM_YAHOO_WORK_3">
      </member>
      <member name="im_msn_home_1"
              value="75"
              c:identifier="E_CONTACT_IM_MSN_HOME_1">
      </member>
      <member name="im_msn_home_2"
              value="76"
              c:identifier="E_CONTACT_IM_MSN_HOME_2">
      </member>
      <member name="im_msn_home_3"
              value="77"
              c:identifier="E_CONTACT_IM_MSN_HOME_3">
      </member>
      <member name="im_msn_work_1"
              value="78"
              c:identifier="E_CONTACT_IM_MSN_WORK_1">
      </member>
      <member name="im_msn_work_2"
              value="79"
              c:identifier="E_CONTACT_IM_MSN_WORK_2">
      </member>
      <member name="im_msn_work_3"
              value="80"
              c:identifier="E_CONTACT_IM_MSN_WORK_3">
      </member>
      <member name="im_icq_home_1"
              value="81"
              c:identifier="E_CONTACT_IM_ICQ_HOME_1">
      </member>
      <member name="im_icq_home_2"
              value="82"
              c:identifier="E_CONTACT_IM_ICQ_HOME_2">
      </member>
      <member name="im_icq_home_3"
              value="83"
              c:identifier="E_CONTACT_IM_ICQ_HOME_3">
      </member>
      <member name="im_icq_work_1"
              value="84"
              c:identifier="E_CONTACT_IM_ICQ_WORK_1">
      </member>
      <member name="im_icq_work_2"
              value="85"
              c:identifier="E_CONTACT_IM_ICQ_WORK_2">
      </member>
      <member name="im_icq_work_3"
              value="86"
              c:identifier="E_CONTACT_IM_ICQ_WORK_3">
      </member>
      <member name="rev" value="87" c:identifier="E_CONTACT_REV">
      </member>
      <member name="name_or_org"
              value="88"
              c:identifier="E_CONTACT_NAME_OR_ORG">
      </member>
      <member name="address" value="89" c:identifier="E_CONTACT_ADDRESS">
      </member>
      <member name="address_home"
              value="90"
              c:identifier="E_CONTACT_ADDRESS_HOME">
      </member>
      <member name="address_work"
              value="91"
              c:identifier="E_CONTACT_ADDRESS_WORK">
      </member>
      <member name="address_other"
              value="92"
              c:identifier="E_CONTACT_ADDRESS_OTHER">
      </member>
      <member name="category_list"
              value="93"
              c:identifier="E_CONTACT_CATEGORY_LIST">
      </member>
      <member name="photo" value="94" c:identifier="E_CONTACT_PHOTO">
      </member>
      <member name="logo" value="95" c:identifier="E_CONTACT_LOGO">
      </member>
      <member name="name" value="96" c:identifier="E_CONTACT_NAME">
      </member>
      <member name="email" value="97" c:identifier="E_CONTACT_EMAIL">
      </member>
      <member name="im_aim" value="98" c:identifier="E_CONTACT_IM_AIM">
      </member>
      <member name="im_groupwise"
              value="99"
              c:identifier="E_CONTACT_IM_GROUPWISE">
      </member>
      <member name="im_jabber" value="100" c:identifier="E_CONTACT_IM_JABBER">
      </member>
      <member name="im_yahoo" value="101" c:identifier="E_CONTACT_IM_YAHOO">
      </member>
      <member name="im_msn" value="102" c:identifier="E_CONTACT_IM_MSN">
      </member>
      <member name="im_icq" value="103" c:identifier="E_CONTACT_IM_ICQ">
      </member>
      <member name="wants_html"
              value="104"
              c:identifier="E_CONTACT_WANTS_HTML">
      </member>
      <member name="is_list" value="105" c:identifier="E_CONTACT_IS_LIST">
      </member>
      <member name="list_show_addresses"
              value="106"
              c:identifier="E_CONTACT_LIST_SHOW_ADDRESSES">
      </member>
      <member name="birth_date"
              value="107"
              c:identifier="E_CONTACT_BIRTH_DATE">
      </member>
      <member name="anniversary"
              value="108"
              c:identifier="E_CONTACT_ANNIVERSARY">
      </member>
      <member name="x509_cert" value="109" c:identifier="E_CONTACT_X509_CERT">
      </member>
      <member name="pgp_cert" value="110" c:identifier="E_CONTACT_PGP_CERT">
      </member>
      <member name="im_gadugadu_home_1"
              value="111"
              c:identifier="E_CONTACT_IM_GADUGADU_HOME_1">
      </member>
      <member name="im_gadugadu_home_2"
              value="112"
              c:identifier="E_CONTACT_IM_GADUGADU_HOME_2">
      </member>
      <member name="im_gadugadu_home_3"
              value="113"
              c:identifier="E_CONTACT_IM_GADUGADU_HOME_3">
      </member>
      <member name="im_gadugadu_work_1"
              value="114"
              c:identifier="E_CONTACT_IM_GADUGADU_WORK_1">
      </member>
      <member name="im_gadugadu_work_2"
              value="115"
              c:identifier="E_CONTACT_IM_GADUGADU_WORK_2">
      </member>
      <member name="im_gadugadu_work_3"
              value="116"
              c:identifier="E_CONTACT_IM_GADUGADU_WORK_3">
      </member>
      <member name="im_gadugadu"
              value="117"
              c:identifier="E_CONTACT_IM_GADUGADU">
      </member>
      <member name="geo" value="118" c:identifier="E_CONTACT_GEO">
      </member>
      <member name="tel" value="119" c:identifier="E_CONTACT_TEL">
      </member>
      <member name="im_skype_home_1"
              value="120"
              c:identifier="E_CONTACT_IM_SKYPE_HOME_1">
      </member>
      <member name="im_skype_home_2"
              value="121"
              c:identifier="E_CONTACT_IM_SKYPE_HOME_2">
      </member>
      <member name="im_skype_home_3"
              value="122"
              c:identifier="E_CONTACT_IM_SKYPE_HOME_3">
      </member>
      <member name="im_skype_work_1"
              value="123"
              c:identifier="E_CONTACT_IM_SKYPE_WORK_1">
      </member>
      <member name="im_skype_work_2"
              value="124"
              c:identifier="E_CONTACT_IM_SKYPE_WORK_2">
      </member>
      <member name="im_skype_work_3"
              value="125"
              c:identifier="E_CONTACT_IM_SKYPE_WORK_3">
      </member>
      <member name="im_skype" value="126" c:identifier="E_CONTACT_IM_SKYPE">
      </member>
      <member name="sip" value="127" c:identifier="E_CONTACT_SIP">
      </member>
      <member name="im_google_talk_home_1"
              value="128"
              c:identifier="E_CONTACT_IM_GOOGLE_TALK_HOME_1">
      </member>
      <member name="im_google_talk_home_2"
              value="129"
              c:identifier="E_CONTACT_IM_GOOGLE_TALK_HOME_2">
      </member>
      <member name="im_google_talk_home_3"
              value="130"
              c:identifier="E_CONTACT_IM_GOOGLE_TALK_HOME_3">
      </member>
      <member name="im_google_talk_work_1"
              value="131"
              c:identifier="E_CONTACT_IM_GOOGLE_TALK_WORK_1">
      </member>
      <member name="im_google_talk_work_2"
              value="132"
              c:identifier="E_CONTACT_IM_GOOGLE_TALK_WORK_2">
      </member>
      <member name="im_google_talk_work_3"
              value="133"
              c:identifier="E_CONTACT_IM_GOOGLE_TALK_WORK_3">
      </member>
      <member name="im_google_talk"
              value="134"
              c:identifier="E_CONTACT_IM_GOOGLE_TALK">
      </member>
      <member name="im_twitter"
              value="135"
              c:identifier="E_CONTACT_IM_TWITTER">
      </member>
      <member name="field_last"
              value="136"
              c:identifier="E_CONTACT_FIELD_LAST">
      </member>
      <member name="field_first"
              value="1"
              c:identifier="E_CONTACT_FIELD_FIRST">
      </member>
      <member name="last_simple_string"
              value="88"
              c:identifier="E_CONTACT_LAST_SIMPLE_STRING">
      </member>
      <member name="first_phone_id"
              value="16"
              c:identifier="E_CONTACT_FIRST_PHONE_ID">
      </member>
      <member name="last_phone_id"
              value="34"
              c:identifier="E_CONTACT_LAST_PHONE_ID">
      </member>
      <member name="first_email_id"
              value="8"
              c:identifier="E_CONTACT_FIRST_EMAIL_ID">
      </member>
      <member name="last_email_id"
              value="11"
              c:identifier="E_CONTACT_LAST_EMAIL_ID">
      </member>
      <member name="first_address_id"
              value="90"
              c:identifier="E_CONTACT_FIRST_ADDRESS_ID">
      </member>
      <member name="last_address_id"
              value="92"
              c:identifier="E_CONTACT_LAST_ADDRESS_ID">
      </member>
      <member name="first_label_id"
              value="13"
              c:identifier="E_CONTACT_FIRST_LABEL_ID">
      </member>
      <member name="last_label_id"
              value="15"
              c:identifier="E_CONTACT_LAST_LABEL_ID">
      </member>
    </enumeration>
    <record name="ContactGeo"
            c:type="EContactGeo"
            version="1.12"
            glib:type-name="EContactGeo"
            glib:get-type="e_contact_geo_get_type"
            c:symbol-prefix="contact_geo">
      <field name="latitude" writable="1">
        <doc xml:space="preserve">latitude</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="longitude" writable="1">
        <doc xml:space="preserve">longitude</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <constructor name="new" c:identifier="e_contact_geo_new" version="3.8">
        <doc xml:space="preserve">Creates an #EContactGeo struct with all coordinates set to 0.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #EContactGeo struct.</doc>
          <type name="ContactGeo" c:type="EContactGeo*"/>
        </return-value>
      </constructor>
      <method name="free" c:identifier="e_contact_geo_free" version="1.12">
        <doc xml:space="preserve">Frees the @geo struct and its contents.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="geo" transfer-ownership="none">
            <doc xml:space="preserve">an #EContactGeo</doc>
            <type name="ContactGeo" c:type="EContactGeo*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <record name="ContactName"
            c:type="EContactName"
            glib:type-name="EContactName"
            glib:get-type="e_contact_name_get_type"
            c:symbol-prefix="contact_name">
      <field name="family" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="given" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="additional" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="prefixes" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="suffixes" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <constructor name="new" c:identifier="e_contact_name_new">
        <doc xml:space="preserve">Creates a new #EContactName struct.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #EContactName struct.</doc>
          <type name="ContactName" c:type="EContactName*"/>
        </return-value>
      </constructor>
      <method name="copy" c:identifier="e_contact_name_copy">
        <doc xml:space="preserve">Creates a copy of @n.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #EContactName identical to @n.</doc>
          <type name="ContactName" c:type="EContactName*"/>
        </return-value>
        <parameters>
          <instance-parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve">an #EContactName</doc>
            <type name="ContactName" c:type="EContactName*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="e_contact_name_free">
        <doc xml:space="preserve">Frees @name and its contents.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">an #EContactName</doc>
            <type name="ContactName" c:type="EContactName*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="to_string" c:identifier="e_contact_name_to_string">
        <doc xml:space="preserve">Generates a string representation of @name.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The string representation of @name.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">an #EContactName</doc>
            <type name="ContactName" c:type="const EContactName*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="from_string" c:identifier="e_contact_name_from_string">
        <doc xml:space="preserve">Creates a new #EContactName based on the parsed @name_str.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #EContactName struct.</doc>
          <type name="ContactName" c:type="EContactName*"/>
        </return-value>
        <parameters>
          <parameter name="name_str" transfer-ownership="none">
            <doc xml:space="preserve">a string representing a contact's full name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="ContactPhoto"
            c:type="EContactPhoto"
            glib:type-name="EContactPhoto"
            glib:get-type="e_contact_photo_get_type"
            c:symbol-prefix="contact_photo">
      <field name="type" writable="1">
        <type name="ContactPhotoType" c:type="EContactPhotoType"/>
      </field>
      <union name="data" c:type="data">
        <record name="inlined" c:type="inlined">
          <field name="mime_type" writable="1">
            <type name="utf8" c:type="gchar*"/>
          </field>
          <field name="length" writable="1">
            <type name="gsize" c:type="gsize"/>
          </field>
          <field name="data" writable="1">
            <type name="guint8" c:type="guchar*"/>
          </field>
        </record>
        <field name="uri" writable="1">
          <type name="utf8" c:type="gchar*"/>
        </field>
      </union>
      <constructor name="new" c:identifier="e_contact_photo_new" version="3.2">
        <doc xml:space="preserve">Creates a new #EContactPhoto struct.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #EContactPhoto struct.</doc>
          <type name="ContactPhoto" c:type="EContactPhoto*"/>
        </return-value>
      </constructor>
      <method name="copy" c:identifier="e_contact_photo_copy" version="3.8">
        <doc xml:space="preserve">Creates a copy of @photo.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #EContactPhoto struct identical to @photo.</doc>
          <type name="ContactPhoto" c:type="EContactPhoto*"/>
        </return-value>
        <parameters>
          <instance-parameter name="photo" transfer-ownership="none">
            <doc xml:space="preserve">an #EContactPhoto</doc>
            <type name="ContactPhoto" c:type="EContactPhoto*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="e_contact_photo_free">
        <doc xml:space="preserve">Frees the @photo struct and its contents.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="photo" transfer-ownership="none">
            <doc xml:space="preserve">an #EContactPhoto struct</doc>
            <type name="ContactPhoto" c:type="EContactPhoto*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_inlined"
              c:identifier="e_contact_photo_get_inlined"
              version="3.2">
        <doc xml:space="preserve">Gets the @photo's data.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">the inlined image in the
#EContactPhoto, or %NULL if it has not been set.</doc>
          <array length="0" zero-terminated="0" c:type="guchar*">
            <type name="guint8" c:type="guchar"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="photo" transfer-ownership="none">
            <doc xml:space="preserve">an #EContactPhoto</doc>
            <type name="ContactPhoto" c:type="EContactPhoto*"/>
          </instance-parameter>
          <parameter name="len"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="full">
            <doc xml:space="preserve">the length of the inlined data</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_mime_type"
              c:identifier="e_contact_photo_get_mime_type"
              version="3.2">
        <doc xml:space="preserve">Gets the @photo's mime type.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">the MIME type of the image, or %NULL if it has not been set.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="photo" transfer-ownership="none">
            <doc xml:space="preserve">an #EContactPhoto</doc>
            <type name="ContactPhoto" c:type="EContactPhoto*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uri"
              c:identifier="e_contact_photo_get_uri"
              version="3.2">
        <doc xml:space="preserve">Gets the @photo's URI.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">the URI of the image, or %NULL if it has not been set</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="photo" transfer-ownership="none">
            <doc xml:space="preserve">an #EContactPhoto</doc>
            <type name="ContactPhoto" c:type="EContactPhoto*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_inlined"
              c:identifier="e_contact_photo_set_inlined"
              version="3.2">
        <doc xml:space="preserve">Sets the @photo's inlined data.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="photo" transfer-ownership="none">
            <doc xml:space="preserve">an #EContactPhoto</doc>
            <type name="ContactPhoto" c:type="EContactPhoto*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">the inlined image data</doc>
            <array length="1" zero-terminated="0" c:type="guchar*">
              <type name="guint8" c:type="guchar"/>
            </array>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">the length of @data</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mime_type"
              c:identifier="e_contact_photo_set_mime_type"
              version="3.2">
        <doc xml:space="preserve">Sets the @photo's mime type.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="photo" transfer-ownership="none">
            <doc xml:space="preserve">an #EContactPhoto</doc>
            <type name="ContactPhoto" c:type="EContactPhoto*"/>
          </instance-parameter>
          <parameter name="mime_type" transfer-ownership="none">
            <doc xml:space="preserve">the mime type</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_uri"
              c:identifier="e_contact_photo_set_uri"
              version="3.2">
        <doc xml:space="preserve">Sets the @photo's URI.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="photo" transfer-ownership="none">
            <doc xml:space="preserve">an #EContactPhoto</doc>
            <type name="ContactPhoto" c:type="EContactPhoto*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve">the @photo's URI</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="ContactPhotoType" c:type="EContactPhotoType">
      <member name="inlined"
              value="0"
              c:identifier="E_CONTACT_PHOTO_TYPE_INLINED">
      </member>
      <member name="uri" value="1" c:identifier="E_CONTACT_PHOTO_TYPE_URI">
      </member>
    </enumeration>
    <record name="ContactPrivate" c:type="EContactPrivate" disguised="1">
    </record>
    <enumeration name="DataBookStatus"
                 version="3.6"
                 glib:type-name="EDataBookStatus"
                 glib:get-type="e_data_book_status_get_type"
                 c:type="EDataBookStatus">
      <doc xml:space="preserve">Error codes for the #E_DATA_BOOK_ERROR domain, these are used
in the backend.</doc>
      <member name="success"
              value="0"
              c:identifier="E_DATA_BOOK_STATUS_SUCCESS"
              glib:nick="success">
        <doc xml:space="preserve">No error</doc>
      </member>
      <member name="busy"
              value="1"
              c:identifier="E_DATA_BOOK_STATUS_BUSY"
              glib:nick="busy">
        <doc xml:space="preserve">Backend was busy</doc>
      </member>
      <member name="repository_offline"
              value="2"
              c:identifier="E_DATA_BOOK_STATUS_REPOSITORY_OFFLINE"
              glib:nick="repository-offline">
        <doc xml:space="preserve">Offsite repository was not online</doc>
      </member>
      <member name="permission_denied"
              value="3"
              c:identifier="E_DATA_BOOK_STATUS_PERMISSION_DENIED"
              glib:nick="permission-denied">
        <doc xml:space="preserve">Permission denied</doc>
      </member>
      <member name="contact_not_found"
              value="4"
              c:identifier="E_DATA_BOOK_STATUS_CONTACT_NOT_FOUND"
              glib:nick="contact-not-found">
        <doc xml:space="preserve">Contact referred to was not found</doc>
      </member>
      <member name="contactid_already_exists"
              value="5"
              c:identifier="E_DATA_BOOK_STATUS_CONTACTID_ALREADY_EXISTS"
              glib:nick="contactid-already-exists">
        <doc xml:space="preserve">Tried to add a contact which already exists</doc>
      </member>
      <member name="authentication_failed"
              value="6"
              c:identifier="E_DATA_BOOK_STATUS_AUTHENTICATION_FAILED"
              glib:nick="authentication-failed">
        <doc xml:space="preserve">Authentication failure</doc>
      </member>
      <member name="authentication_required"
              value="7"
              c:identifier="E_DATA_BOOK_STATUS_AUTHENTICATION_REQUIRED"
              glib:nick="authentication-required">
        <doc xml:space="preserve">Authentication required for this operation</doc>
      </member>
      <member name="unsupported_field"
              value="8"
              c:identifier="E_DATA_BOOK_STATUS_UNSUPPORTED_FIELD"
              glib:nick="unsupported-field">
        <doc xml:space="preserve">An unsupported #EContactField was specified for a given operation</doc>
      </member>
      <member name="unsupported_authentication_method"
              value="9"
              c:identifier="E_DATA_BOOK_STATUS_UNSUPPORTED_AUTHENTICATION_METHOD"
              glib:nick="unsupported-authentication-method">
        <doc xml:space="preserve">The authentication method is unsupported</doc>
      </member>
      <member name="tls_not_available"
              value="10"
              c:identifier="E_DATA_BOOK_STATUS_TLS_NOT_AVAILABLE"
              glib:nick="tls-not-available">
        <doc xml:space="preserve">TLS was not available</doc>
      </member>
      <member name="no_such_book"
              value="11"
              c:identifier="E_DATA_BOOK_STATUS_NO_SUCH_BOOK"
              glib:nick="no-such-book">
        <doc xml:space="preserve">Book did not exist</doc>
      </member>
      <member name="book_removed"
              value="12"
              c:identifier="E_DATA_BOOK_STATUS_BOOK_REMOVED"
              glib:nick="book-removed">
        <doc xml:space="preserve">Book was removed</doc>
      </member>
      <member name="offline_unavailable"
              value="13"
              c:identifier="E_DATA_BOOK_STATUS_OFFLINE_UNAVAILABLE"
              glib:nick="offline-unavailable">
        <doc xml:space="preserve">XXX Document me</doc>
      </member>
      <member name="search_size_limit_exceeded"
              value="14"
              c:identifier="E_DATA_BOOK_STATUS_SEARCH_SIZE_LIMIT_EXCEEDED"
              glib:nick="search-size-limit-exceeded">
        <doc xml:space="preserve">Exceeded limit of seach size</doc>
      </member>
      <member name="search_time_limit_exceeded"
              value="15"
              c:identifier="E_DATA_BOOK_STATUS_SEARCH_TIME_LIMIT_EXCEEDED"
              glib:nick="search-time-limit-exceeded">
        <doc xml:space="preserve">Exceeded time limit for seach</doc>
      </member>
      <member name="invalid_query"
              value="16"
              c:identifier="E_DATA_BOOK_STATUS_INVALID_QUERY"
              glib:nick="invalid-query">
        <doc xml:space="preserve">Given search espression is invalid</doc>
      </member>
      <member name="query_refused"
              value="17"
              c:identifier="E_DATA_BOOK_STATUS_QUERY_REFUSED"
              glib:nick="query-refused">
        <doc xml:space="preserve">Given search espression was refused</doc>
      </member>
      <member name="could_not_cancel"
              value="18"
              c:identifier="E_DATA_BOOK_STATUS_COULD_NOT_CANCEL"
              glib:nick="could-not-cancel">
        <doc xml:space="preserve">Unable to cancel an operation</doc>
      </member>
      <member name="other_error"
              value="19"
              c:identifier="E_DATA_BOOK_STATUS_OTHER_ERROR"
              glib:nick="other-error">
        <doc xml:space="preserve">An other error occurred</doc>
      </member>
      <member name="invalid_server_version"
              value="20"
              c:identifier="E_DATA_BOOK_STATUS_INVALID_SERVER_VERSION"
              glib:nick="invalid-server-version">
        <doc xml:space="preserve">Invalid server version</doc>
      </member>
      <member name="no_space"
              value="21"
              c:identifier="E_DATA_BOOK_STATUS_NO_SPACE"
              glib:nick="no-space">
        <doc xml:space="preserve">Disk space insufficient</doc>
      </member>
      <member name="invalid_arg"
              value="22"
              c:identifier="E_DATA_BOOK_STATUS_INVALID_ARG"
              glib:nick="invalid-arg">
        <doc xml:space="preserve">Invalid argument</doc>
      </member>
      <member name="not_supported"
              value="23"
              c:identifier="E_DATA_BOOK_STATUS_NOT_SUPPORTED"
              glib:nick="not-supported">
        <doc xml:space="preserve">Unsupported operation</doc>
      </member>
      <member name="not_opened"
              value="24"
              c:identifier="E_DATA_BOOK_STATUS_NOT_OPENED"
              glib:nick="not-opened">
        <doc xml:space="preserve">Tried to access a book which is not yet open</doc>
      </member>
      <member name="out_of_sync"
              value="25"
              c:identifier="E_DATA_BOOK_STATUS_OUT_OF_SYNC"
              glib:nick="out-of-sync">
        <doc xml:space="preserve">Out of sync state</doc>
      </member>
    </enumeration>
    <constant name="EVC_ADR" value="ADR" c:type="EVC_ADR">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_BDAY" value="BDAY" c:type="EVC_BDAY">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_CALURI" value="CALURI" c:type="EVC_CALURI">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_CATEGORIES" value="CATEGORIES" c:type="EVC_CATEGORIES">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_CL_UID"
              value="X-EVOLUTION-CONTACT-LIST-UID"
              c:type="EVC_CL_UID"
              version="3.2">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_CONTACT_LIST"
              value="X-EVOLUTION-CONTACT-LIST-INFO"
              c:type="EVC_CONTACT_LIST"
              version="3.2">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_EMAIL" value="EMAIL" c:type="EVC_EMAIL">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_ENCODING" value="ENCODING" c:type="EVC_ENCODING">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_FBURL" value="FBURL" c:type="EVC_FBURL">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_FN" value="FN" c:type="EVC_FN">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_GEO" value="GEO" c:type="EVC_GEO" version="1.12">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_ICSCALENDAR"
              value="ICSCALENDAR"
              c:type="EVC_ICSCALENDAR">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_KEY" value="KEY" c:type="EVC_KEY">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_LABEL" value="LABEL" c:type="EVC_LABEL">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_LOGO" value="LOGO" c:type="EVC_LOGO">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_MAILER" value="MAILER" c:type="EVC_MAILER">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_N" value="N" c:type="EVC_N">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_NICKNAME" value="NICKNAME" c:type="EVC_NICKNAME">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_NOTE" value="NOTE" c:type="EVC_NOTE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_ORG" value="ORG" c:type="EVC_ORG">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_PARENT_CL"
              value="X-EVOLUTION-PARENT-UID"
              c:type="EVC_PARENT_CL"
              version="3.2">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_PHOTO" value="PHOTO" c:type="EVC_PHOTO">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_PRODID" value="PRODID" c:type="EVC_PRODID">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_QUOTEDPRINTABLE"
              value="QUOTED-PRINTABLE"
              c:type="EVC_QUOTEDPRINTABLE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_REV" value="REV" c:type="EVC_REV">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_ROLE" value="ROLE" c:type="EVC_ROLE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_TEL" value="TEL" c:type="EVC_TEL">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_TITLE" value="TITLE" c:type="EVC_TITLE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_TYPE" value="TYPE" c:type="EVC_TYPE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_UID" value="UID" c:type="EVC_UID">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_URL" value="URL" c:type="EVC_URL">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_VALUE" value="VALUE" c:type="EVC_VALUE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_VERSION" value="VERSION" c:type="EVC_VERSION">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_X_AIM" value="X-AIM" c:type="EVC_X_AIM">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_X_ANNIVERSARY"
              value="X-EVOLUTION-ANNIVERSARY"
              c:type="EVC_X_ANNIVERSARY">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_X_ASSISTANT"
              value="X-EVOLUTION-ASSISTANT"
              c:type="EVC_X_ASSISTANT">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_X_BIRTHDAY"
              value="X-EVOLUTION-BIRTHDAY"
              c:type="EVC_X_BIRTHDAY">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_X_BLOG_URL"
              value="X-EVOLUTION-BLOG-URL"
              c:type="EVC_X_BLOG_URL">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_X_BOOK_UID"
              value="X-EVOLUTION-BOOK-UID"
              c:type="EVC_X_BOOK_UID"
              version="3.6">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_X_CALLBACK"
              value="X-EVOLUTION-CALLBACK"
              c:type="EVC_X_CALLBACK">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_X_COMPANY"
              value="X-EVOLUTION-COMPANY"
              c:type="EVC_X_COMPANY">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_X_DEST_CONTACT_UID"
              value="X-EVOLUTION-DEST-CONTACT-UID"
              c:type="EVC_X_DEST_CONTACT_UID">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_X_DEST_EMAIL"
              value="X-EVOLUTION-DEST-EMAIL"
              c:type="EVC_X_DEST_EMAIL">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_X_DEST_EMAIL_NUM"
              value="X-EVOLUTION-DEST-EMAIL-NUM"
              c:type="EVC_X_DEST_EMAIL_NUM">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_X_DEST_HTML_MAIL"
              value="X-EVOLUTION-DEST-HTML-MAIL"
              c:type="EVC_X_DEST_HTML_MAIL">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_X_DEST_NAME"
              value="X-EVOLUTION-DEST-NAME"
              c:type="EVC_X_DEST_NAME">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_X_DEST_SOURCE_UID"
              value="X-EVOLUTION-DEST-SOURCE-UID"
              c:type="EVC_X_DEST_SOURCE_UID">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_X_E164" value="X-EVOLUTION-E164" c:type="EVC_X_E164">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_X_FILE_AS"
              value="X-EVOLUTION-FILE-AS"
              c:type="EVC_X_FILE_AS">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_X_GADUGADU" value="X-GADUGADU" c:type="EVC_X_GADUGADU">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_X_GOOGLE_TALK"
              value="X-GOOGLE-TALK"
              c:type="EVC_X_GOOGLE_TALK"
              version="3.2">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_X_GROUPWISE"
              value="X-GROUPWISE"
              c:type="EVC_X_GROUPWISE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_X_ICQ" value="X-ICQ" c:type="EVC_X_ICQ">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_X_JABBER" value="X-JABBER" c:type="EVC_X_JABBER">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_X_LIST" value="X-EVOLUTION-LIST" c:type="EVC_X_LIST">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_X_LIST_NAME"
              value="X-EVOLUTION-LIST-NAME"
              c:type="EVC_X_LIST_NAME"
              version="3.2">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_X_LIST_SHOW_ADDRESSES"
              value="X-EVOLUTION-LIST-SHOW-ADDRESSES"
              c:type="EVC_X_LIST_SHOW_ADDRESSES">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_X_MANAGER"
              value="X-EVOLUTION-MANAGER"
              c:type="EVC_X_MANAGER">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_X_MSN" value="X-MSN" c:type="EVC_X_MSN">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_X_RADIO"
              value="X-EVOLUTION-RADIO"
              c:type="EVC_X_RADIO">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_X_SIP" value="X-SIP" c:type="EVC_X_SIP" version="2.26">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_X_SKYPE"
              value="X-SKYPE"
              c:type="EVC_X_SKYPE"
              version="2.26">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_X_SPOUSE"
              value="X-EVOLUTION-SPOUSE"
              c:type="EVC_X_SPOUSE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_X_TELEX"
              value="X-EVOLUTION-TELEX"
              c:type="EVC_X_TELEX">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_X_TTYTDD"
              value="X-EVOLUTION-TTYTDD"
              c:type="EVC_X_TTYTDD">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_X_TWITTER"
              value="X-TWITTER"
              c:type="EVC_X_TWITTER"
              version="3.6">
      <doc xml:space="preserve">Twitter name(s).</doc>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_X_VIDEO_URL"
              value="X-EVOLUTION-VIDEO-URL"
              c:type="EVC_X_VIDEO_URL">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_X_WANTS_HTML"
              value="X-MOZILLA-HTML"
              c:type="EVC_X_WANTS_HTML">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="EVC_X_YAHOO" value="X-YAHOO" c:type="EVC_X_YAHOO">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <record name="NameWestern"
            c:type="ENameWestern"
            glib:type-name="ENameWestern"
            glib:get-type="e_name_western_get_type"
            c:symbol-prefix="name_western">
      <field name="prefix" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="first" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="middle" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="nick" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="last" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="suffix" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="full" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <method name="copy" c:identifier="e_name_western_copy" version="3.24">
        <doc xml:space="preserve">Creates a copy of @w.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #ENameWestern struct identical to @w.</doc>
          <type name="NameWestern" c:type="ENameWestern*"/>
        </return-value>
        <parameters>
          <instance-parameter name="w" transfer-ownership="none">
            <doc xml:space="preserve">an #ENameWestern</doc>
            <type name="NameWestern" c:type="ENameWestern*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="e_name_western_free">
        <doc xml:space="preserve">Frees the @w struct and its contents.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="w" transfer-ownership="none">
            <doc xml:space="preserve">an #ENameWestern struct</doc>
            <type name="NameWestern" c:type="ENameWestern*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="parse" c:identifier="e_name_western_parse">
        <doc xml:space="preserve">Parses @full_name and returns an #ENameWestern struct filled with
the component parts of the name.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #ENameWestern struct.</doc>
          <type name="NameWestern" c:type="ENameWestern*"/>
        </return-value>
        <parameters>
          <parameter name="full_name" transfer-ownership="none">
            <doc xml:space="preserve">A string containing a western name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="PhoneNumber"
            c:type="EPhoneNumber"
            version="3.8"
            glib:type-name="EPhoneNumber"
            glib:get-type="e_phone_number_get_type"
            c:symbol-prefix="phone_number">
      <doc xml:space="preserve">This opaque type describes a parsed phone number. It can be copied using
e_phone_number_copy(). To release it call e_phone_number_free().</doc>
      <method name="compare"
              c:identifier="e_phone_number_compare"
              version="3.8">
        <doc xml:space="preserve">Compares two phone numbers.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The quality of matching for the two phone numbers.</doc>
          <type name="PhoneNumberMatch" c:type="EPhoneNumberMatch"/>
        </return-value>
        <parameters>
          <instance-parameter name="first_number" transfer-ownership="none">
            <doc xml:space="preserve">the first EPhoneNumber to compare</doc>
            <type name="PhoneNumber" c:type="const EPhoneNumber*"/>
          </instance-parameter>
          <parameter name="second_number" transfer-ownership="none">
            <doc xml:space="preserve">the second EPhoneNumber to compare</doc>
            <type name="PhoneNumber" c:type="const EPhoneNumber*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="e_phone_number_copy" version="3.8">
        <doc xml:space="preserve">Makes a copy of @phone_number.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A newly allocated EPhoneNumber instance.
Call e_phone_number_free() to release this instance.</doc>
          <type name="PhoneNumber" c:type="EPhoneNumber*"/>
        </return-value>
        <parameters>
          <instance-parameter name="phone_number" transfer-ownership="none">
            <doc xml:space="preserve">the EPhoneNumber to copy</doc>
            <type name="PhoneNumber" c:type="const EPhoneNumber*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="e_phone_number_free" version="3.8">
        <doc xml:space="preserve">Released the memory occupied by @phone_number.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="phone_number" transfer-ownership="none">
            <doc xml:space="preserve">the EPhoneNumber to free</doc>
            <type name="PhoneNumber" c:type="EPhoneNumber*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_country_code"
              c:identifier="e_phone_number_get_country_code"
              version="3.8">
        <doc xml:space="preserve">Queries the @phone_number's country calling code and optionally stores the country
calling code's origin in @source. For instance when parsing "+1-617-5423789" this
function would return one and assing E_PHONE_NUMBER_COUNTRY_FROM_FQTN to @source.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A valid country calling code, or zero if no code is known.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="phone_number" transfer-ownership="none">
            <doc xml:space="preserve">the phone number to query</doc>
            <type name="PhoneNumber" c:type="const EPhoneNumber*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve">an optional location for storing the phone number's origin, or %NULL</doc>
            <type name="PhoneNumberCountrySource"
                  c:type="EPhoneNumberCountrySource*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_national_number"
              c:identifier="e_phone_number_get_national_number"
              version="3.8">
        <doc xml:space="preserve">Queries the national portion of @phone_number without any call-out
prefixes. For instance when parsing "+1-617-5423789" this function would
return the string "6175423789".</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The national portion of @phone_number.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="phone_number" transfer-ownership="none">
            <doc xml:space="preserve">the phone number to query</doc>
            <type name="PhoneNumber" c:type="const EPhoneNumber*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="to_string"
              c:identifier="e_phone_number_to_string"
              version="3.8">
        <doc xml:space="preserve">Describes the @phone_number according to the rules applying to @format.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A formatted string for @phone_number.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="phone_number" transfer-ownership="none">
            <doc xml:space="preserve">the phone number to format</doc>
            <type name="PhoneNumber" c:type="const EPhoneNumber*"/>
          </instance-parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve">the phone number format to apply</doc>
            <type name="PhoneNumberFormat" c:type="EPhoneNumberFormat"/>
          </parameter>
        </parameters>
      </method>
      <function name="compare_strings"
                c:identifier="e_phone_number_compare_strings"
                version="3.8"
                throws="1">
        <doc xml:space="preserve">Compares two phone numbers.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The quality of matching for the two phone numbers.</doc>
          <type name="PhoneNumberMatch" c:type="EPhoneNumberMatch"/>
        </return-value>
        <parameters>
          <parameter name="first_number" transfer-ownership="none">
            <doc xml:space="preserve">the first EPhoneNumber to compare</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="second_number" transfer-ownership="none">
            <doc xml:space="preserve">the second EPhoneNumber to compare</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="compare_strings_with_region"
                c:identifier="e_phone_number_compare_strings_with_region"
                version="3.8"
                throws="1">
        <doc xml:space="preserve">Compares two phone numbers within the context of @region_code.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The quality of matching for the two phone numbers.</doc>
          <type name="PhoneNumberMatch" c:type="EPhoneNumberMatch"/>
        </return-value>
        <parameters>
          <parameter name="first_number" transfer-ownership="none">
            <doc xml:space="preserve">the first EPhoneNumber to compare</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="second_number" transfer-ownership="none">
            <doc xml:space="preserve">the second EPhoneNumber to compare</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="region_code"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a two-letter country code, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="error_quark" c:identifier="e_phone_number_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="from_string"
                c:identifier="e_phone_number_from_string"
                version="3.8"
                throws="1">
        <doc xml:space="preserve">Parses the string passed in @phone_number. Note that no validation is
performed whether the recognized phone number is valid for a particular
region.

The two-letter country code passed in @region_code only is used if the
@phone_number is not written in international format. The application's
default region as returned by e_phone_number_get_default_region() is used
if @region_code is %NULL.

If the number is guaranteed to start with a '+' followed by the country
calling code, then "ZZ" can be passed for @region_code.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new EPhoneNumber instance on success,
or %NULL on error. Call e_phone_number_free() to release this instance.</doc>
          <type name="PhoneNumber" c:type="EPhoneNumber*"/>
        </return-value>
        <parameters>
          <parameter name="phone_number" transfer-ownership="none">
            <doc xml:space="preserve">the phone number to parse</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="region_code"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a two-letter country code, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_country_code_for_region"
                c:identifier="e_phone_number_get_country_code_for_region"
                version="3.8"
                throws="1">
        <doc xml:space="preserve">Retrieves the preferred country calling code for @region_code,
e.g. 358 for "fi" or 1 for "en_US@UTF-8".

If %NULL is passed for @region_code the default region as returned by
e_phone_number_get_default_region() is used.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a valid country calling code, or zero if an unknown region
code was passed.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="region_code"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a two-letter country code, a locale name, or
%NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_default_region"
                c:identifier="e_phone_number_get_default_region"
                version="3.8"
                throws="1">
        <doc xml:space="preserve">Retrieves the current two-letter country code that's used by default for
parsing phone numbers in e_phone_number_from_string(). It can be useful
to store this number before parsing a bigger number of phone numbers.

The result of this functions depends on the current setup of the
%LC_ADDRESS category: If that category provides a reasonable value
for %_NL_ADDRESS_COUNTRY_AB2 this value is returned. Otherwise the
locale name configured for %LC_ADDRESS is parsed.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a newly allocated string containing the
current locale's two-letter code for phone number parsing.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </function>
      <function name="is_supported"
                c:identifier="e_phone_number_is_supported"
                version="3.8">
        <doc xml:space="preserve">Checks if phone number support is available. It is recommended to call this
function before using any of the phone-utils functions to ensure that the
required functionality is available, and to pick alternative mechanisms if
needed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if phone number support is available.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </function>
    </record>
    <enumeration name="PhoneNumberCountrySource"
                 version="3.8"
                 c:type="EPhoneNumberCountrySource">
      <doc xml:space="preserve">The origin of a parsed EPhoneNumber's country calling code.</doc>
      <member name="fqtn"
              value="1"
              c:identifier="E_PHONE_NUMBER_COUNTRY_FROM_FQTN">
        <doc xml:space="preserve">the EPhoneNumber was build from a fully qualified telephone number
  that contained a valid country calling code</doc>
      </member>
      <member name="idd"
              value="5"
              c:identifier="E_PHONE_NUMBER_COUNTRY_FROM_IDD">
        <doc xml:space="preserve">the parsed phone number started with the current locale's international
  call prefix, followed by a valid country calling code</doc>
      </member>
      <member name="default"
              value="20"
              c:identifier="E_PHONE_NUMBER_COUNTRY_FROM_DEFAULT">
        <doc xml:space="preserve">the parsed phone didn't start with a (recognizable) country calling code,
  the code was chosen by checking the current locale settings</doc>
      </member>
    </enumeration>
    <enumeration name="PhoneNumberError"
                 version="3.8"
                 c:type="EPhoneNumberError"
                 glib:error-domain="e-phone-number-error-quark">
      <doc xml:space="preserve">Numeric description of a phone number related error.</doc>
      <member name="not_implemented"
              value="0"
              c:identifier="E_PHONE_NUMBER_ERROR_NOT_IMPLEMENTED">
        <doc xml:space="preserve">the library was built without phone
number support</doc>
      </member>
      <member name="unknown"
              value="1"
              c:identifier="E_PHONE_NUMBER_ERROR_UNKNOWN">
        <doc xml:space="preserve">the phone number parser reported a yet
unknown error code.</doc>
      </member>
      <member name="not_a_number"
              value="2"
              c:identifier="E_PHONE_NUMBER_ERROR_NOT_A_NUMBER">
        <doc xml:space="preserve">the supplied text is not a phone number.</doc>
      </member>
      <member name="invalid_country_code"
              value="3"
              c:identifier="E_PHONE_NUMBER_ERROR_INVALID_COUNTRY_CODE">
        <doc xml:space="preserve">the supplied phone number has an
invalid country calling code.</doc>
      </member>
      <member name="too_short_after_idd"
              value="4"
              c:identifier="E_PHONE_NUMBER_ERROR_TOO_SHORT_AFTER_IDD">
        <doc xml:space="preserve">the remaining text after the
country calling code is to short for a phone number.</doc>
      </member>
      <member name="too_short"
              value="5"
              c:identifier="E_PHONE_NUMBER_ERROR_TOO_SHORT">
        <doc xml:space="preserve">the text is too short for a phone number.</doc>
      </member>
      <member name="too_long"
              value="6"
              c:identifier="E_PHONE_NUMBER_ERROR_TOO_LONG">
        <doc xml:space="preserve">the text is too long for a phone number.</doc>
      </member>
    </enumeration>
    <enumeration name="PhoneNumberFormat"
                 version="3.8"
                 c:type="EPhoneNumberFormat">
      <doc xml:space="preserve">The supported formatting rules for phone numbers.</doc>
      <member name="e164" value="0" c:identifier="E_PHONE_NUMBER_FORMAT_E164">
        <doc xml:space="preserve">format according E.164: "+493055667788".</doc>
      </member>
      <member name="international"
              value="1"
              c:identifier="E_PHONE_NUMBER_FORMAT_INTERNATIONAL">
        <doc xml:space="preserve">a formatted phone number always
starting with the country calling code: "+49 30 55667788".</doc>
      </member>
      <member name="national"
              value="2"
              c:identifier="E_PHONE_NUMBER_FORMAT_NATIONAL">
        <doc xml:space="preserve">a formatted phone number in national
scope, that is without country calling code: "(030) 55667788".</doc>
      </member>
      <member name="rfc3966"
              value="3"
              c:identifier="E_PHONE_NUMBER_FORMAT_RFC3966">
        <doc xml:space="preserve">a tel: URL according to RFC 3966:
"tel:+49-30-55667788".</doc>
      </member>
    </enumeration>
    <enumeration name="PhoneNumberMatch"
                 version="3.8"
                 c:type="EPhoneNumberMatch">
      <doc xml:space="preserve">The strength of a phone number match.

&lt;example&gt;
&lt;title&gt;Some examples of phone number matches&lt;/title&gt;
&lt;para&gt;
Let's consider the phone number "+1-221-5423789", then comparing with
"+1.221.542.3789" we have get E_PHONE_NUMBER_MATCH_EXACT because country
code, region code and local number are matching. Comparing with "2215423789"
will result in E_PHONE_NUMBER_MATCH_NATIONAL because the country calling code
is missing, but the national portion is matching. Finally comparing with
"5423789" gives E_PHONE_NUMBER_MATCH_SHORT. For more detail have a look at
the following table:

&lt;informaltable border="1" align="center"&gt;
 &lt;colgroup&gt;
  &lt;col width="20%" /&gt;
  &lt;col width="20%" /&gt;
  &lt;col width="20%" /&gt;
  &lt;col width="20%" /&gt;
  &lt;col width="20%" /&gt;
 &lt;/colgroup&gt;
 &lt;tbody&gt;
  &lt;tr&gt;
   &lt;th&gt;&lt;/th&gt;
   &lt;th align="center"&gt;+1-617-5423789&lt;/th&gt;
   &lt;th align="center"&gt;+1-221-5423789&lt;/th&gt;
   &lt;th align="center"&gt;221-5423789&lt;/th&gt;
   &lt;th align="center"&gt;5423789&lt;/th&gt;
  &lt;/tr&gt;&lt;tr&gt;
   &lt;th align="right"&gt;+1-617-5423789&lt;/th&gt;
   &lt;td align="center"&gt;exact&lt;/td&gt;
   &lt;td align="center"&gt;none&lt;/td&gt;
   &lt;td align="center"&gt;none&lt;/td&gt;
   &lt;td align="center"&gt;short&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;
   &lt;th align="right"&gt;+1-221-5423789&lt;/th&gt;
   &lt;td align="center"&gt;none&lt;/td&gt;
   &lt;td align="center"&gt;exact&lt;/td&gt;
   &lt;td align="center"&gt;national&lt;/td&gt;
   &lt;td align="center"&gt;short&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;
   &lt;th align="right"&gt;221-5423789&lt;/th&gt;
   &lt;td align="center"&gt;none&lt;/td&gt;
   &lt;td align="center"&gt;national&lt;/td&gt;
   &lt;td align="center"&gt;national&lt;/td&gt;
   &lt;td align="center"&gt;short&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;
   &lt;th align="right"&gt;5423789&lt;/th&gt;
   &lt;td align="center"&gt;short&lt;/td&gt;
   &lt;td align="center"&gt;short&lt;/td&gt;
   &lt;td align="center"&gt;short&lt;/td&gt;
   &lt;td align="center"&gt;short&lt;/td&gt;
  &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/informaltable&gt;
&lt;/para&gt;
&lt;/example&gt;</doc>
      <member name="none" value="0" c:identifier="E_PHONE_NUMBER_MATCH_NONE">
        <doc xml:space="preserve">The phone numbers did not match.</doc>
      </member>
      <member name="exact" value="1" c:identifier="E_PHONE_NUMBER_MATCH_EXACT">
        <doc xml:space="preserve">The phone numbers matched exactly. Two phone number strings are an exact match
if the country code, national phone number, presence of a leading zero for Italian numbers and any
extension present are the same.</doc>
      </member>
      <member name="national"
              value="1024"
              c:identifier="E_PHONE_NUMBER_MATCH_NATIONAL">
        <doc xml:space="preserve">The national phone number matched. Two phone number strings match at
this strength if either or both has no region specified, and the national phone number
and extensions are the same.</doc>
      </member>
      <member name="short"
              value="2048"
              c:identifier="E_PHONE_NUMBER_MATCH_SHORT">
        <doc xml:space="preserve">The weakest sort of match. Two phone numbers match at
this strength if either or both has no region specified, or the region specified is the same, and one national
phone number could be a shorter version of the other number. This includes the case where one has an extension specified,
and the other does not.</doc>
      </member>
    </enumeration>
    <constant name="SOURCE_EXTENSION_BACKEND_SUMMARY_SETUP"
              value="Backend Summary Setup"
              c:type="E_SOURCE_EXTENSION_BACKEND_SUMMARY_SETUP"
              version="3.8">
      <doc xml:space="preserve">Pass this extension name to e_source_get_extension() to access
#ESourceBackendSummarySetup.  This is also used as a group name in key files.</doc>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="SourceBackendSummarySetup"
           c:symbol-prefix="source_backend_summary_setup"
           c:type="ESourceBackendSummarySetup"
           version="3.8"
           parent="EDataServer.SourceExtension"
           glib:type-name="ESourceBackendSummarySetup"
           glib:get-type="e_source_backend_summary_setup_get_type"
           glib:type-struct="SourceBackendSummarySetupClass">
      <doc xml:space="preserve">Contains only private data that should be read and manipulated using the
functions below.</doc>
      <method name="get_indexed_fields"
              c:identifier="e_source_backend_summary_setup_get_indexed_fields"
              version="3.8">
        <doc xml:space="preserve">Fetches the #EContactFields configured to be indexed, with thier respective #EBookIndexTypes.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The array of indexed #EContactFields.</doc>
          <type name="ContactField" c:type="EContactField*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve">An #ESourceBackendSummarySetup</doc>
            <type name="SourceBackendSummarySetup"
                  c:type="ESourceBackendSummarySetup*"/>
          </instance-parameter>
          <parameter name="types"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">A return location for the set of #EBookIndexTypes corresponding
                               to each returned field,  should be freed with g_free() when no longer needed.</doc>
            <type name="BookIndexType" c:type="EBookIndexType**"/>
          </parameter>
          <parameter name="n_fields"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">The number of elements in the returned arrays.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_summary_fields"
              c:identifier="e_source_backend_summary_setup_get_summary_fields"
              version="3.8">
        <doc xml:space="preserve">Fetches the #EContactFields which are configured to be a part of the summary.

&lt;note&gt;&lt;para&gt;If there are no configured summary fields, the default configuration is assumed&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">An array of #EContactFields @n_fields long, should be freed with g_free() when done.</doc>
          <type name="ContactField" c:type="EContactField*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve">An #ESourceBackendSummarySetup</doc>
            <type name="SourceBackendSummarySetup"
                  c:type="ESourceBackendSummarySetup*"/>
          </instance-parameter>
          <parameter name="n_fields"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">A return location for the number of #EContactFields in the returned array.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_indexed_fields"
              c:identifier="e_source_backend_summary_setup_set_indexed_fields"
              version="3.8"
              introspectable="0">
        <doc xml:space="preserve">Like e_source_backend_summary_setup_set_indexed_fieldsv(), but takes a literal list of
of indexes.

To give the 'fullname' field an index for prefix and suffix searches:

|[
  #include &lt;libebook/libebook.h&gt;

  ESourceBackendSummarySetup *extension;

  extension = e_source_get_extension (source, E_SOURCE_EXTENSION_BACKEND_SUMMARY_SETUP);

  e_source_backend_summary_setup_set_indexed_fields (extension,
                                                     E_CONTACT_FULL_NAME, E_BOOK_INDEX_PREFIX,
                                                     E_CONTACT_FULL_NAME, E_BOOK_INDEX_SUFFIX,
                                                     0);
]|</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve">An #ESourceBackendSummarySetup</doc>
            <type name="SourceBackendSummarySetup"
                  c:type="ESourceBackendSummarySetup*"/>
          </instance-parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve">A list of #EContactFields, #EBookIndexType pairs terminated by 0.</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="set_indexed_fieldsv"
              c:identifier="e_source_backend_summary_setup_set_indexed_fieldsv"
              version="3.8">
        <doc xml:space="preserve">Defines indexes for quick reference for the given given #EContactFields in the addressbook.

The same #EContactField may be specified multiple times to create multiple indexes
with different characteristics. If an #E_BOOK_INDEX_PREFIX index is created it will
be used for #E_BOOK_QUERY_BEGINS_WITH queries. A #E_BOOK_INDEX_SUFFIX index
will be constructed efficiently for suffix matching and will be used for
#E_BOOK_QUERY_ENDS_WITH queries. Similar a #E_BOOK_INDEX_PHONE index will optimize
#E_BOOK_QUERY_EQUALS_PHONE_NUMBER searches.

&lt;note&gt;&lt;para&gt;The specified indexed fields must also be a part of the summary, any indexed fields
specified that are not already a part of the summary will be ignored.&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve">An #ESourceBackendSummarySetup</doc>
            <type name="SourceBackendSummarySetup"
                  c:type="ESourceBackendSummarySetup*"/>
          </instance-parameter>
          <parameter name="fields" transfer-ownership="none">
            <doc xml:space="preserve">The array of #EContactFields to set indexes for</doc>
            <type name="ContactField" c:type="EContactField*"/>
          </parameter>
          <parameter name="types" transfer-ownership="none">
            <doc xml:space="preserve">The array of #EBookIndexTypes defining what types of indexes to create</doc>
            <type name="BookIndexType" c:type="EBookIndexType*"/>
          </parameter>
          <parameter name="n_fields" transfer-ownership="none">
            <doc xml:space="preserve">The number elements in the passed @fields, @rule_types and @rules arrays.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_summary_fields"
              c:identifier="e_source_backend_summary_setup_set_summary_fields"
              version="3.8"
              introspectable="0">
        <doc xml:space="preserve">Like e_source_backend_summary_setup_set_summary_fieldsv(), but takes a literal
list of #EContactFields for convenience.

To configure the address book summary fields with main phone nubmer fields:

|[
  #include &lt;libebook/libebook.h&gt;

  ESourceBackendSummarySetup *extension;

  extension = e_source_get_extension (source, E_SOURCE_EXTENSION_BACKEND_SUMMARY_SETUP);

  e_source_backend_summary_setup_set_summary_fields (extension, E_CONTACT_FULL_NAME, E_CONTACT_EMAIL, 0);
]|</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve">An #ESourceBackendSummarySetup</doc>
            <type name="SourceBackendSummarySetup"
                  c:type="ESourceBackendSummarySetup*"/>
          </instance-parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve">A 0 terminated list of #EContactFields to set as summary fields</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="set_summary_fieldsv"
              c:identifier="e_source_backend_summary_setup_set_summary_fieldsv"
              version="3.8">
        <doc xml:space="preserve">Sets the summary fields configured for the given addressbook.

The fields %E_CONTACT_UID and %E_CONTACT_REV are not optional,
they will be stored in the summary regardless of the configured summary.

An empty summary configuration is assumed to be the default summary
configuration.

&lt;note&gt;&lt;para&gt;Only #EContactFields with the type #G_TYPE_STRING or #G_TYPE_BOOLEAN
are currently supported as summary fields.&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve">An #ESourceBackendSummarySetup</doc>
            <type name="SourceBackendSummarySetup"
                  c:type="ESourceBackendSummarySetup*"/>
          </instance-parameter>
          <parameter name="fields" transfer-ownership="none">
            <doc xml:space="preserve">The array of #EContactFields to set as summary fields</doc>
            <type name="ContactField" c:type="EContactField*"/>
          </parameter>
          <parameter name="n_fields" transfer-ownership="none">
            <doc xml:space="preserve">The number of #EContactFields in @fields</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <property name="indexed-fields"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="summary-fields"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="EDataServer.SourceBackend" c:type="ESourceBackend"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SourceBackendSummarySetupPrivate"
              c:type="ESourceBackendSummarySetupPrivate*"/>
      </field>
    </class>
    <record name="SourceBackendSummarySetupClass"
            c:type="ESourceBackendSummarySetupClass"
            glib:is-gtype-struct-for="SourceBackendSummarySetup">
      <field name="parent_class">
        <type name="EDataServer.SourceBackendClass"
              c:type="ESourceBackendClass"/>
      </field>
    </record>
    <record name="SourceBackendSummarySetupPrivate"
            c:type="ESourceBackendSummarySetupPrivate"
            disguised="1">
    </record>
    <constant name="VCARD_21_VALID_PARAMETERS"
              value="TYPE,VALUE,ENCODING,CHARSET,LANGUAGE,DOM,INTL,POSTAL,PARCEL,HOME,WORK,PREF,VOICE,FAX,MSG,CELL,PAGER,BBS,MODEM,CAR,ISDN,VIDEO,AOL,APPLELINK,ATTMAIL,CIS,EWORLD,INTERNET,IBMMAIL,MCIMAIL,POWERSHARE,PRODIGY,TLX,X400,GIF,CGM,WMF,BMP,MET,PMB,DIB,PICT,TIFF,PDF,PS,JPEG,QTIME,MPEG,MPEG2,AVI,WAVE,AIFF,PCM,X509,PGP"
              c:type="E_VCARD_21_VALID_PARAMETERS"
              version="3.4">
      <doc xml:space="preserve">FIXME: Document me!</doc>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VCARD_21_VALID_PROPERTIES"
              value="ADR,ORG,N,AGENT,LOGO,PHOTO,LABEL,FN,TITLE,SOUND,VERSION,TEL,EMAIL,TZ,GEO,NOTE,URL,BDAY,ROLE,REV,UID,KEY,MAILER"
              c:type="E_VCARD_21_VALID_PROPERTIES"
              version="3.4">
      <doc xml:space="preserve">FIXME: Document me!</doc>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="VCard"
           c:symbol-prefix="vcard"
           c:type="EVCard"
           parent="GObject.Object"
           glib:type-name="EVCard"
           glib:get-type="e_vcard_get_type"
           glib:type-struct="VCardClass">
      <constructor name="new" c:identifier="e_vcard_new">
        <doc xml:space="preserve">Creates a new, blank #EVCard.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new, blank #EVCard.</doc>
          <type name="VCard" c:type="EVCard*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_string"
                   c:identifier="e_vcard_new_from_string">
        <doc xml:space="preserve">Creates a new #EVCard from the passed-in string
representation.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #EVCard.</doc>
          <type name="VCard" c:type="EVCard*"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve">a string representation of the vcard to create</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="escape_string" c:identifier="e_vcard_escape_string">
        <doc xml:space="preserve">Escapes a string according to RFC2426, section 5.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A newly allocated, escaped string.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">the string to escape</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="unescape_string" c:identifier="e_vcard_unescape_string">
        <doc xml:space="preserve">Unescapes a string according to RFC2426, section 5.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A newly allocated, unescaped string.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">the string to unescape</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <method name="add_attribute" c:identifier="e_vcard_add_attribute">
        <doc xml:space="preserve">Prepends @attr to @evc. This takes ownership of @attr.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="evc" transfer-ownership="none">
            <doc xml:space="preserve">an #EVCard</doc>
            <type name="VCard" c:type="EVCard*"/>
          </instance-parameter>
          <parameter name="attr" transfer-ownership="full">
            <doc xml:space="preserve">an #EVCardAttribute to add</doc>
            <type name="VCardAttribute" c:type="EVCardAttribute*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_attribute_with_value"
              c:identifier="e_vcard_add_attribute_with_value">
        <doc xml:space="preserve">Prepends @attr to @evcard, setting it to @value. This takes ownership of
@attr.

This is a convenience wrapper around e_vcard_attribute_add_value() and
e_vcard_add_attribute().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="evcard" transfer-ownership="none">
            <doc xml:space="preserve">an #EVCard</doc>
            <type name="VCard" c:type="EVCard*"/>
          </instance-parameter>
          <parameter name="attr" transfer-ownership="full">
            <doc xml:space="preserve">an #EVCardAttribute to add</doc>
            <type name="VCardAttribute" c:type="EVCardAttribute*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">a value to assign to the attribute</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_attribute_with_values"
              c:identifier="e_vcard_add_attribute_with_values"
              introspectable="0">
        <doc xml:space="preserve">Prepends @attr to @evcard, assigning the list of values to it. This takes
ownership of @attr.

This is a convenience wrapper around e_vcard_attribute_add_value() and
e_vcard_add_attribute().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="evcard" transfer-ownership="none">
            <doc xml:space="preserve">an @EVCard</doc>
            <type name="VCard" c:type="EVCard*"/>
          </instance-parameter>
          <parameter name="attr" transfer-ownership="full">
            <doc xml:space="preserve">an #EVCardAttribute to add</doc>
            <type name="VCardAttribute" c:type="EVCardAttribute*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve">a %NULL-terminated list of values to assign to the attribute</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="append_attribute"
              c:identifier="e_vcard_append_attribute"
              version="2.32">
        <doc xml:space="preserve">Appends @attr to @evc to the end of a list of attributes. This takes
ownership of @attr.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="evc" transfer-ownership="none">
            <doc xml:space="preserve">an #EVCard</doc>
            <type name="VCard" c:type="EVCard*"/>
          </instance-parameter>
          <parameter name="attr" transfer-ownership="full">
            <doc xml:space="preserve">an #EVCardAttribute to append</doc>
            <type name="VCardAttribute" c:type="EVCardAttribute*"/>
          </parameter>
        </parameters>
      </method>
      <method name="append_attribute_with_value"
              c:identifier="e_vcard_append_attribute_with_value"
              version="2.32">
        <doc xml:space="preserve">Appends @attr to @evcard, setting it to @value. This takes ownership of
@attr.

This is a convenience wrapper around e_vcard_attribute_add_value() and
e_vcard_append_attribute().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="evcard" transfer-ownership="none">
            <doc xml:space="preserve">an #EVCard</doc>
            <type name="VCard" c:type="EVCard*"/>
          </instance-parameter>
          <parameter name="attr" transfer-ownership="full">
            <doc xml:space="preserve">an #EVCardAttribute to append</doc>
            <type name="VCardAttribute" c:type="EVCardAttribute*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">a value to assign to the attribute</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="append_attribute_with_values"
              c:identifier="e_vcard_append_attribute_with_values"
              version="2.32"
              introspectable="0">
        <doc xml:space="preserve">Appends @attr to @evcard, assigning the list of values to it. This takes
ownership of @attr.

This is a convenience wrapper around e_vcard_attribute_add_value() and
e_vcard_append_attribute().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="evcard" transfer-ownership="none">
            <doc xml:space="preserve">an @EVCard</doc>
            <type name="VCard" c:type="EVCard*"/>
          </instance-parameter>
          <parameter name="attr" transfer-ownership="full">
            <doc xml:space="preserve">an #EVCardAttribute to append</doc>
            <type name="VCardAttribute" c:type="EVCardAttribute*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve">a %NULL-terminated list of values to assign to the attribute</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="construct" c:identifier="e_vcard_construct">
        <doc xml:space="preserve">Constructs the existing #EVCard, @evc, setting its vCard data to @str.

This modifies @evc.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="evc" transfer-ownership="none">
            <doc xml:space="preserve">an existing #EVCard</doc>
            <type name="VCard" c:type="EVCard*"/>
          </instance-parameter>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve">a vCard string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="construct_full"
              c:identifier="e_vcard_construct_full"
              version="3.12">
        <doc xml:space="preserve">Similar to e_vcard_construct_with_uid(), but can also
be used with an @str that is not %NULL terminated.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="evc" transfer-ownership="none">
            <doc xml:space="preserve">an existing #EVCard</doc>
            <type name="VCard" c:type="EVCard*"/>
          </instance-parameter>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve">a vCard string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">length of @str, or -1 if @str is %NULL terminated</doc>
            <type name="gssize" c:type="gssize"/>
          </parameter>
          <parameter name="uid"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a unique ID string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="construct_with_uid"
              c:identifier="e_vcard_construct_with_uid"
              version="3.4">
        <doc xml:space="preserve">Constructs the existing #EVCard, @evc, setting its vCard data to @str, and
adding a new UID attribute with the value given in @uid (if @uid is
non-%NULL).

This modifies @evc.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="evc" transfer-ownership="none">
            <doc xml:space="preserve">an existing #EVCard</doc>
            <type name="VCard" c:type="EVCard*"/>
          </instance-parameter>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve">a vCard string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="uid"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a unique ID string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dump_structure" c:identifier="e_vcard_dump_structure">
        <doc xml:space="preserve">Prints a dump of @evc's structure to stdout. Used for
debugging.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="evc" transfer-ownership="none">
            <doc xml:space="preserve">the #EVCard to dump</doc>
            <type name="VCard" c:type="EVCard*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_attribute" c:identifier="e_vcard_get_attribute">
        <doc xml:space="preserve">Get the attribute @name from @evc.  The #EVCardAttribute is owned by
@evcard and should not be freed. If the attribute does not exist, %NULL is
returned.

&lt;note&gt;&lt;para&gt;This will only return the &lt;emphasis&gt;first&lt;/emphasis&gt; attribute
with the given @name. To get other attributes of that name (for example,
other &lt;code&gt;TEL&lt;/code&gt; attributes if a contact has multiple telephone
numbers), use e_vcard_get_attributes() and iterate over the list searching
for matching attributes.&lt;/para&gt;
&lt;para&gt;This method iterates over all attributes in the #EVCard, so should not
be called often. If extracting a large number of attributes from a vCard, it
is more efficient to iterate once over the list returned by
e_vcard_get_attributes().&lt;/para&gt;&lt;/note&gt;</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">An #EVCardAttribute if found, or %NULL.</doc>
          <type name="VCardAttribute" c:type="EVCardAttribute*"/>
        </return-value>
        <parameters>
          <instance-parameter name="evc" transfer-ownership="none">
            <doc xml:space="preserve">an #EVCard</doc>
            <type name="VCard" c:type="EVCard*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">the name of the attribute to get</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_attribute_if_parsed"
              c:identifier="e_vcard_get_attribute_if_parsed"
              version="3.4">
        <doc xml:space="preserve">Similar to e_vcard_get_attribute() but this method will not attempt to
parse the vCard if it is not already parsed.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">An #EVCardAttribute if found, or %NULL.</doc>
          <type name="VCardAttribute" c:type="EVCardAttribute*"/>
        </return-value>
        <parameters>
          <instance-parameter name="evc" transfer-ownership="none">
            <doc xml:space="preserve">an #EVCard</doc>
            <type name="VCard" c:type="EVCard*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">the name of the attribute to get</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_attributes" c:identifier="e_vcard_get_attributes">
        <doc xml:space="preserve">Gets the list of all attributes from @evcard. The list and its
contents are owned by @evcard, and must not be freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A list of attributes
of type #EVCardAttribute.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="VCardAttribute"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="evcard" transfer-ownership="none">
            <doc xml:space="preserve">an #EVCard</doc>
            <type name="VCard" c:type="EVCard*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_parsed" c:identifier="e_vcard_is_parsed" version="3.2">
        <doc xml:space="preserve">Check if the @evc has been parsed already, as #EVCard implements lazy parsing
of its vCard data. Used for debugging.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @evc has been parsed, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="evc" transfer-ownership="none">
            <doc xml:space="preserve">an #EVCard</doc>
            <type name="VCard" c:type="EVCard*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_attribute" c:identifier="e_vcard_remove_attribute">
        <doc xml:space="preserve">Removes @attr from @evc and frees it. This takes ownership of @attr.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="evc" transfer-ownership="none">
            <doc xml:space="preserve">an #EVCard</doc>
            <type name="VCard" c:type="EVCard*"/>
          </instance-parameter>
          <parameter name="attr" transfer-ownership="full">
            <doc xml:space="preserve">an #EVCardAttribute to remove</doc>
            <type name="VCardAttribute" c:type="EVCardAttribute*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_attributes"
              c:identifier="e_vcard_remove_attributes">
        <doc xml:space="preserve">Removes all the attributes with group name and attribute name equal to the
passed in values. If @attr_group is %NULL or an empty string,
it removes all the attributes with passed in name irrespective of
their group names.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="evc" transfer-ownership="none">
            <doc xml:space="preserve">vcard object</doc>
            <type name="VCard" c:type="EVCard*"/>
          </instance-parameter>
          <parameter name="attr_group"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">group name of attributes to be removed</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="attr_name" transfer-ownership="none">
            <doc xml:space="preserve">name of the arributes to be removed</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_string" c:identifier="e_vcard_to_string">
        <doc xml:space="preserve">Exports @evc to a string representation, specified
by the @format argument.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A newly allocated string representing the vcard.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="evc" transfer-ownership="none">
            <doc xml:space="preserve">the #EVCard to export</doc>
            <type name="VCard" c:type="EVCard*"/>
          </instance-parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve">the format to export to</doc>
            <type name="VCardFormat" c:type="EVCardFormat"/>
          </parameter>
        </parameters>
      </method>
      <method name="util_dup_x_attribute"
              c:identifier="e_vcard_util_dup_x_attribute"
              version="3.26">
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">Value of attribute @x_name, or %NULL,
   when there is no such attribute. Free the returned pointer with g_free(),
   when no longer needed.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="vcard" transfer-ownership="none">
            <doc xml:space="preserve">an #EVCard</doc>
            <type name="VCard" c:type="EVCard*"/>
          </instance-parameter>
          <parameter name="x_name" transfer-ownership="none">
            <doc xml:space="preserve">the attribute name, which starts with "X-"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="util_set_x_attribute"
              c:identifier="e_vcard_util_set_x_attribute"
              version="3.26">
        <doc xml:space="preserve">Sets an "X-" attribute @x_name to value @value in @vcard, or
removes it from @vcard, when @value is %NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="vcard" transfer-ownership="none">
            <doc xml:space="preserve">an #EVCard</doc>
            <type name="VCard" c:type="EVCard*"/>
          </instance-parameter>
          <parameter name="x_name" transfer-ownership="none">
            <doc xml:space="preserve">the attribute name, which starts with "X-"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the value to set, or %NULL to unset</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="VCardPrivate" c:type="EVCardPrivate*"/>
      </field>
    </class>
    <record name="VCardAttribute"
            c:type="EVCardAttribute"
            glib:type-name="EVCardAttribute"
            glib:get-type="e_vcard_attribute_get_type"
            c:symbol-prefix="vcard_attribute">
      <constructor name="new" c:identifier="e_vcard_attribute_new">
        <doc xml:space="preserve">Creates a new #EVCardAttribute with the specified group and
attribute names. The @attr_group may be %NULL or the empty string if no
group is needed.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #EVCardAttribute.</doc>
          <type name="VCardAttribute" c:type="EVCardAttribute*"/>
        </return-value>
        <parameters>
          <parameter name="attr_group"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a group name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="attr_name" transfer-ownership="none">
            <doc xml:space="preserve">an attribute name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_param" c:identifier="e_vcard_attribute_add_param">
        <doc xml:space="preserve">Prepends @param to @attr's list of parameters. This takes ownership of
@param (and all its values).

Duplicate parameters have their values merged, so that all parameter names
in @attr are unique. Values are also merged so that uniqueness is preserved.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve">an #EVCardAttribute</doc>
            <type name="VCardAttribute" c:type="EVCardAttribute*"/>
          </instance-parameter>
          <parameter name="param" transfer-ownership="full">
            <doc xml:space="preserve">an #EVCardAttributeParam to add</doc>
            <type name="VCardAttributeParam" c:type="EVCardAttributeParam*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_param_with_value"
              c:identifier="e_vcard_attribute_add_param_with_value">
        <doc xml:space="preserve">Appends @value to @param, then prepends @param to @attr. This takes ownership
of @param, but not of @value.

This is a convenience method for e_vcard_attribute_param_add_value() and
e_vcard_attribute_add_param().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve">an #EVCardAttribute</doc>
            <type name="VCardAttribute" c:type="EVCardAttribute*"/>
          </instance-parameter>
          <parameter name="param" transfer-ownership="full">
            <doc xml:space="preserve">an #EVCardAttributeParam</doc>
            <type name="VCardAttributeParam" c:type="EVCardAttributeParam*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">a string value</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_param_with_values"
              c:identifier="e_vcard_attribute_add_param_with_values"
              introspectable="0">
        <doc xml:space="preserve">Appends the list of values to @param, then prepends @param to @attr. This
takes ownership of @param, but not of the list of values.

This is a convenience method for e_vcard_attribute_param_add_value() and
e_vcard_attribute_add_param().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve">an #EVCardAttribute</doc>
            <type name="VCardAttribute" c:type="EVCardAttribute*"/>
          </instance-parameter>
          <parameter name="param" transfer-ownership="full">
            <doc xml:space="preserve">an #EVCardAttributeParam</doc>
            <type name="VCardAttributeParam" c:type="EVCardAttributeParam*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve">a %NULL-terminated list of strings</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="add_value" c:identifier="e_vcard_attribute_add_value">
        <doc xml:space="preserve">Appends @value to @attr's list of values.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve">an #EVCardAttribute</doc>
            <type name="VCardAttribute" c:type="EVCardAttribute*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">a string value</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_value_decoded"
              c:identifier="e_vcard_attribute_add_value_decoded">
        <doc xml:space="preserve">Encodes @value according to the encoding used for @attr, and appends it to
@attr's list of values.

This should only be used if the #EVCardAttribute has a non-raw encoding (i.e.
if it’s encoded in base-64 or quoted-printable encoding).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve">an #EVCardAttribute</doc>
            <type name="VCardAttribute" c:type="EVCardAttribute*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">an encoded value</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">the length of the encoded value, in bytes</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_values"
              c:identifier="e_vcard_attribute_add_values"
              introspectable="0">
        <doc xml:space="preserve">Appends a list of values to @attr.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve">an #EVCardAttribute</doc>
            <type name="VCardAttribute" c:type="EVCardAttribute*"/>
          </instance-parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve">a %NULL-terminated list of strings</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="e_vcard_attribute_copy">
        <doc xml:space="preserve">Makes a copy of @attr.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #EVCardAttribute identical to @attr.</doc>
          <type name="VCardAttribute" c:type="EVCardAttribute*"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve">attribute to copy</doc>
            <type name="VCardAttribute" c:type="EVCardAttribute*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="e_vcard_attribute_free">
        <doc xml:space="preserve">Frees an attribute, its values and its parameters.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="full">
            <doc xml:space="preserve">attribute to free</doc>
            <type name="VCardAttribute" c:type="EVCardAttribute*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_group" c:identifier="e_vcard_attribute_get_group">
        <doc xml:space="preserve">Gets the group name of @attr.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">The attribute's group name, or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve">an #EVCardAttribute</doc>
            <type name="VCardAttribute" c:type="EVCardAttribute*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="e_vcard_attribute_get_name">
        <doc xml:space="preserve">Gets the name of @attr.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The attribute's name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve">an #EVCardAttribute</doc>
            <type name="VCardAttribute" c:type="EVCardAttribute*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_param" c:identifier="e_vcard_attribute_get_param">
        <doc xml:space="preserve">Gets the list of values for the paramater @name from @attr. The list and its
contents are owned by @attr, and must not be freed. If no parameter with the
given @name exists, %NULL is returned.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">A list of string
elements representing the parameter's values, or %NULL.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve">an #EVCardAttribute</doc>
            <type name="VCardAttribute" c:type="EVCardAttribute*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">a parameter name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_params" c:identifier="e_vcard_attribute_get_params">
        <doc xml:space="preserve">Gets the list of parameters (of type #EVCardAttributeParam) from @attr. The
list and its contents are owned by @attr, and must not be freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A list of
elements of type #EVCardAttributeParam.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="VCardAttributeParam"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve">an #EVCardAttribute</doc>
            <type name="VCardAttribute" c:type="EVCardAttribute*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value" c:identifier="e_vcard_attribute_get_value">
        <doc xml:space="preserve">Gets the value of a single-valued #EVCardAttribute, @attr.

For example, for a &lt;code&gt;FN&lt;/code&gt; (full name) attribute, this will
return the contact’s full name as a single string.

This will print a warning if called on an #EVCardAttribute which is not
single-valued (i.e. for which e_vcard_attribute_is_single_valued() returns
%FALSE). Use e_vcard_attribute_get_values() in such cases instead.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">A newly allocated string representing
the value, or %NULL if the attribute has no value.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve">an #EVCardAttribute</doc>
            <type name="VCardAttribute" c:type="EVCardAttribute*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value_decoded"
              c:identifier="e_vcard_attribute_get_value_decoded">
        <doc xml:space="preserve">Gets the value of a single-valued #EVCardAttribute, @attr, decoding
it if necessary according to the encoding given in the vCard’s
&lt;code&gt;ENCODING&lt;/code&gt; attribute.

This will print a warning if called on an #EVCardAttribute which is not
single-valued (i.e. for which e_vcard_attribute_is_single_valued() returns
%FALSE). Use e_vcard_attribute_get_values_decoded() in such cases instead.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">A newly allocated #GString
representing the value, or %NULL if the attribute has no value.</doc>
          <type name="GLib.String" c:type="GString*"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve">an #EVCardAttribute</doc>
            <type name="VCardAttribute" c:type="EVCardAttribute*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_values" c:identifier="e_vcard_attribute_get_values">
        <doc xml:space="preserve">Gets the ordered list of values from @attr. The list and its
contents are owned by @attr, and must not be freed.

For example, for an &lt;code&gt;ADR&lt;/code&gt; (postal address) attribute, this will
return the components of the postal address.

This may be called on a single-valued attribute (i.e. one for which
e_vcard_attribute_is_single_valued() returns %TRUE) and will return a
one-element list in that case. Alternatively, use
e_vcard_attribute_get_value() in such cases.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A list of string values. They
will all be non-%NULL, but may be empty strings. The list itself may be
empty.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve">an #EVCardAttribute</doc>
            <type name="VCardAttribute" c:type="EVCardAttribute*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_values_decoded"
              c:identifier="e_vcard_attribute_get_values_decoded">
        <doc xml:space="preserve">Gets the ordered list of values from @attr, decoding them if
necessary according to the encoding given in the vCard’s
&lt;code&gt;ENCODING&lt;/code&gt; attribute. The list and its contents are owned by
@attr, and must not be freed.

This may be called on a single-valued attribute (i.e. one for which
e_vcard_attribute_is_single_valued() returns %TRUE) and will return a
one-element list in that case. Alternatively, use
e_vcard_attribute_get_value_decoded() in such cases.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A list of values of type #GString.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="GLib.String"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve">an #EVCardAttribute</doc>
            <type name="VCardAttribute" c:type="EVCardAttribute*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_type" c:identifier="e_vcard_attribute_has_type">
        <doc xml:space="preserve">Checks if @attr has an #EVCardAttributeParam with name %EVC_TYPE and @typestr
as one of its values.

For example, for the vCard attribute:
|[
TEL;TYPE=WORK,VOICE:(111) 555-1212
]|
the following holds true:
|[
g_assert (e_vcard_attribute_has_type (attr, "WORK") == TRUE);
g_assert (e_vcard_attribute_has_type (attr, "voice") == TRUE);
g_assert (e_vcard_attribute_has_type (attr, "HOME") == FALSE);
]|

Comparisons against @typestr are case-insensitive.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if such a parameter exists, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve">an #EVCardAttribute</doc>
            <type name="VCardAttribute" c:type="EVCardAttribute*"/>
          </instance-parameter>
          <parameter name="typestr" transfer-ownership="none">
            <doc xml:space="preserve">a string representing the type</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_single_valued"
              c:identifier="e_vcard_attribute_is_single_valued">
        <doc xml:space="preserve">Checks if @attr has a single value.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the attribute has exactly one value, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve">an #EVCardAttribute</doc>
            <type name="VCardAttribute" c:type="EVCardAttribute*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_param"
              c:identifier="e_vcard_attribute_remove_param"
              version="1.12">
        <doc xml:space="preserve">Removes and frees parameter @param_name from the attribute @attr. Parameter
names are guaranteed to be unique, so @attr is guaranteed to have no
parameters named @param_name after this function returns.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve">an #EVCardAttribute</doc>
            <type name="VCardAttribute" c:type="EVCardAttribute*"/>
          </instance-parameter>
          <parameter name="param_name" transfer-ownership="none">
            <doc xml:space="preserve">a parameter name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_param_value"
              c:identifier="e_vcard_attribute_remove_param_value">
        <doc xml:space="preserve">Removes the value @s from the parameter @param_name on the attribute @attr.
If @s was the only value for parameter @param_name, that parameter is removed
entirely from @attr and freed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve">an #EVCardAttribute</doc>
            <type name="VCardAttribute" c:type="EVCardAttribute*"/>
          </instance-parameter>
          <parameter name="param_name" transfer-ownership="none">
            <doc xml:space="preserve">a parameter name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">a value</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_params"
              c:identifier="e_vcard_attribute_remove_params">
        <doc xml:space="preserve">Removes and frees all parameters from @attr.

This also resets the #EVCardAttribute's encoding back to raw.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve">an #EVCardAttribute</doc>
            <type name="VCardAttribute" c:type="EVCardAttribute*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_value"
              c:identifier="e_vcard_attribute_remove_value">
        <doc xml:space="preserve">Removes value @s from the value list in @attr. The value @s is not freed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve">an #EVCardAttribute</doc>
            <type name="VCardAttribute" c:type="EVCardAttribute*"/>
          </instance-parameter>
          <parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve">a value to remove</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_values"
              c:identifier="e_vcard_attribute_remove_values">
        <doc xml:space="preserve">Removes and frees all values from @attr.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="attr" transfer-ownership="none">
            <doc xml:space="preserve">an #EVCardAttribute</doc>
            <type name="VCardAttribute" c:type="EVCardAttribute*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <record name="VCardAttributeParam"
            c:type="EVCardAttributeParam"
            glib:type-name="EVCardAttributeParam"
            glib:get-type="e_vcard_attribute_param_get_type"
            c:symbol-prefix="vcard_attribute_param">
      <constructor name="new" c:identifier="e_vcard_attribute_param_new">
        <doc xml:space="preserve">Creates a new parameter named @name.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #EVCardAttributeParam.</doc>
          <type name="VCardAttributeParam" c:type="EVCardAttributeParam*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">the name of the new parameter</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_value"
              c:identifier="e_vcard_attribute_param_add_value">
        <doc xml:space="preserve">Appends @value to @param's list of values.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="param" transfer-ownership="none">
            <doc xml:space="preserve">an #EVCardAttributeParam</doc>
            <type name="VCardAttributeParam" c:type="EVCardAttributeParam*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">a string value to add</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_values"
              c:identifier="e_vcard_attribute_param_add_values"
              introspectable="0">
        <doc xml:space="preserve">Appends a list of values to @param.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="param" transfer-ownership="none">
            <doc xml:space="preserve">an #EVCardAttributeParam</doc>
            <type name="VCardAttributeParam" c:type="EVCardAttributeParam*"/>
          </instance-parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve">a %NULL-terminated list of strings</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="e_vcard_attribute_param_copy">
        <doc xml:space="preserve">Makes a copy of @param and all its values.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #EVCardAttributeParam identical to @param.</doc>
          <type name="VCardAttributeParam" c:type="EVCardAttributeParam*"/>
        </return-value>
        <parameters>
          <instance-parameter name="param" transfer-ownership="none">
            <doc xml:space="preserve">an #EVCardAttributeParam</doc>
            <type name="VCardAttributeParam" c:type="EVCardAttributeParam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="e_vcard_attribute_param_free">
        <doc xml:space="preserve">Frees @param and its values.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="param" transfer-ownership="full">
            <doc xml:space="preserve">an #EVCardAttributeParam</doc>
            <type name="VCardAttributeParam" c:type="EVCardAttributeParam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="e_vcard_attribute_param_get_name">
        <doc xml:space="preserve">Gets the name of @param.

For example, for the only parameter of the vCard attribute:
|[
TEL;TYPE=WORK,VOICE:(111) 555-1212
]|
this would return &lt;code&gt;TYPE&lt;/code&gt; (which is string-equivalent to
%EVC_TYPE).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The name of the parameter.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="param" transfer-ownership="none">
            <doc xml:space="preserve">an #EVCardAttributeParam</doc>
            <type name="VCardAttributeParam" c:type="EVCardAttributeParam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_values"
              c:identifier="e_vcard_attribute_param_get_values">
        <doc xml:space="preserve">Gets the list of values from @param. The list and its
contents are owned by @param, and must not be freed.

For example, for the &lt;code&gt;TYPE&lt;/code&gt; parameter of the vCard attribute:
|[
TEL;TYPE=WORK,VOICE:(111) 555-1212
]|
this would return the list &lt;code&gt;WORK&lt;/code&gt;, &lt;code&gt;VOICE&lt;/code&gt;.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A list of string elements
representing the parameter's values.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="param" transfer-ownership="none">
            <doc xml:space="preserve">an #EVCardAttributeParam</doc>
            <type name="VCardAttributeParam" c:type="EVCardAttributeParam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_values"
              c:identifier="e_vcard_attribute_param_remove_values">
        <doc xml:space="preserve">Removes and frees all values from @param.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="param" transfer-ownership="none">
            <doc xml:space="preserve">an #EVCardAttributeParam</doc>
            <type name="VCardAttributeParam" c:type="EVCardAttributeParam*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <record name="VCardClass"
            c:type="EVCardClass"
            glib:is-gtype-struct-for="VCard">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_ebook_reserved0" introspectable="0">
        <callback name="_ebook_reserved0">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_ebook_reserved1" introspectable="0">
        <callback name="_ebook_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_ebook_reserved2" introspectable="0">
        <callback name="_ebook_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_ebook_reserved3" introspectable="0">
        <callback name="_ebook_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_ebook_reserved4" introspectable="0">
        <callback name="_ebook_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="VCardFormat" c:type="EVCardFormat">
      <member name="21" value="0" c:identifier="EVC_FORMAT_VCARD_21">
      </member>
      <member name="30" value="1" c:identifier="EVC_FORMAT_VCARD_30">
      </member>
    </enumeration>
    <record name="VCardPrivate" c:type="EVCardPrivate" disguised="1">
    </record>
    <function name="address_western_parse"
              c:identifier="e_address_western_parse"
              moved-to="AddressWestern.parse">
      <doc xml:space="preserve">Parses a string representing a mailing address into a
structure of type #EAddressWestern.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">A new #EAddressWestern structure, or %NULL if the parsing failed.</doc>
        <type name="AddressWestern" c:type="EAddressWestern*"/>
      </return-value>
      <parameters>
        <parameter name="in_address" transfer-ownership="none">
          <doc xml:space="preserve">a string representing a mailing address</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="book_client_error_create"
              c:identifier="e_book_client_error_create"
              moved-to="BookClientError.create"
              version="3.2"
              deprecated="1"
              deprecated-version="3.8">
      <doc-deprecated xml:space="preserve">Just use the #GError API directly.</doc-deprecated>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a new #GError containing an E_BOOK_CLIENT_ERROR of the given
@code. If the @custom_msg is NULL, then the error message is
the one returned from e_book_client_error_to_string() for the @code,
otherwise the given message is used.

Returned pointer should be freed with g_error_free().</doc>
        <type name="GLib.Error" c:type="GError*"/>
      </return-value>
      <parameters>
        <parameter name="code" transfer-ownership="none">
          <doc xml:space="preserve">an #EBookClientError code to create</doc>
          <type name="BookClientError" c:type="EBookClientError"/>
        </parameter>
        <parameter name="custom_msg" transfer-ownership="none">
          <doc xml:space="preserve">custom message to use for the error; can be %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="book_client_error_quark"
              c:identifier="e_book_client_error_quark"
              moved-to="BookClientError.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="book_client_error_to_string"
              c:identifier="e_book_client_error_to_string"
              moved-to="BookClientError.to_string"
              version="3.2">
      <doc xml:space="preserve">Get localized human readable description of the given error code.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">Localized human readable description of the given error code</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="code" transfer-ownership="none">
          <doc xml:space="preserve">an #EBookClientError code</doc>
          <type name="BookClientError" c:type="EBookClientError"/>
        </parameter>
      </parameters>
    </function>
    <function name="book_query_and"
              c:identifier="e_book_query_and"
              moved-to="BookQuery.and">
      <doc xml:space="preserve">Create a new #EBookQuery which is the logical AND of the queries in #qs.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">A new #EBookQuery</doc>
        <type name="BookQuery" c:type="EBookQuery*"/>
      </return-value>
      <parameters>
        <parameter name="nqs" transfer-ownership="none">
          <doc xml:space="preserve">the number of queries to AND</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="qs" transfer-ownership="none">
          <doc xml:space="preserve">pointer to an array of #EBookQuery items</doc>
          <type name="BookQuery" c:type="EBookQuery**"/>
        </parameter>
        <parameter name="unref" transfer-ownership="none">
          <doc xml:space="preserve">if %TRUE, the new query takes ownership of the existing queries</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="book_query_any_field_contains"
              c:identifier="e_book_query_any_field_contains"
              moved-to="BookQuery.any_field_contains">
      <doc xml:space="preserve">Creates a new #EBookQuery which tests if any field contains @value.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">the new #EBookQuery</doc>
        <type name="BookQuery" c:type="EBookQuery*"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve">a value</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="book_query_field_exists"
              c:identifier="e_book_query_field_exists"
              moved-to="BookQuery.field_exists">
      <doc xml:space="preserve">Creates a new #EBookQuery which tests if the field @field exists.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">the new #EBookQuery</doc>
        <type name="BookQuery" c:type="EBookQuery*"/>
      </return-value>
      <parameters>
        <parameter name="field" transfer-ownership="none">
          <doc xml:space="preserve">a #EContactField</doc>
          <type name="ContactField" c:type="EContactField"/>
        </parameter>
      </parameters>
    </function>
    <function name="book_query_field_test"
              c:identifier="e_book_query_field_test"
              moved-to="BookQuery.field_test">
      <doc xml:space="preserve">Creates a new #EBookQuery which tests @field for @value using the test @test.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">the new #EBookQuery</doc>
        <type name="BookQuery" c:type="EBookQuery*"/>
      </return-value>
      <parameters>
        <parameter name="field" transfer-ownership="none">
          <doc xml:space="preserve">an #EContactField to test</doc>
          <type name="ContactField" c:type="EContactField"/>
        </parameter>
        <parameter name="test" transfer-ownership="none">
          <doc xml:space="preserve">the test to apply</doc>
          <type name="BookQueryTest" c:type="EBookQueryTest"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve">the value to test for</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="book_query_from_string"
              c:identifier="e_book_query_from_string"
              moved-to="BookQuery.from_string">
      <doc xml:space="preserve">Parse @query_string and return a new #EBookQuery representing it.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">the new #EBookQuery.</doc>
        <type name="BookQuery" c:type="EBookQuery*"/>
      </return-value>
      <parameters>
        <parameter name="query_string" transfer-ownership="none">
          <doc xml:space="preserve">the query</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="book_query_or"
              c:identifier="e_book_query_or"
              moved-to="BookQuery.or">
      <doc xml:space="preserve">Creates a new #EBookQuery which is the logical OR of the queries in #qs.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">A new #EBookQuery</doc>
        <type name="BookQuery" c:type="EBookQuery*"/>
      </return-value>
      <parameters>
        <parameter name="nqs" transfer-ownership="none">
          <doc xml:space="preserve">the number of queries to OR</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="qs" transfer-ownership="none">
          <doc xml:space="preserve">pointer to an array of #EBookQuery items</doc>
          <type name="BookQuery" c:type="EBookQuery**"/>
        </parameter>
        <parameter name="unref" transfer-ownership="none">
          <doc xml:space="preserve">if %TRUE, the new query takes ownership of the existing queries</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="book_query_vcard_field_exists"
              c:identifier="e_book_query_vcard_field_exists"
              moved-to="BookQuery.vcard_field_exists">
      <doc xml:space="preserve">Creates a new #EBookQuery which tests if the field @field exists. @field
should be a vCard field name, such as #FN or #X-MSN.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">the new #EBookQuery</doc>
        <type name="BookQuery" c:type="EBookQuery*"/>
      </return-value>
      <parameters>
        <parameter name="field" transfer-ownership="none">
          <doc xml:space="preserve">a field name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="book_query_vcard_field_test"
              c:identifier="e_book_query_vcard_field_test"
              moved-to="BookQuery.vcard_field_test"
              version="2.22">
      <doc xml:space="preserve">Creates a new #EBookQuery which tests @field for @value using the test @test.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">the new #EBookQuery</doc>
        <type name="BookQuery" c:type="EBookQuery*"/>
      </return-value>
      <parameters>
        <parameter name="field" transfer-ownership="none">
          <doc xml:space="preserve">a EVCard field name to test</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="test" transfer-ownership="none">
          <doc xml:space="preserve">the test to apply</doc>
          <type name="BookQueryTest" c:type="EBookQueryTest"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve">the value to test for</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="contact_attr_list_copy"
              c:identifier="e_contact_attr_list_copy"
              moved-to="ContactAttrList.copy"
              version="3.8">
      <doc xml:space="preserve">Copies a list of allocated strings, specifically
for the #EContactAttrList boxed type used for multi valued
contact fields.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">A copy of @list</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="utf8"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="list" transfer-ownership="none">
          <doc xml:space="preserve">A #GList of strings</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="contact_attr_list_free"
              c:identifier="e_contact_attr_list_free"
              moved-to="ContactAttrList.free"
              version="3.8">
      <doc xml:space="preserve">Frees a list of allocated strings, specifically
for the #EContactAttrList boxed type used for multi valued
contact fields.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="list" transfer-ownership="none">
          <doc xml:space="preserve">A #GList of strings</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="contact_date_from_string"
              c:identifier="e_contact_date_from_string"
              moved-to="ContactDate.from_string">
      <doc xml:space="preserve">Creates a new #EContactDate based on @str.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">A new #EContactDate struct.</doc>
        <type name="ContactDate" c:type="EContactDate*"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve">a date string in the format YYYY-MM-DD or YYYYMMDD</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="contact_name_from_string"
              c:identifier="e_contact_name_from_string"
              moved-to="ContactName.from_string">
      <doc xml:space="preserve">Creates a new #EContactName based on the parsed @name_str.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">A new #EContactName struct.</doc>
        <type name="ContactName" c:type="EContactName*"/>
      </return-value>
      <parameters>
        <parameter name="name_str" transfer-ownership="none">
          <doc xml:space="preserve">a string representing a contact's full name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="name_western_parse"
              c:identifier="e_name_western_parse"
              moved-to="NameWestern.parse">
      <doc xml:space="preserve">Parses @full_name and returns an #ENameWestern struct filled with
the component parts of the name.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">A new #ENameWestern struct.</doc>
        <type name="NameWestern" c:type="ENameWestern*"/>
      </return-value>
      <parameters>
        <parameter name="full_name" transfer-ownership="none">
          <doc xml:space="preserve">A string containing a western name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="phone_number_compare_strings"
              c:identifier="e_phone_number_compare_strings"
              moved-to="PhoneNumber.compare_strings"
              version="3.8"
              throws="1">
      <doc xml:space="preserve">Compares two phone numbers.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The quality of matching for the two phone numbers.</doc>
        <type name="PhoneNumberMatch" c:type="EPhoneNumberMatch"/>
      </return-value>
      <parameters>
        <parameter name="first_number" transfer-ownership="none">
          <doc xml:space="preserve">the first EPhoneNumber to compare</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="second_number" transfer-ownership="none">
          <doc xml:space="preserve">the second EPhoneNumber to compare</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="phone_number_compare_strings_with_region"
              c:identifier="e_phone_number_compare_strings_with_region"
              moved-to="PhoneNumber.compare_strings_with_region"
              version="3.8"
              throws="1">
      <doc xml:space="preserve">Compares two phone numbers within the context of @region_code.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The quality of matching for the two phone numbers.</doc>
        <type name="PhoneNumberMatch" c:type="EPhoneNumberMatch"/>
      </return-value>
      <parameters>
        <parameter name="first_number" transfer-ownership="none">
          <doc xml:space="preserve">the first EPhoneNumber to compare</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="second_number" transfer-ownership="none">
          <doc xml:space="preserve">the second EPhoneNumber to compare</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="region_code"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">a two-letter country code, or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="phone_number_error_quark"
              c:identifier="e_phone_number_error_quark"
              moved-to="PhoneNumber.error_quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="phone_number_from_string"
              c:identifier="e_phone_number_from_string"
              moved-to="PhoneNumber.from_string"
              version="3.8"
              throws="1">
      <doc xml:space="preserve">Parses the string passed in @phone_number. Note that no validation is
performed whether the recognized phone number is valid for a particular
region.

The two-letter country code passed in @region_code only is used if the
@phone_number is not written in international format. The application's
default region as returned by e_phone_number_get_default_region() is used
if @region_code is %NULL.

If the number is guaranteed to start with a '+' followed by the country
calling code, then "ZZ" can be passed for @region_code.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a new EPhoneNumber instance on success,
or %NULL on error. Call e_phone_number_free() to release this instance.</doc>
        <type name="PhoneNumber" c:type="EPhoneNumber*"/>
      </return-value>
      <parameters>
        <parameter name="phone_number" transfer-ownership="none">
          <doc xml:space="preserve">the phone number to parse</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="region_code"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">a two-letter country code, or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="phone_number_get_country_code_for_region"
              c:identifier="e_phone_number_get_country_code_for_region"
              moved-to="PhoneNumber.get_country_code_for_region"
              version="3.8"
              throws="1">
      <doc xml:space="preserve">Retrieves the preferred country calling code for @region_code,
e.g. 358 for "fi" or 1 for "en_US@UTF-8".

If %NULL is passed for @region_code the default region as returned by
e_phone_number_get_default_region() is used.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">a valid country calling code, or zero if an unknown region
code was passed.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="region_code"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">a two-letter country code, a locale name, or
%NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="phone_number_get_default_region"
              c:identifier="e_phone_number_get_default_region"
              moved-to="PhoneNumber.get_default_region"
              version="3.8"
              throws="1">
      <doc xml:space="preserve">Retrieves the current two-letter country code that's used by default for
parsing phone numbers in e_phone_number_from_string(). It can be useful
to store this number before parsing a bigger number of phone numbers.

The result of this functions depends on the current setup of the
%LC_ADDRESS category: If that category provides a reasonable value
for %_NL_ADDRESS_COUNTRY_AB2 this value is returned. Otherwise the
locale name configured for %LC_ADDRESS is parsed.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a newly allocated string containing the
current locale's two-letter code for phone number parsing.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
    </function>
    <function name="phone_number_is_supported"
              c:identifier="e_phone_number_is_supported"
              moved-to="PhoneNumber.is_supported"
              version="3.8">
      <doc xml:space="preserve">Checks if phone number support is available. It is recommended to call this
function before using any of the phone-utils functions to ensure that the
required functionality is available, and to pick alternative mechanisms if
needed.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if phone number support is available.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
  </namespace>
</repository>
